
rtos_sys_mon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bd4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08008d74  08008d74  00009d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091f8  080091f8  0000b09c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080091f8  080091f8  0000a1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009200  08009200  0000b09c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009200  08009200  0000a200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009204  08009204  0000a204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08009208  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c88  2000009c  080092a4  0000b09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d24  080092a4  0000bd24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e42c  00000000  00000000  0000b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004db4  00000000  00000000  000294f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  0002e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000141f  00000000  00000000  0002fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be13  00000000  00000000  0003110f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fdcc  00000000  00000000  0004cf22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0b2c  00000000  00000000  0006ccee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d81a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007790  00000000  00000000  0010d860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00114ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d5c 	.word	0x08008d5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	08008d5c 	.word	0x08008d5c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	@ (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <CLI_CMD_Help>:
};

const size_t num_commands = sizeof(commands) / sizeof(commands[0]);


void CLI_CMD_Help(int argc, char* argv[]) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
    const char* msg =
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <CLI_CMD_Help+0x34>)
 8000614:	60fb      	str	r3, [r7, #12]
        "  status       - show system status\r\n"
        "  diag         - run diagnostics\r\n"
        "  sleep [s]    - enter STOP mode and wake after s seconds\r\n"
        "  reset        - reset MCU\r\n";

    UART_HandleTypeDef *cli_uart= CLI_UART_Get_CLI_UART();
 8000616:	f000 faff 	bl	8000c18 <CLI_UART_Get_CLI_UART>
 800061a:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(cli_uart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800061c:	68f8      	ldr	r0, [r7, #12]
 800061e:	f7ff fde9 	bl	80001f4 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	b29a      	uxth	r2, r3
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	68f9      	ldr	r1, [r7, #12]
 800062c:	68b8      	ldr	r0, [r7, #8]
 800062e:	f002 ff9d 	bl	800356c <HAL_UART_Transmit>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	08008d9c 	.word	0x08008d9c

08000640 <CLI_CMD_Status>:

void CLI_CMD_Status(int argc, char* argv[]) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
    char buf[CLI_MSG_BUF_SIZE];
    uint32_t uptime_ms = xTaskGetTickCount();
 800064a:	f005 fc7f 	bl	8005f4c <xTaskGetTickCount>
 800064e:	64f8      	str	r0, [r7, #76]	@ 0x4c

    snprintf(buf, sizeof(buf), "[SYS] Uptime: %lus\r\n", uptime_ms / 1000);
 8000650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000652:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <CLI_CMD_Status+0x50>)
 8000654:	fba2 2303 	umull	r2, r3, r2, r3
 8000658:	099b      	lsrs	r3, r3, #6
 800065a:	f107 0008 	add.w	r0, r7, #8
 800065e:	4a0d      	ldr	r2, [pc, #52]	@ (8000694 <CLI_CMD_Status+0x54>)
 8000660:	2140      	movs	r1, #64	@ 0x40
 8000662:	f007 fa57 	bl	8007b14 <sniprintf>

    UART_HandleTypeDef *cli_uart= CLI_UART_Get_CLI_UART();
 8000666:	f000 fad7 	bl	8000c18 <CLI_UART_Get_CLI_UART>
 800066a:	64b8      	str	r0, [r7, #72]	@ 0x48
    HAL_UART_Transmit(cli_uart, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fdbf 	bl	80001f4 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	f107 0108 	add.w	r1, r7, #8
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000684:	f002 ff72 	bl	800356c <HAL_UART_Transmit>
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	@ 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	10624dd3 	.word	0x10624dd3
 8000694:	08008e74 	.word	0x08008e74

08000698 <CLI_CMD_Diag>:

void CLI_CMD_Diag(int argc, char* argv[]) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
    char buf[CLI_MSG_BUF_SIZE];

    snprintf(buf, sizeof(buf), "[DIAG] Heap free: %u bytes\r\n", xPortGetFreeHeapSize());
 80006a2:	f007 f825 	bl	80076f0 <xPortGetFreeHeapSize>
 80006a6:	4603      	mov	r3, r0
 80006a8:	f107 000c 	add.w	r0, r7, #12
 80006ac:	4a0c      	ldr	r2, [pc, #48]	@ (80006e0 <CLI_CMD_Diag+0x48>)
 80006ae:	2140      	movs	r1, #64	@ 0x40
 80006b0:	f007 fa30 	bl	8007b14 <sniprintf>

    UART_HandleTypeDef *cli_uart= CLI_UART_Get_CLI_UART();
 80006b4:	f000 fab0 	bl	8000c18 <CLI_UART_Get_CLI_UART>
 80006b8:	64f8      	str	r0, [r7, #76]	@ 0x4c
    HAL_UART_Transmit(cli_uart, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd98 	bl	80001f4 <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	f107 010c 	add.w	r1, r7, #12
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80006d2:	f002 ff4b 	bl	800356c <HAL_UART_Transmit>
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	@ 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	08008e8c 	.word	0x08008e8c

080006e4 <CLI_CMD_Sleep>:

void CLI_CMD_Sleep(int argc, char* argv[]) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b096      	sub	sp, #88	@ 0x58
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
    uint32_t seconds = DEFAULT_SLEEP_SECONDS;
 80006ee:	2305      	movs	r3, #5
 80006f0:	657b      	str	r3, [r7, #84]	@ 0x54
    UART_HandleTypeDef *cli_uart= CLI_UART_Get_CLI_UART();
 80006f2:	f000 fa91 	bl	8000c18 <CLI_UART_Get_CLI_UART>
 80006f6:	6538      	str	r0, [r7, #80]	@ 0x50

    if (argc >= 2)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	dd0c      	ble.n	8000718 <CLI_CMD_Sleep+0x34>
    {
        seconds = (uint32_t)atoi(argv[1]);
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	3304      	adds	r3, #4
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f007 f8bb 	bl	8007880 <atoi>
 800070a:	4603      	mov	r3, r0
 800070c:	657b      	str	r3, [r7, #84]	@ 0x54
        if (seconds == 0) seconds = 5;  // fallback
 800070e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <CLI_CMD_Sleep+0x34>
 8000714:	2305      	movs	r3, #5
 8000716:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    char msg[CLI_MSG_BUF_SIZE];
    snprintf(msg, sizeof(msg), "[SYS] Sleeping %lus via RTC...\r\n", seconds);
 8000718:	f107 0008 	add.w	r0, r7, #8
 800071c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800071e:	4a27      	ldr	r2, [pc, #156]	@ (80007bc <CLI_CMD_Sleep+0xd8>)
 8000720:	2140      	movs	r1, #64	@ 0x40
 8000722:	f007 f9f7 	bl	8007b14 <sniprintf>


    HAL_UART_Transmit(cli_uart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fd62 	bl	80001f4 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	f107 0108 	add.w	r1, r7, #8
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800073e:	f002 ff15 	bl	800356c <HAL_UART_Transmit>
    osDelay(10);
 8000742:	200a      	movs	r0, #10
 8000744:	f004 f838 	bl	80047b8 <osDelay>


    // Disable wakeup to reconfigure
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000748:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <CLI_CMD_Sleep+0xdc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a1c      	ldr	r2, [pc, #112]	@ (80007c0 <CLI_CMD_Sleep+0xdc>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	6013      	str	r3, [r2, #0]

    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000754:	481b      	ldr	r0, [pc, #108]	@ (80007c4 <CLI_CMD_Sleep+0xe0>)
 8000756:	f002 fbbf 	bl	8002ed8 <HAL_RTCEx_DeactivateWakeUpTimer>
    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK) {
 800075a:	2204      	movs	r2, #4
 800075c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800075e:	4819      	ldr	r0, [pc, #100]	@ (80007c4 <CLI_CMD_Sleep+0xe0>)
 8000760:	f002 faf8 	bl	8002d54 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d00d      	beq.n	8000786 <CLI_CMD_Sleep+0xa2>
        const char* err = "[SYS] Failed to set wakeup timer\r\n";
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <CLI_CMD_Sleep+0xe4>)
 800076c:	64bb      	str	r3, [r7, #72]	@ 0x48


        HAL_UART_Transmit(cli_uart, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 800076e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000770:	f7ff fd40 	bl	80001f4 <strlen>
 8000774:	4603      	mov	r3, r0
 8000776:	b29a      	uxth	r2, r3
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800077e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000780:	f002 fef4 	bl	800356c <HAL_UART_Transmit>
 8000784:	e016      	b.n	80007b4 <CLI_CMD_Sleep+0xd0>
        return;
    }

    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000786:	2101      	movs	r1, #1
 8000788:	2001      	movs	r0, #1
 800078a:	f001 fab9 	bl	8001d00 <HAL_PWR_EnterSTOPMode>

    // MCU resumed here
    SystemClock_Config();
 800078e:	f000 fb3d 	bl	8000e0c <SystemClock_Config>
    MX_USART2_UART_Init();
 8000792:	f000 fe7f 	bl	8001494 <MX_USART2_UART_Init>
    CLI_UART_Resume();
 8000796:	f000 f9c3 	bl	8000b20 <CLI_UART_Resume>

    const char* done = "[SYS] Woke up from RTC wakeup\r\n";
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <CLI_CMD_Sleep+0xe8>)
 800079c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_UART_Transmit(cli_uart, (uint8_t*)done, strlen(done), HAL_MAX_DELAY);
 800079e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80007a0:	f7ff fd28 	bl	80001f4 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80007ae:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80007b0:	f002 fedc 	bl	800356c <HAL_UART_Transmit>
}
 80007b4:	3758      	adds	r7, #88	@ 0x58
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	08008eac 	.word	0x08008eac
 80007c0:	40007000 	.word	0x40007000
 80007c4:	200001d0 	.word	0x200001d0
 80007c8:	08008ed0 	.word	0x08008ed0
 80007cc:	08008ef4 	.word	0x08008ef4

080007d0 <CLI_CMD_Reset>:

void CLI_CMD_Reset(int argc, char* argv[]) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
    const char* msg = "[SYS] Resetting system...\r\n";
 80007da:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <CLI_CMD_Reset+0x34>)
 80007dc:	60fb      	str	r3, [r7, #12]

    UART_HandleTypeDef *cli_uart= CLI_UART_Get_CLI_UART();
 80007de:	f000 fa1b 	bl	8000c18 <CLI_UART_Get_CLI_UART>
 80007e2:	60b8      	str	r0, [r7, #8]
    HAL_UART_Transmit(cli_uart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f7ff fd05 	bl	80001f4 <strlen>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	68f9      	ldr	r1, [r7, #12]
 80007f4:	68b8      	ldr	r0, [r7, #8]
 80007f6:	f002 feb9 	bl	800356c <HAL_UART_Transmit>
    osDelay(10);
 80007fa:	200a      	movs	r0, #10
 80007fc:	f003 ffdc 	bl	80047b8 <osDelay>
    NVIC_SystemReset();
 8000800:	f7ff feec 	bl	80005dc <__NVIC_SystemReset>
 8000804:	08008f14 	.word	0x08008f14

08000808 <__NVIC_SystemReset>:
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800080c:	f3bf 8f4f 	dsb	sy
}
 8000810:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <__NVIC_SystemReset+0x24>)
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800081a:	4904      	ldr	r1, [pc, #16]	@ (800082c <__NVIC_SystemReset+0x24>)
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <__NVIC_SystemReset+0x28>)
 800081e:	4313      	orrs	r3, r2
 8000820:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000822:	f3bf 8f4f 	dsb	sy
}
 8000826:	bf00      	nop
    __NOP();
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <__NVIC_SystemReset+0x20>
 800082c:	e000ed00 	.word	0xe000ed00
 8000830:	05fa0004 	.word	0x05fa0004

08000834 <CLI_Core_Init>:
static uint16_t line_len = 0;
static  volatile bool init_flag;

extern const size_t num_commands;

bool CLI_Core_Init(UART_HandleTypeDef* huart) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	if(!CLI_UART_Init(huart)) return false;
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f93f 	bl	8000ac0 <CLI_UART_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	f083 0301 	eor.w	r3, r3, #1
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <CLI_Core_Init+0x1e>
 800084e:	2300      	movs	r3, #0
 8000850:	e00b      	b.n	800086a <CLI_Core_Init+0x36>
    RingBuffer_Init(&cli_buffer);
 8000852:	4808      	ldr	r0, [pc, #32]	@ (8000874 <CLI_Core_Init+0x40>)
 8000854:	f000 fb5d 	bl	8000f12 <RingBuffer_Init>
    line_len = 0;
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <CLI_Core_Init+0x44>)
 800085a:	2200      	movs	r2, #0
 800085c:	801a      	strh	r2, [r3, #0]
	init_flag = true; // init done
 800085e:	4b07      	ldr	r3, [pc, #28]	@ (800087c <CLI_Core_Init+0x48>)
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]
	return init_flag;
 8000864:	4b05      	ldr	r3, [pc, #20]	@ (800087c <CLI_Core_Init+0x48>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000b8 	.word	0x200000b8
 8000878:	200001bc 	.word	0x200001bc
 800087c:	200001be 	.word	0x200001be

08000880 <CLI_Core_ProcessCommand>:

bool CLI_Core_ProcessCommand(char *input_line){
 8000880:	b580      	push	{r7, lr}
 8000882:	b090      	sub	sp, #64	@ 0x40
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	char *argv[MAX_TOKEN];
	uint8_t argc=0;
 8000888:	2300      	movs	r3, #0
 800088a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f


	if(!init_flag) return init_flag;
 800088e:	4b34      	ldr	r3, [pc, #208]	@ (8000960 <CLI_Core_ProcessCommand+0xe0>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	f083 0301 	eor.w	r3, r3, #1
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <CLI_Core_ProcessCommand+0x26>
 800089e:	4b30      	ldr	r3, [pc, #192]	@ (8000960 <CLI_Core_ProcessCommand+0xe0>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	e057      	b.n	8000956 <CLI_Core_ProcessCommand+0xd6>
	char *token = strtok(input_line, " ");
 80008a6:	492f      	ldr	r1, [pc, #188]	@ (8000964 <CLI_Core_ProcessCommand+0xe4>)
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f007 f9b5 	bl	8007c18 <strtok>
 80008ae:	63b8      	str	r0, [r7, #56]	@ 0x38
	while(token && argc< MAX_TOKEN)
 80008b0:	e00f      	b.n	80008d2 <CLI_Core_ProcessCommand+0x52>
		{
		 argv[argc++]=token;
 80008b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	3340      	adds	r3, #64	@ 0x40
 80008c0:	443b      	add	r3, r7
 80008c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80008c4:	f843 2c34 	str.w	r2, [r3, #-52]
		 token = strtok(NULL, " ");
 80008c8:	4926      	ldr	r1, [pc, #152]	@ (8000964 <CLI_Core_ProcessCommand+0xe4>)
 80008ca:	2000      	movs	r0, #0
 80008cc:	f007 f9a4 	bl	8007c18 <strtok>
 80008d0:	63b8      	str	r0, [r7, #56]	@ 0x38
	while(token && argc< MAX_TOKEN)
 80008d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d003      	beq.n	80008e0 <CLI_Core_ProcessCommand+0x60>
 80008d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008dc:	2b07      	cmp	r3, #7
 80008de:	d9e8      	bls.n	80008b2 <CLI_Core_ProcessCommand+0x32>
		}

	if(argc == 0) return false;
 80008e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <CLI_Core_ProcessCommand+0x6c>
 80008e8:	2300      	movs	r3, #0
 80008ea:	e034      	b.n	8000956 <CLI_Core_ProcessCommand+0xd6>

	for(int i = 0;i < num_commands; i++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80008f0:	e01b      	b.n	800092a <CLI_Core_ProcessCommand+0xaa>
	  {
		if(strcmp(argv[0],commands[i].name) == 0)
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	491c      	ldr	r1, [pc, #112]	@ (8000968 <CLI_Core_ProcessCommand+0xe8>)
 80008f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008f8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80008fc:	4619      	mov	r1, r3
 80008fe:	4610      	mov	r0, r2
 8000900:	f7ff fc6e 	bl	80001e0 <strcmp>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10c      	bne.n	8000924 <CLI_Core_ProcessCommand+0xa4>
		 {
			commands[i].handler(argc,argv);
 800090a:	4a17      	ldr	r2, [pc, #92]	@ (8000968 <CLI_Core_ProcessCommand+0xe8>)
 800090c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	4413      	add	r3, r2
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000918:	f107 010c 	add.w	r1, r7, #12
 800091c:	4610      	mov	r0, r2
 800091e:	4798      	blx	r3
			return true;
 8000920:	2301      	movs	r3, #1
 8000922:	e018      	b.n	8000956 <CLI_Core_ProcessCommand+0xd6>
	for(int i = 0;i < num_commands; i++)
 8000924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000926:	3301      	adds	r3, #1
 8000928:	637b      	str	r3, [r7, #52]	@ 0x34
 800092a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <CLI_Core_ProcessCommand+0xec>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	429a      	cmp	r2, r3
 8000932:	d3de      	bcc.n	80008f2 <CLI_Core_ProcessCommand+0x72>
		 }
	  }
    const char *err = "Unknown command\r\n";
 8000934:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <CLI_Core_ProcessCommand+0xf0>)
 8000936:	633b      	str	r3, [r7, #48]	@ 0x30

    UART_HandleTypeDef *cli_uart= CLI_UART_Get_CLI_UART();
 8000938:	f000 f96e 	bl	8000c18 <CLI_UART_Get_CLI_UART>
 800093c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    HAL_UART_Transmit(cli_uart, (uint8_t *)err, strlen(err), HAL_MAX_DELAY);
 800093e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000940:	f7ff fc58 	bl	80001f4 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	b29a      	uxth	r2, r3
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
 800094c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800094e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000950:	f002 fe0c 	bl	800356c <HAL_UART_Transmit>
    return false;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3740      	adds	r7, #64	@ 0x40
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200001be 	.word	0x200001be
 8000964:	08008f30 	.word	0x08008f30
 8000968:	20000000 	.word	0x20000000
 800096c:	08008fb0 	.word	0x08008fb0
 8000970:	08008f34 	.word	0x08008f34

08000974 <CLI_Core_PutChar>:




bool CLI_Core_PutChar(uint8_t byte) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
	if(!init_flag) return init_flag;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <CLI_Core_PutChar+0x38>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	f083 0301 	eor.w	r3, r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <CLI_Core_PutChar+0x22>
 800098e:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <CLI_Core_PutChar+0x38>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	e005      	b.n	80009a2 <CLI_Core_PutChar+0x2e>
    return RingBuffer_Put(&cli_buffer, byte);
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4619      	mov	r1, r3
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <CLI_Core_PutChar+0x3c>)
 800099c:	f000 facb 	bl	8000f36 <RingBuffer_Put>
 80009a0:	4603      	mov	r3, r0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200001be 	.word	0x200001be
 80009b0:	200000b8 	.word	0x200000b8

080009b4 <CLI_Core_GetLine>:

bool CLI_Core_GetLine(uint8_t* dst, uint16_t max_len) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	807b      	strh	r3, [r7, #2]
    uint8_t byte;
	if(!init_flag) return init_flag;
 80009c0:	4b27      	ldr	r3, [pc, #156]	@ (8000a60 <CLI_Core_GetLine+0xac>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f083 0301 	eor.w	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d039      	beq.n	8000a44 <CLI_Core_GetLine+0x90>
 80009d0:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <CLI_Core_GetLine+0xac>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	e03f      	b.n	8000a58 <CLI_Core_GetLine+0xa4>
    while (RingBuffer_Get(&cli_buffer, &byte))
         {
		  if (line_len < CLI_LINE_BUF_SIZE - 1)
 80009d8:	4b22      	ldr	r3, [pc, #136]	@ (8000a64 <CLI_Core_GetLine+0xb0>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80009de:	d82e      	bhi.n	8000a3e <CLI_Core_GetLine+0x8a>
			{
			  if(byte == '\r' || byte == '\n')
 80009e0:	7b7b      	ldrb	r3, [r7, #13]
 80009e2:	2b0d      	cmp	r3, #13
 80009e4:	d002      	beq.n	80009ec <CLI_Core_GetLine+0x38>
 80009e6:	7b7b      	ldrb	r3, [r7, #13]
 80009e8:	2b0a      	cmp	r3, #10
 80009ea:	d11d      	bne.n	8000a28 <CLI_Core_GetLine+0x74>
				{
				  line_buf[line_len] = '\0';
 80009ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <CLI_Core_GetLine+0xb0>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <CLI_Core_GetLine+0xb4>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	5499      	strb	r1, [r3, r2]
				  uint16_t len = (line_len < max_len) ? line_len : max_len - 1;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <CLI_Core_GetLine+0xb0>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	887a      	ldrh	r2, [r7, #2]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d803      	bhi.n	8000a0a <CLI_Core_GetLine+0x56>
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	e001      	b.n	8000a0e <CLI_Core_GetLine+0x5a>
 8000a0a:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <CLI_Core_GetLine+0xb0>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	81fb      	strh	r3, [r7, #14]
				  memcpy(dst, line_buf, len + 1);
 8000a10:	89fb      	ldrh	r3, [r7, #14]
 8000a12:	3301      	adds	r3, #1
 8000a14:	461a      	mov	r2, r3
 8000a16:	4914      	ldr	r1, [pc, #80]	@ (8000a68 <CLI_Core_GetLine+0xb4>)
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f007 f9cc 	bl	8007db6 <memcpy>
				  line_len = 0;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <CLI_Core_GetLine+0xb0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	801a      	strh	r2, [r3, #0]
				  return true;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e017      	b.n	8000a58 <CLI_Core_GetLine+0xa4>
				}
			  else
				{
				  line_buf[line_len++] = byte;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <CLI_Core_GetLine+0xb0>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	b291      	uxth	r1, r2
 8000a30:	4a0c      	ldr	r2, [pc, #48]	@ (8000a64 <CLI_Core_GetLine+0xb0>)
 8000a32:	8011      	strh	r1, [r2, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	7b79      	ldrb	r1, [r7, #13]
 8000a38:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <CLI_Core_GetLine+0xb4>)
 8000a3a:	5499      	strb	r1, [r3, r2]
 8000a3c:	e002      	b.n	8000a44 <CLI_Core_GetLine+0x90>
				}
			}
		   else
			{
			  line_len = 0;  // overflow
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <CLI_Core_GetLine+0xb0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	801a      	strh	r2, [r3, #0]
    while (RingBuffer_Get(&cli_buffer, &byte))
 8000a44:	f107 030d 	add.w	r3, r7, #13
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4808      	ldr	r0, [pc, #32]	@ (8000a6c <CLI_Core_GetLine+0xb8>)
 8000a4c:	f000 fa9e 	bl	8000f8c <RingBuffer_Get>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1c0      	bne.n	80009d8 <CLI_Core_GetLine+0x24>
			}
          }
    return false;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200001be 	.word	0x200001be
 8000a64:	200001bc 	.word	0x200001bc
 8000a68:	2000013c 	.word	0x2000013c
 8000a6c:	200000b8 	.word	0x200000b8

08000a70 <CLI_Core_ErrorHandle>:

void CLI_Core_ErrorHandle(const char *reason){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

    if (CLI_UART_Is_UART_Ready()) {
 8000a78:	f000 f8c2 	bl	8000c00 <CLI_UART_Is_UART_Ready>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d011      	beq.n	8000aa6 <CLI_Core_ErrorHandle+0x36>
    	UART_HandleTypeDef *cli_uart= CLI_UART_Get_CLI_UART();
 8000a82:	f000 f8c9 	bl	8000c18 <CLI_UART_Get_CLI_UART>
 8000a86:	60f8      	str	r0, [r7, #12]
        HAL_UART_Transmit(cli_uart, (uint8_t *)reason, strlen(reason), HAL_MAX_DELAY);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fbb3 	bl	80001f4 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f002 fd67 	bl	800356c <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9e:	b672      	cpsid	i
}
 8000aa0:	bf00      	nop
        __disable_irq();
        while (1);  // Safe mode
 8000aa2:	bf00      	nop
 8000aa4:	e7fd      	b.n	8000aa2 <CLI_Core_ErrorHandle+0x32>
    } else {
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); //show reset signal for 1sec before activate
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	4804      	ldr	r0, [pc, #16]	@ (8000abc <CLI_Core_ErrorHandle+0x4c>)
 8000aac:	f001 f8f4 	bl	8001c98 <HAL_GPIO_WritePin>
    	HAL_Delay(1000);
 8000ab0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab4:	f000 fdd4 	bl	8001660 <HAL_Delay>
        NVIC_SystemReset(); // Fallback
 8000ab8:	f7ff fea6 	bl	8000808 <__NVIC_SystemReset>
 8000abc:	40020000 	.word	0x40020000

08000ac0 <CLI_UART_Init>:
	.cli_flag_line_ready = (1U << 0),
	.cli_event_obj = NULL
};


bool CLI_UART_Init(UART_HandleTypeDef* huart) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	huart_buf = huart;
 8000ac8:	4a11      	ldr	r2, [pc, #68]	@ (8000b10 <CLI_UART_Init+0x50>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
	cli_flag_handle.cli_event_obj = osEventFlagsNew(NULL);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f003 fe8d 	bl	80047ee <osEventFlagsNew>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b14 <CLI_UART_Init+0x54>)
 8000ad8:	6053      	str	r3, [r2, #4]
	if (cli_flag_handle.cli_event_obj == NULL ||
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <CLI_UART_Init+0x54>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d009      	beq.n	8000af6 <CLI_UART_Init+0x36>
		HAL_UART_Receive_IT(huart_buf, (uint8_t*)&rx_data, sizeof(rx_data)) != HAL_OK)
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <CLI_UART_Init+0x50>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	490b      	ldr	r1, [pc, #44]	@ (8000b18 <CLI_UART_Init+0x58>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 fdc9 	bl	8003682 <HAL_UART_Receive_IT>
 8000af0:	4603      	mov	r3, r0
	if (cli_flag_handle.cli_event_obj == NULL ||
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <CLI_UART_Init+0x3a>
	   {
		return false; // init fail
 8000af6:	2300      	movs	r3, #0
 8000af8:	e005      	b.n	8000b06 <CLI_UART_Init+0x46>
	   }
	init_flag = true; // init done
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <CLI_UART_Init+0x5c>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
	return init_flag;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <CLI_UART_Init+0x5c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200001c0 	.word	0x200001c0
 8000b14:	20000028 	.word	0x20000028
 8000b18:	200001c4 	.word	0x200001c4
 8000b1c:	200001c5 	.word	0x200001c5

08000b20 <CLI_UART_Resume>:

bool CLI_UART_Resume(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	if (init_flag) HAL_UART_Receive_IT(huart_buf, (uint8_t*)&rx_data, sizeof(rx_data));
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <CLI_UART_Resume+0x28>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d006      	beq.n	8000b3c <CLI_UART_Resume+0x1c>
 8000b2e:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <CLI_UART_Resume+0x2c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2201      	movs	r2, #1
 8000b34:	4906      	ldr	r1, [pc, #24]	@ (8000b50 <CLI_UART_Resume+0x30>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 fda3 	bl	8003682 <HAL_UART_Receive_IT>
	return init_flag;
 8000b3c:	4b02      	ldr	r3, [pc, #8]	@ (8000b48 <CLI_UART_Resume+0x28>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2db      	uxtb	r3, r3
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200001c5 	.word	0x200001c5
 8000b4c:	200001c0 	.word	0x200001c0
 8000b50:	200001c4 	.word	0x200001c4

08000b54 <CLI_UART_Get_CLI_Flag>:

bool CLI_UART_Get_CLI_Flag(CLI_FLAG_HANDLE *flag_buf) {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if(init_flag) *flag_buf = cli_flag_handle;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <CLI_UART_Get_CLI_Flag+0x30>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d005      	beq.n	8000b72 <CLI_UART_Get_CLI_Flag+0x1e>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <CLI_UART_Get_CLI_Flag+0x34>)
 8000b6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b6e:	e883 0003 	stmia.w	r3, {r0, r1}
	return init_flag;
 8000b72:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <CLI_UART_Get_CLI_Flag+0x30>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	200001c5 	.word	0x200001c5
 8000b88:	20000028 	.word	0x20000028

08000b8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if (init_flag)
 8000b94:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <HAL_UART_RxCpltCallback+0x64>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d024      	beq.n	8000be8 <HAL_UART_RxCpltCallback+0x5c>
	{
		if (huart->Instance == huart_buf->Instance)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <HAL_UART_RxCpltCallback+0x68>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d11d      	bne.n	8000be8 <HAL_UART_RxCpltCallback+0x5c>
		{
			CLI_Core_PutChar(rx_data);
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x6c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fede 	bl	8000974 <CLI_Core_PutChar>
			if ((rx_data == '\n' || rx_data == '\r') && cli_flag_handle.cli_event_obj != NULL)
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x6c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b0a      	cmp	r3, #10
 8000bc0:	d004      	beq.n	8000bcc <HAL_UART_RxCpltCallback+0x40>
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x6c>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b0d      	cmp	r3, #13
 8000bca:	d10b      	bne.n	8000be4 <HAL_UART_RxCpltCallback+0x58>
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <HAL_UART_RxCpltCallback+0x70>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d007      	beq.n	8000be4 <HAL_UART_RxCpltCallback+0x58>
			{
				//set event flag
				osEventFlagsSet(cli_flag_handle.cli_event_obj, cli_flag_handle.cli_flag_line_ready);
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_UART_RxCpltCallback+0x70>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_UART_RxCpltCallback+0x70>)
 8000bda:	6812      	ldr	r2, [r2, #0]
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fe44 	bl	800486c <osEventFlagsSet>
			}
			CLI_UART_Resume();
 8000be4:	f7ff ff9c 	bl	8000b20 <CLI_UART_Resume>
		}
	}
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200001c5 	.word	0x200001c5
 8000bf4:	200001c0 	.word	0x200001c0
 8000bf8:	200001c4 	.word	0x200001c4
 8000bfc:	20000028 	.word	0x20000028

08000c00 <CLI_UART_Is_UART_Ready>:

bool CLI_UART_Is_UART_Ready(void){
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	 return init_flag;
 8000c04:	4b03      	ldr	r3, [pc, #12]	@ (8000c14 <CLI_UART_Is_UART_Ready+0x14>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b2db      	uxtb	r3, r3

}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	200001c5 	.word	0x200001c5

08000c18 <CLI_UART_Get_CLI_UART>:

UART_HandleTypeDef * CLI_UART_Get_CLI_UART(void){
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
	return huart_buf;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <CLI_UART_Get_CLI_UART+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200001c0 	.word	0x200001c0

08000c30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  if(!CLI_Core_Init(&huart2)) CLI_Core_ErrorHandle("Initial UART fail");
 8000c34:	480e      	ldr	r0, [pc, #56]	@ (8000c70 <MX_FREERTOS_Init+0x40>)
 8000c36:	f7ff fdfd 	bl	8000834 <CLI_Core_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f083 0301 	eor.w	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <MX_FREERTOS_Init+0x1c>
 8000c46:	480b      	ldr	r0, [pc, #44]	@ (8000c74 <MX_FREERTOS_Init+0x44>)
 8000c48:	f7ff ff12 	bl	8000a70 <CLI_Core_ErrorHandle>
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HeartBeatTaskHandle = osThreadNew(HeartBeatTask, NULL, &HeartBeatTask_attributes);
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <MX_FREERTOS_Init+0x48>)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	480a      	ldr	r0, [pc, #40]	@ (8000c7c <MX_FREERTOS_Init+0x4c>)
 8000c52:	f003 fd1f 	bl	8004694 <osThreadNew>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4a09      	ldr	r2, [pc, #36]	@ (8000c80 <MX_FREERTOS_Init+0x50>)
 8000c5a:	6013      	str	r3, [r2, #0]
  CliTaskHandle = osThreadNew(CliTask, NULL, &CliTask_attributes);
 8000c5c:	4a09      	ldr	r2, [pc, #36]	@ (8000c84 <MX_FREERTOS_Init+0x54>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <MX_FREERTOS_Init+0x58>)
 8000c62:	f003 fd17 	bl	8004694 <osThreadNew>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <MX_FREERTOS_Init+0x5c>)
 8000c6a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */

  /* USER CODE END RTOS_EVENTS */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000023c 	.word	0x2000023c
 8000c74:	08008f6c 	.word	0x08008f6c
 8000c78:	08008fb4 	.word	0x08008fb4
 8000c7c:	08000c91 	.word	0x08000c91
 8000c80:	200001c8 	.word	0x200001c8
 8000c84:	08008fd8 	.word	0x08008fd8
 8000c88:	08000cb1 	.word	0x08000cb1
 8000c8c:	200001cc 	.word	0x200001cc

08000c90 <HeartBeatTask>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HeartBeatTask(void *argument)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HeartBeatTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c98:	2120      	movs	r1, #32
 8000c9a:	4804      	ldr	r0, [pc, #16]	@ (8000cac <HeartBeatTask+0x1c>)
 8000c9c:	f001 f815 	bl	8001cca <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ca4:	f003 fd88 	bl	80047b8 <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ca8:	bf00      	nop
 8000caa:	e7f5      	b.n	8000c98 <HeartBeatTask+0x8>
 8000cac:	40020000 	.word	0x40020000

08000cb0 <CliTask>:
  }
  /* USER CODE END HeartBeatTask */
}

void CliTask(void *argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0a4      	sub	sp, #144	@ 0x90
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
   CLI_FLAG_HANDLE cli_flag;
   uint8_t cmd_buf[CLI_LINE_BUF_SIZE];
   if(!CLI_UART_Get_CLI_Flag(&cli_flag))CLI_Core_ErrorHandle("Create CLI Flag fail");
 8000cb8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff49 	bl	8000b54 <CLI_UART_Get_CLI_Flag>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	f083 0301 	eor.w	r3, r3, #1
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <CliTask+0x24>
 8000cce:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <CliTask+0x54>)
 8000cd0:	f7ff fece 	bl	8000a70 <CLI_Core_ErrorHandle>

  for(;;)
  {
    osEventFlagsWait(cli_flag.cli_event_obj, cli_flag.cli_flag_line_ready, osFlagsWaitAny,osWaitForever);
 8000cd4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000cd8:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f003 fe05 	bl	80048f0 <osEventFlagsWait>
    if (CLI_Core_GetLine((uint8_t*)cmd_buf, sizeof(cmd_buf)))
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	2180      	movs	r1, #128	@ 0x80
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fe61 	bl	80009b4 <CLI_Core_GetLine>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0ed      	beq.n	8000cd4 <CliTask+0x24>
      {
    	CLI_Core_ProcessCommand((char*)&cmd_buf);
 8000cf8:	f107 0308 	add.w	r3, r7, #8
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fdbf 	bl	8000880 <CLI_Core_ProcessCommand>
    osEventFlagsWait(cli_flag.cli_event_obj, cli_flag.cli_flag_line_ready, osFlagsWaitAny,osWaitForever);
 8000d02:	e7e7      	b.n	8000cd4 <CliTask+0x24>
 8000d04:	08008f80 	.word	0x08008f80

08000d08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b26      	ldr	r3, [pc, #152]	@ (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a25      	ldr	r2, [pc, #148]	@ (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b23      	ldr	r3, [pc, #140]	@ (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a17      	ldr	r2, [pc, #92]	@ (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <MX_GPIO_Init+0xd0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2120      	movs	r1, #32
 8000d92:	4812      	ldr	r0, [pc, #72]	@ (8000ddc <MX_GPIO_Init+0xd4>)
 8000d94:	f000 ff80 	bl	8001c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d9e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <MX_GPIO_Init+0xd8>)
 8000db0:	f000 fdee 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db4:	2320      	movs	r3, #32
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <MX_GPIO_Init+0xd4>)
 8000dcc:	f000 fde0 	bl	8001990 <HAL_GPIO_Init>

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	@ 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020800 	.word	0x40020800

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de8:	f000 fbf8 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dec:	f000 f80e 	bl	8000e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df0:	f7ff ff8a 	bl	8000d08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000df4:	f000 fb4e 	bl	8001494 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000df8:	f000 f8fa 	bl	8000ff0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000dfc:	f003 fc00 	bl	8004600 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e00:	f7ff ff16 	bl	8000c30 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e04:	f003 fc20 	bl	8004648 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <main+0x24>

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b094      	sub	sp, #80	@ 0x50
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	2230      	movs	r2, #48	@ 0x30
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f006 fef3 	bl	8007c06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <SystemClock_Config+0xd4>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	4a29      	ldr	r2, [pc, #164]	@ (8000ee0 <SystemClock_Config+0xd4>)
 8000e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e40:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <SystemClock_Config+0xd4>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <SystemClock_Config+0xd8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e58:	4a22      	ldr	r2, [pc, #136]	@ (8000ee4 <SystemClock_Config+0xd8>)
 8000e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <SystemClock_Config+0xd8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e74:	2310      	movs	r3, #16
 8000e76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e80:	2300      	movs	r3, #0
 8000e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e84:	2310      	movs	r3, #16
 8000e86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e88:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e92:	2307      	movs	r3, #7
 8000e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e96:	f107 0320 	add.w	r3, r7, #32
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 ff60 	bl	8001d60 <HAL_RCC_OscConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ea6:	f000 f82e 	bl	8000f06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eaa:	230f      	movs	r3, #15
 8000eac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 f9c2 	bl	8002250 <HAL_RCC_ClockConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ed2:	f000 f818 	bl	8000f06 <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3750      	adds	r7, #80	@ 0x50
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef8:	d101      	bne.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000efa:	f000 fb91 	bl	8001620 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0a:	b672      	cpsid	i
}
 8000f0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0e:	bf00      	nop
 8000f10:	e7fd      	b.n	8000f0e <Error_Handler+0x8>

08000f12 <RingBuffer_Init>:
#include "ring_buffer.h"



void RingBuffer_Init(RingBuffer* rb) {
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
    rb->head = 0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    rb->tail = 0;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <RingBuffer_Put>:

bool RingBuffer_Put(RingBuffer* rb, uint8_t data) {
 8000f36:	b480      	push	{r7}
 8000f38:	b085      	sub	sp, #20
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (rb->head + 1) & (RING_BUFFER_SIZE-1);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f52:	81fb      	strh	r3, [r7, #14]
    if (next == rb->tail) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	89fa      	ldrh	r2, [r7, #14]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d101      	bne.n	8000f66 <RingBuffer_Put+0x30>
        return false;  // buffer full
 8000f62:	2300      	movs	r3, #0
 8000f64:	e00c      	b.n	8000f80 <RingBuffer_Put+0x4a>
    }
    rb->buffer[rb->head] = data;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4619      	mov	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	78fa      	ldrb	r2, [r7, #3]
 8000f74:	545a      	strb	r2, [r3, r1]
    rb->head = next;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	89fa      	ldrh	r2, [r7, #14]
 8000f7a:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    return true;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <RingBuffer_Get>:

bool RingBuffer_Get(RingBuffer* rb, uint8_t* data) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
    if (rb->head == rb->tail) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d101      	bne.n	8000fae <RingBuffer_Get+0x22>
        return false;  // buffer empty
 8000faa:	2300      	movs	r3, #0
 8000fac:	e019      	b.n	8000fe2 <RingBuffer_Get+0x56>
    }
    *data = rb->buffer[rb->tail];
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	5c9a      	ldrb	r2, [r3, r2]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail + 1) % RING_BUFFER_SIZE;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	3301      	adds	r3, #1
 8000fca:	425a      	negs	r2, r3
 8000fcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fd0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000fd4:	bf58      	it	pl
 8000fd6:	4253      	negpl	r3, r2
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    return true;
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001004:	2300      	movs	r3, #0
 8001006:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001008:	4b29      	ldr	r3, [pc, #164]	@ (80010b0 <MX_RTC_Init+0xc0>)
 800100a:	4a2a      	ldr	r2, [pc, #168]	@ (80010b4 <MX_RTC_Init+0xc4>)
 800100c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800100e:	4b28      	ldr	r3, [pc, #160]	@ (80010b0 <MX_RTC_Init+0xc0>)
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001014:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <MX_RTC_Init+0xc0>)
 8001016:	227f      	movs	r2, #127	@ 0x7f
 8001018:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800101a:	4b25      	ldr	r3, [pc, #148]	@ (80010b0 <MX_RTC_Init+0xc0>)
 800101c:	22ff      	movs	r2, #255	@ 0xff
 800101e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001020:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <MX_RTC_Init+0xc0>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001026:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <MX_RTC_Init+0xc0>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800102c:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <MX_RTC_Init+0xc0>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001032:	481f      	ldr	r0, [pc, #124]	@ (80010b0 <MX_RTC_Init+0xc0>)
 8001034:	f001 fc4c 	bl	80028d0 <HAL_RTC_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800103e:	f7ff ff62 	bl	8000f06 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001042:	2300      	movs	r3, #0
 8001044:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001046:	2300      	movs	r3, #0
 8001048:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800104a:	2300      	movs	r3, #0
 800104c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2201      	movs	r2, #1
 800105a:	4619      	mov	r1, r3
 800105c:	4814      	ldr	r0, [pc, #80]	@ (80010b0 <MX_RTC_Init+0xc0>)
 800105e:	f001 fcba 	bl	80029d6 <HAL_RTC_SetTime>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001068:	f7ff ff4d 	bl	8000f06 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800106c:	2301      	movs	r3, #1
 800106e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001070:	2301      	movs	r3, #1
 8001072:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001074:	2301      	movs	r3, #1
 8001076:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001078:	2300      	movs	r3, #0
 800107a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	2201      	movs	r2, #1
 8001080:	4619      	mov	r1, r3
 8001082:	480b      	ldr	r0, [pc, #44]	@ (80010b0 <MX_RTC_Init+0xc0>)
 8001084:	f001 fd41 	bl	8002b0a <HAL_RTC_SetDate>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800108e:	f7ff ff3a 	bl	8000f06 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	4806      	ldr	r0, [pc, #24]	@ (80010b0 <MX_RTC_Init+0xc0>)
 8001098:	f001 fe5c 	bl	8002d54 <HAL_RTCEx_SetWakeUpTimer_IT>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 80010a2:	f7ff ff30 	bl	8000f06 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200001d0 	.word	0x200001d0
 80010b4:	40002800 	.word	0x40002800

080010b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a10      	ldr	r2, [pc, #64]	@ (8001118 <HAL_RTC_MspInit+0x60>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d119      	bne.n	800110e <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010da:	2302      	movs	r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010e2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fb03 	bl	80026f4 <HAL_RCCEx_PeriphCLKConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80010f4:	f7ff ff07 	bl	8000f06 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <HAL_RTC_MspInit+0x64>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2105      	movs	r1, #5
 8001102:	2003      	movs	r0, #3
 8001104:	f000 fb88 	bl	8001818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001108:	2003      	movs	r0, #3
 800110a:	f000 fba1 	bl	8001850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40002800 	.word	0x40002800
 800111c:	42470e3c 	.word	0x42470e3c

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_MspInit+0x54>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	4a11      	ldr	r2, [pc, #68]	@ (8001174 <HAL_MspInit+0x54>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001134:	6453      	str	r3, [r2, #68]	@ 0x44
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <HAL_MspInit+0x54>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <HAL_MspInit+0x54>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <HAL_MspInit+0x54>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001150:	6413      	str	r3, [r2, #64]	@ 0x40
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_MspInit+0x54>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	210f      	movs	r1, #15
 8001162:	f06f 0001 	mvn.w	r0, #1
 8001166:	f000 fb57 	bl	8001818 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	@ 0x38
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	4b34      	ldr	r3, [pc, #208]	@ (8001260 <HAL_InitTick+0xe8>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	4a33      	ldr	r2, [pc, #204]	@ (8001260 <HAL_InitTick+0xe8>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6413      	str	r3, [r2, #64]	@ 0x40
 8001198:	4b31      	ldr	r3, [pc, #196]	@ (8001260 <HAL_InitTick+0xe8>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a4:	f107 0210 	add.w	r2, r7, #16
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fa6e 	bl	8002690 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d103      	bne.n	80011c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011be:	f001 fa3f 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 80011c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80011c4:	e004      	b.n	80011d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011c6:	f001 fa3b 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 80011ca:	4603      	mov	r3, r0
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d2:	4a24      	ldr	r2, [pc, #144]	@ (8001264 <HAL_InitTick+0xec>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	0c9b      	lsrs	r3, r3, #18
 80011da:	3b01      	subs	r3, #1
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80011de:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <HAL_InitTick+0xf0>)
 80011e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011e4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80011e6:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <HAL_InitTick+0xf0>)
 80011e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011ec:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80011ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001268 <HAL_InitTick+0xf0>)
 80011f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <HAL_InitTick+0xf0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <HAL_InitTick+0xf0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001200:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <HAL_InitTick+0xf0>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001206:	4818      	ldr	r0, [pc, #96]	@ (8001268 <HAL_InitTick+0xf0>)
 8001208:	f001 feec 	bl	8002fe4 <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001212:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001216:	2b00      	cmp	r3, #0
 8001218:	d11b      	bne.n	8001252 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800121a:	4813      	ldr	r0, [pc, #76]	@ (8001268 <HAL_InitTick+0xf0>)
 800121c:	f001 ff3c 	bl	8003098 <HAL_TIM_Base_Start_IT>
 8001220:	4603      	mov	r3, r0
 8001222:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001226:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800122a:	2b00      	cmp	r3, #0
 800122c:	d111      	bne.n	8001252 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800122e:	201c      	movs	r0, #28
 8001230:	f000 fb0e 	bl	8001850 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	d808      	bhi.n	800124c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800123a:	2200      	movs	r2, #0
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	201c      	movs	r0, #28
 8001240:	f000 faea 	bl	8001818 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001244:	4a09      	ldr	r2, [pc, #36]	@ (800126c <HAL_InitTick+0xf4>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e002      	b.n	8001252 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001252:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001256:	4618      	mov	r0, r3
 8001258:	3738      	adds	r7, #56	@ 0x38
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	431bde83 	.word	0x431bde83
 8001268:	200001f0 	.word	0x200001f0
 800126c:	20000034 	.word	0x20000034

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <NMI_Handler+0x4>

08001278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <MemManage_Handler+0x4>

08001288 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <UsageFault_Handler+0x4>

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80012ac:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <RTC_WKUP_IRQHandler+0x10>)
 80012ae:	f001 fe6b 	bl	8002f88 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200001d0 	.word	0x200001d0

080012bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <TIM2_IRQHandler+0x10>)
 80012c2:	f001 ff4b 	bl	800315c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200001f0 	.word	0x200001f0

080012d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <USART2_IRQHandler+0x10>)
 80012d6:	f002 f9f9 	bl	80036cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000023c 	.word	0x2000023c

080012e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return 1;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_kill>:

int _kill(int pid, int sig)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012fe:	f006 fd2d 	bl	8007d5c <__errno>
 8001302:	4603      	mov	r3, r0
 8001304:	2216      	movs	r2, #22
 8001306:	601a      	str	r2, [r3, #0]
  return -1;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <_exit>:

void _exit (int status)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ffe7 	bl	80012f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001326:	bf00      	nop
 8001328:	e7fd      	b.n	8001326 <_exit+0x12>

0800132a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	e00a      	b.n	8001352 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800133c:	f3af 8000 	nop.w
 8001340:	4601      	mov	r1, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	60ba      	str	r2, [r7, #8]
 8001348:	b2ca      	uxtb	r2, r1
 800134a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	429a      	cmp	r2, r3
 8001358:	dbf0      	blt.n	800133c <_read+0x12>
  }

  return len;
 800135a:	687b      	ldr	r3, [r7, #4]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e009      	b.n	800138a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	60ba      	str	r2, [r7, #8]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	dbf1      	blt.n	8001376 <_write+0x12>
  }
  return len;
 8001392:	687b      	ldr	r3, [r7, #4]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_close>:

int _close(int file)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013c4:	605a      	str	r2, [r3, #4]
  return 0;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_isatty>:

int _isatty(int file)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013dc:	2301      	movs	r3, #1
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800140c:	4a14      	ldr	r2, [pc, #80]	@ (8001460 <_sbrk+0x5c>)
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <_sbrk+0x60>)
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <_sbrk+0x64>)
 8001422:	4a12      	ldr	r2, [pc, #72]	@ (800146c <_sbrk+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	429a      	cmp	r2, r3
 8001432:	d207      	bcs.n	8001444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001434:	f006 fc92 	bl	8007d5c <__errno>
 8001438:	4603      	mov	r3, r0
 800143a:	220c      	movs	r2, #12
 800143c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	e009      	b.n	8001458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144a:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	4a05      	ldr	r2, [pc, #20]	@ (8001468 <_sbrk+0x64>)
 8001454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001456:	68fb      	ldr	r3, [r7, #12]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20018000 	.word	0x20018000
 8001464:	00000400 	.word	0x00000400
 8001468:	20000238 	.word	0x20000238
 800146c:	20004d28 	.word	0x20004d28

08001470 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <SystemInit+0x20>)
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <SystemInit+0x20>)
 800147c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 800149a:	4a12      	ldr	r2, [pc, #72]	@ (80014e4 <MX_USART2_UART_Init+0x50>)
 800149c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014cc:	f001 fffe 	bl	80034cc <HAL_UART_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014d6:	f7ff fd16 	bl	8000f06 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000023c 	.word	0x2000023c
 80014e4:	40004400 	.word	0x40004400

080014e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a1d      	ldr	r2, [pc, #116]	@ (800157c <HAL_UART_MspInit+0x94>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d133      	bne.n	8001572 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <HAL_UART_MspInit+0x98>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a1b      	ldr	r2, [pc, #108]	@ (8001580 <HAL_UART_MspInit+0x98>)
 8001514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <HAL_UART_MspInit+0x98>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <HAL_UART_MspInit+0x98>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <HAL_UART_MspInit+0x98>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_UART_MspInit+0x98>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001542:	230c      	movs	r3, #12
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001552:	2307      	movs	r3, #7
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4809      	ldr	r0, [pc, #36]	@ (8001584 <HAL_UART_MspInit+0x9c>)
 800155e:	f000 fa17 	bl	8001990 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2105      	movs	r1, #5
 8001566:	2026      	movs	r0, #38	@ 0x26
 8001568:	f000 f956 	bl	8001818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800156c:	2026      	movs	r0, #38	@ 0x26
 800156e:	f000 f96f 	bl	8001850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	@ 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40004400 	.word	0x40004400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000

08001588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001588:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800158c:	f7ff ff70 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001590:	480c      	ldr	r0, [pc, #48]	@ (80015c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001592:	490d      	ldr	r1, [pc, #52]	@ (80015c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001594:	4a0d      	ldr	r2, [pc, #52]	@ (80015cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	@ (80015d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a8:	4c0a      	ldr	r4, [pc, #40]	@ (80015d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80015b6:	f006 fbd7 	bl	8007d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ba:	f7ff fc13 	bl	8000de4 <main>
  bx  lr    
 80015be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80015cc:	08009208 	.word	0x08009208
  ldr r2, =_sbss
 80015d0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80015d4:	20004d24 	.word	0x20004d24

080015d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC_IRQHandler>
	...

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e0:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <HAL_Init+0x40>)
 80015e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <HAL_Init+0x40>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <HAL_Init+0x40>)
 80015f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <HAL_Init+0x40>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a07      	ldr	r2, [pc, #28]	@ (800161c <HAL_Init+0x40>)
 80015fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001604:	2003      	movs	r0, #3
 8001606:	f000 f8fc 	bl	8001802 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160a:	200f      	movs	r0, #15
 800160c:	f7ff fdb4 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001610:	f7ff fd86 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023c00 	.word	0x40023c00

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000038 	.word	0x20000038
 8001644:	20000284 	.word	0x20000284

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	@ (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000284 	.word	0x20000284

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ffee 	bl	8001648 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_Delay+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffde 	bl	8001648 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000038 	.word	0x20000038

080016a8 <__NVIC_SetPriorityGrouping>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4907      	ldr	r1, [pc, #28]	@ (8001744 <__NVIC_EnableIRQ+0x38>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	@ (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	@ (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	@ 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ff4c 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800182a:	f7ff ff61 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 800182e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	68b9      	ldr	r1, [r7, #8]
 8001834:	6978      	ldr	r0, [r7, #20]
 8001836:	f7ff ffb1 	bl	800179c <NVIC_EncodePriority>
 800183a:	4602      	mov	r2, r0
 800183c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff80 	bl	8001748 <__NVIC_SetPriority>
}
 8001848:	bf00      	nop
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff54 	bl	800170c <__NVIC_EnableIRQ>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001878:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800187a:	f7ff fee5 	bl	8001648 <HAL_GetTick>
 800187e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d008      	beq.n	800189e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2280      	movs	r2, #128	@ 0x80
 8001890:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e052      	b.n	8001944 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0216 	bic.w	r2, r2, #22
 80018ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695a      	ldr	r2, [r3, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d103      	bne.n	80018ce <HAL_DMA_Abort+0x62>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0208 	bic.w	r2, r2, #8
 80018dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ee:	e013      	b.n	8001918 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018f0:	f7ff feaa 	bl	8001648 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d90c      	bls.n	8001918 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2220      	movs	r2, #32
 8001902:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2203      	movs	r2, #3
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e015      	b.n	8001944 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1e4      	bne.n	80018f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800192a:	223f      	movs	r2, #63	@ 0x3f
 800192c:	409a      	lsls	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d004      	beq.n	800196a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2280      	movs	r2, #128	@ 0x80
 8001964:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e00c      	b.n	8001984 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2205      	movs	r2, #5
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0201 	bic.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	@ 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e159      	b.n	8001c60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ac:	2201      	movs	r2, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	f040 8148 	bne.w	8001c5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d005      	beq.n	80019e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d130      	bne.n	8001a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a18:	2201      	movs	r2, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 0201 	and.w	r2, r3, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d017      	beq.n	8001a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d123      	bne.n	8001ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	08da      	lsrs	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3208      	adds	r2, #8
 8001a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3208      	adds	r2, #8
 8001ace:	69b9      	ldr	r1, [r7, #24]
 8001ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0203 	and.w	r2, r3, #3
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80a2 	beq.w	8001c5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b57      	ldr	r3, [pc, #348]	@ (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	4a56      	ldr	r2, [pc, #344]	@ (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b26:	4b54      	ldr	r3, [pc, #336]	@ (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b32:	4a52      	ldr	r2, [pc, #328]	@ (8001c7c <HAL_GPIO_Init+0x2ec>)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a49      	ldr	r2, [pc, #292]	@ (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0x202>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a48      	ldr	r2, [pc, #288]	@ (8001c84 <HAL_GPIO_Init+0x2f4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x1fe>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a47      	ldr	r2, [pc, #284]	@ (8001c88 <HAL_GPIO_Init+0x2f8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x1fa>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a46      	ldr	r2, [pc, #280]	@ (8001c8c <HAL_GPIO_Init+0x2fc>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x1f6>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a45      	ldr	r2, [pc, #276]	@ (8001c90 <HAL_GPIO_Init+0x300>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x1f2>
 8001b7e:	2304      	movs	r3, #4
 8001b80:	e008      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b82:	2307      	movs	r3, #7
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e004      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b92:	2300      	movs	r3, #0
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f002 0203 	and.w	r2, r2, #3
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	4093      	lsls	r3, r2
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba4:	4935      	ldr	r1, [pc, #212]	@ (8001c7c <HAL_GPIO_Init+0x2ec>)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb2:	4b38      	ldr	r3, [pc, #224]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c00:	4a24      	ldr	r2, [pc, #144]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c06:	4b23      	ldr	r3, [pc, #140]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c30:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c54:	4a0f      	ldr	r2, [pc, #60]	@ (8001c94 <HAL_GPIO_Init+0x304>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b0f      	cmp	r3, #15
 8001c64:	f67f aea2 	bls.w	80019ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3724      	adds	r7, #36	@ 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40020400 	.word	0x40020400
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40013c00 	.word	0x40013c00

08001c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca8:	787b      	ldrb	r3, [r7, #1]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cb4:	e003      	b.n	8001cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	041a      	lsls	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	619a      	str	r2, [r3, #24]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b085      	sub	sp, #20
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cdc:	887a      	ldrh	r2, [r7, #2]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	041a      	lsls	r2, r3, #16
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	400b      	ands	r3, r1
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	619a      	str	r2, [r3, #24]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8001d0c:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_PWR_EnterSTOPMode+0x58>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 0203 	bic.w	r2, r3, #3
 8001d14:	4910      	ldr	r1, [pc, #64]	@ (8001d58 <HAL_PWR_EnterSTOPMode+0x58>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <HAL_PWR_EnterSTOPMode+0x5c>)
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	4a0e      	ldr	r2, [pc, #56]	@ (8001d5c <HAL_PWR_EnterSTOPMode+0x5c>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8001d2e:	bf30      	wfi
 8001d30:	e005      	b.n	8001d3e <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d001      	beq.n	8001d3c <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 8001d38:	bf40      	sev
      __WFE();
 8001d3a:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 8001d3c:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <HAL_PWR_EnterSTOPMode+0x5c>)
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	4a06      	ldr	r2, [pc, #24]	@ (8001d5c <HAL_PWR_EnterSTOPMode+0x5c>)
 8001d44:	f023 0304 	bic.w	r3, r3, #4
 8001d48:	6113      	str	r3, [r2, #16]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e267      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d075      	beq.n	8001e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d7e:	4b88      	ldr	r3, [pc, #544]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d00c      	beq.n	8001da4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8a:	4b85      	ldr	r3, [pc, #532]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d112      	bne.n	8001dbc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d96:	4b82      	ldr	r3, [pc, #520]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001da2:	d10b      	bne.n	8001dbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	4b7e      	ldr	r3, [pc, #504]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d05b      	beq.n	8001e68 <HAL_RCC_OscConfig+0x108>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d157      	bne.n	8001e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e242      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc4:	d106      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x74>
 8001dc6:	4b76      	ldr	r3, [pc, #472]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a75      	ldr	r2, [pc, #468]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e01d      	b.n	8001e10 <HAL_RCC_OscConfig+0xb0>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x98>
 8001dde:	4b70      	ldr	r3, [pc, #448]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a6f      	ldr	r2, [pc, #444]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b6d      	ldr	r3, [pc, #436]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a6c      	ldr	r2, [pc, #432]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0xb0>
 8001df8:	4b69      	ldr	r3, [pc, #420]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a68      	ldr	r2, [pc, #416]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b66      	ldr	r3, [pc, #408]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a65      	ldr	r2, [pc, #404]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fc16 	bl	8001648 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff fc12 	bl	8001648 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	@ 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e207      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	4b5b      	ldr	r3, [pc, #364]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0xc0>
 8001e3e:	e014      	b.n	8001e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fc02 	bl	8001648 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff fbfe 	bl	8001648 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	@ 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e1f3      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	4b51      	ldr	r3, [pc, #324]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0xe8>
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d063      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e76:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e82:	4b47      	ldr	r3, [pc, #284]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d11c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e8e:	4b44      	ldr	r3, [pc, #272]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d116      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	4b41      	ldr	r3, [pc, #260]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x152>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e1c7      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4937      	ldr	r1, [pc, #220]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	e03a      	b.n	8001f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d020      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed0:	4b34      	ldr	r3, [pc, #208]	@ (8001fa4 <HAL_RCC_OscConfig+0x244>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fbb7 	bl	8001648 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ede:	f7ff fbb3 	bl	8001648 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e1a8      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efc:	4b28      	ldr	r3, [pc, #160]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4925      	ldr	r1, [pc, #148]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
 8001f10:	e015      	b.n	8001f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f12:	4b24      	ldr	r3, [pc, #144]	@ (8001fa4 <HAL_RCC_OscConfig+0x244>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff fb96 	bl	8001648 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f20:	f7ff fb92 	bl	8001648 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e187      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d036      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d016      	beq.n	8001f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f52:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <HAL_RCC_OscConfig+0x248>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7ff fb76 	bl	8001648 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f60:	f7ff fb72 	bl	8001648 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e167      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f72:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <HAL_RCC_OscConfig+0x240>)
 8001f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0x200>
 8001f7e:	e01b      	b.n	8001fb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f80:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <HAL_RCC_OscConfig+0x248>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fb5f 	bl	8001648 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8c:	e00e      	b.n	8001fac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8e:	f7ff fb5b 	bl	8001648 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d907      	bls.n	8001fac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e150      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	42470000 	.word	0x42470000
 8001fa8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fac:	4b88      	ldr	r3, [pc, #544]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8001fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1ea      	bne.n	8001f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 8097 	beq.w	80020f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fca:	4b81      	ldr	r3, [pc, #516]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10f      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	4b7d      	ldr	r3, [pc, #500]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	4a7c      	ldr	r2, [pc, #496]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff6:	4b77      	ldr	r3, [pc, #476]	@ (80021d4 <HAL_RCC_OscConfig+0x474>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d118      	bne.n	8002034 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002002:	4b74      	ldr	r3, [pc, #464]	@ (80021d4 <HAL_RCC_OscConfig+0x474>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a73      	ldr	r2, [pc, #460]	@ (80021d4 <HAL_RCC_OscConfig+0x474>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800200c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200e:	f7ff fb1b 	bl	8001648 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002016:	f7ff fb17 	bl	8001648 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e10c      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002028:	4b6a      	ldr	r3, [pc, #424]	@ (80021d4 <HAL_RCC_OscConfig+0x474>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x2ea>
 800203c:	4b64      	ldr	r3, [pc, #400]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002040:	4a63      	ldr	r2, [pc, #396]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6713      	str	r3, [r2, #112]	@ 0x70
 8002048:	e01c      	b.n	8002084 <HAL_RCC_OscConfig+0x324>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b05      	cmp	r3, #5
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x30c>
 8002052:	4b5f      	ldr	r3, [pc, #380]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002056:	4a5e      	ldr	r2, [pc, #376]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6713      	str	r3, [r2, #112]	@ 0x70
 800205e:	4b5c      	ldr	r3, [pc, #368]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002062:	4a5b      	ldr	r2, [pc, #364]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6713      	str	r3, [r2, #112]	@ 0x70
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0x324>
 800206c:	4b58      	ldr	r3, [pc, #352]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 800206e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002070:	4a57      	ldr	r2, [pc, #348]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8002072:	f023 0301 	bic.w	r3, r3, #1
 8002076:	6713      	str	r3, [r2, #112]	@ 0x70
 8002078:	4b55      	ldr	r3, [pc, #340]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207c:	4a54      	ldr	r2, [pc, #336]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 800207e:	f023 0304 	bic.w	r3, r3, #4
 8002082:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d015      	beq.n	80020b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208c:	f7ff fadc 	bl	8001648 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002092:	e00a      	b.n	80020aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002094:	f7ff fad8 	bl	8001648 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e0cb      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020aa:	4b49      	ldr	r3, [pc, #292]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ee      	beq.n	8002094 <HAL_RCC_OscConfig+0x334>
 80020b6:	e014      	b.n	80020e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b8:	f7ff fac6 	bl	8001648 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f7ff fac2 	bl	8001648 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e0b5      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d6:	4b3e      	ldr	r3, [pc, #248]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1ee      	bne.n	80020c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020e2:	7dfb      	ldrb	r3, [r7, #23]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d105      	bne.n	80020f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e8:	4b39      	ldr	r3, [pc, #228]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ec:	4a38      	ldr	r2, [pc, #224]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 80020ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80a1 	beq.w	8002240 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020fe:	4b34      	ldr	r3, [pc, #208]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b08      	cmp	r3, #8
 8002108:	d05c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d141      	bne.n	8002196 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <HAL_RCC_OscConfig+0x478>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fa96 	bl	8001648 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff fa92 	bl	8001648 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e087      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002132:	4b27      	ldr	r3, [pc, #156]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214c:	019b      	lsls	r3, r3, #6
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002154:	085b      	lsrs	r3, r3, #1
 8002156:	3b01      	subs	r3, #1
 8002158:	041b      	lsls	r3, r3, #16
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002160:	061b      	lsls	r3, r3, #24
 8002162:	491b      	ldr	r1, [pc, #108]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002168:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <HAL_RCC_OscConfig+0x478>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7ff fa6b 	bl	8001648 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002176:	f7ff fa67 	bl	8001648 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e05c      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x416>
 8002194:	e054      	b.n	8002240 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <HAL_RCC_OscConfig+0x478>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7ff fa54 	bl	8001648 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7ff fa50 	bl	8001648 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e045      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <HAL_RCC_OscConfig+0x470>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x444>
 80021c2:	e03d      	b.n	8002240 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e038      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40007000 	.word	0x40007000
 80021d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021dc:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <HAL_RCC_OscConfig+0x4ec>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d028      	beq.n	800223c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d121      	bne.n	800223c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d11a      	bne.n	800223c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800220c:	4013      	ands	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002212:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002214:	4293      	cmp	r3, r2
 8002216:	d111      	bne.n	800223c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	3b01      	subs	r3, #1
 8002226:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d107      	bne.n	800223c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002236:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800

08002250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0cc      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002264:	4b68      	ldr	r3, [pc, #416]	@ (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d90c      	bls.n	800228c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b65      	ldr	r3, [pc, #404]	@ (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b63      	ldr	r3, [pc, #396]	@ (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0b8      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a4:	4b59      	ldr	r3, [pc, #356]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4a58      	ldr	r2, [pc, #352]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022bc:	4b53      	ldr	r3, [pc, #332]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	4a52      	ldr	r2, [pc, #328]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c8:	4b50      	ldr	r3, [pc, #320]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	494d      	ldr	r1, [pc, #308]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d044      	beq.n	8002370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b47      	ldr	r3, [pc, #284]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d119      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e07f      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d003      	beq.n	800230e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800230a:	2b03      	cmp	r3, #3
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230e:	4b3f      	ldr	r3, [pc, #252]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e06f      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	4b3b      	ldr	r3, [pc, #236]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e067      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232e:	4b37      	ldr	r3, [pc, #220]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f023 0203 	bic.w	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4934      	ldr	r1, [pc, #208]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002340:	f7ff f982 	bl	8001648 <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	e00a      	b.n	800235e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002348:	f7ff f97e 	bl	8001648 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e04f      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	4b2b      	ldr	r3, [pc, #172]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 020c 	and.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d1eb      	bne.n	8002348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002370:	4b25      	ldr	r3, [pc, #148]	@ (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d20c      	bcs.n	8002398 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b22      	ldr	r3, [pc, #136]	@ (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b20      	ldr	r3, [pc, #128]	@ (8002408 <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e032      	b.n	80023fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a4:	4b19      	ldr	r3, [pc, #100]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4916      	ldr	r1, [pc, #88]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023c2:	4b12      	ldr	r3, [pc, #72]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	490e      	ldr	r1, [pc, #56]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023d6:	f000 f821 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80023da:	4602      	mov	r2, r0
 80023dc:	4b0b      	ldr	r3, [pc, #44]	@ (800240c <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	490a      	ldr	r1, [pc, #40]	@ (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	5ccb      	ldrb	r3, [r1, r3]
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
 80023ee:	4a09      	ldr	r2, [pc, #36]	@ (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023f2:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe febe 	bl	8001178 <HAL_InitTick>

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023c00 	.word	0x40023c00
 800240c:	40023800 	.word	0x40023800
 8002410:	08008ffc 	.word	0x08008ffc
 8002414:	20000030 	.word	0x20000030
 8002418:	20000034 	.word	0x20000034

0800241c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002420:	b094      	sub	sp, #80	@ 0x50
 8002422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002434:	4b79      	ldr	r3, [pc, #484]	@ (800261c <HAL_RCC_GetSysClockFreq+0x200>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b08      	cmp	r3, #8
 800243e:	d00d      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x40>
 8002440:	2b08      	cmp	r3, #8
 8002442:	f200 80e1 	bhi.w	8002608 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x34>
 800244a:	2b04      	cmp	r3, #4
 800244c:	d003      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x3a>
 800244e:	e0db      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002450:	4b73      	ldr	r3, [pc, #460]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x204>)
 8002452:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002454:	e0db      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002456:	4b73      	ldr	r3, [pc, #460]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x208>)
 8002458:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800245a:	e0d8      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800245c:	4b6f      	ldr	r3, [pc, #444]	@ (800261c <HAL_RCC_GetSysClockFreq+0x200>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002464:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002466:	4b6d      	ldr	r3, [pc, #436]	@ (800261c <HAL_RCC_GetSysClockFreq+0x200>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d063      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002472:	4b6a      	ldr	r3, [pc, #424]	@ (800261c <HAL_RCC_GetSysClockFreq+0x200>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	099b      	lsrs	r3, r3, #6
 8002478:	2200      	movs	r2, #0
 800247a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800247c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800247e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002484:	633b      	str	r3, [r7, #48]	@ 0x30
 8002486:	2300      	movs	r3, #0
 8002488:	637b      	str	r3, [r7, #52]	@ 0x34
 800248a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800248e:	4622      	mov	r2, r4
 8002490:	462b      	mov	r3, r5
 8002492:	f04f 0000 	mov.w	r0, #0
 8002496:	f04f 0100 	mov.w	r1, #0
 800249a:	0159      	lsls	r1, r3, #5
 800249c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a0:	0150      	lsls	r0, r2, #5
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4621      	mov	r1, r4
 80024a8:	1a51      	subs	r1, r2, r1
 80024aa:	6139      	str	r1, [r7, #16]
 80024ac:	4629      	mov	r1, r5
 80024ae:	eb63 0301 	sbc.w	r3, r3, r1
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024c0:	4659      	mov	r1, fp
 80024c2:	018b      	lsls	r3, r1, #6
 80024c4:	4651      	mov	r1, sl
 80024c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ca:	4651      	mov	r1, sl
 80024cc:	018a      	lsls	r2, r1, #6
 80024ce:	4651      	mov	r1, sl
 80024d0:	ebb2 0801 	subs.w	r8, r2, r1
 80024d4:	4659      	mov	r1, fp
 80024d6:	eb63 0901 	sbc.w	r9, r3, r1
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ee:	4690      	mov	r8, r2
 80024f0:	4699      	mov	r9, r3
 80024f2:	4623      	mov	r3, r4
 80024f4:	eb18 0303 	adds.w	r3, r8, r3
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	462b      	mov	r3, r5
 80024fc:	eb49 0303 	adc.w	r3, r9, r3
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800250e:	4629      	mov	r1, r5
 8002510:	024b      	lsls	r3, r1, #9
 8002512:	4621      	mov	r1, r4
 8002514:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002518:	4621      	mov	r1, r4
 800251a:	024a      	lsls	r2, r1, #9
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002522:	2200      	movs	r2, #0
 8002524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002528:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800252c:	f7fd fec0 	bl	80002b0 <__aeabi_uldivmod>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4613      	mov	r3, r2
 8002536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002538:	e058      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253a:	4b38      	ldr	r3, [pc, #224]	@ (800261c <HAL_RCC_GetSysClockFreq+0x200>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	2200      	movs	r2, #0
 8002542:	4618      	mov	r0, r3
 8002544:	4611      	mov	r1, r2
 8002546:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800254a:	623b      	str	r3, [r7, #32]
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002550:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002554:	4642      	mov	r2, r8
 8002556:	464b      	mov	r3, r9
 8002558:	f04f 0000 	mov.w	r0, #0
 800255c:	f04f 0100 	mov.w	r1, #0
 8002560:	0159      	lsls	r1, r3, #5
 8002562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002566:	0150      	lsls	r0, r2, #5
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4641      	mov	r1, r8
 800256e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002572:	4649      	mov	r1, r9
 8002574:	eb63 0b01 	sbc.w	fp, r3, r1
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002584:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002588:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800258c:	ebb2 040a 	subs.w	r4, r2, sl
 8002590:	eb63 050b 	sbc.w	r5, r3, fp
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	00eb      	lsls	r3, r5, #3
 800259e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025a2:	00e2      	lsls	r2, r4, #3
 80025a4:	4614      	mov	r4, r2
 80025a6:	461d      	mov	r5, r3
 80025a8:	4643      	mov	r3, r8
 80025aa:	18e3      	adds	r3, r4, r3
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	464b      	mov	r3, r9
 80025b0:	eb45 0303 	adc.w	r3, r5, r3
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025c2:	4629      	mov	r1, r5
 80025c4:	028b      	lsls	r3, r1, #10
 80025c6:	4621      	mov	r1, r4
 80025c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025cc:	4621      	mov	r1, r4
 80025ce:	028a      	lsls	r2, r1, #10
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025d6:	2200      	movs	r2, #0
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	61fa      	str	r2, [r7, #28]
 80025dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025e0:	f7fd fe66 	bl	80002b0 <__aeabi_uldivmod>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4613      	mov	r3, r2
 80025ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025ec:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <HAL_RCC_GetSysClockFreq+0x200>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	3301      	adds	r3, #1
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80025fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002606:	e002      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002608:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x204>)
 800260a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800260c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002610:	4618      	mov	r0, r3
 8002612:	3750      	adds	r7, #80	@ 0x50
 8002614:	46bd      	mov	sp, r7
 8002616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	00f42400 	.word	0x00f42400
 8002624:	007a1200 	.word	0x007a1200

08002628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800262c:	4b03      	ldr	r3, [pc, #12]	@ (800263c <HAL_RCC_GetHCLKFreq+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000030 	.word	0x20000030

08002640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002644:	f7ff fff0 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0a9b      	lsrs	r3, r3, #10
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4903      	ldr	r1, [pc, #12]	@ (8002664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	0800900c 	.word	0x0800900c

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800266c:	f7ff ffdc 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0b5b      	lsrs	r3, r3, #13
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4903      	ldr	r1, [pc, #12]	@ (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	0800900c 	.word	0x0800900c

08002690 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	220f      	movs	r2, #15
 800269e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026a0:	4b12      	ldr	r3, [pc, #72]	@ (80026ec <HAL_RCC_GetClockConfig+0x5c>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0203 	and.w	r2, r3, #3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026ac:	4b0f      	ldr	r3, [pc, #60]	@ (80026ec <HAL_RCC_GetClockConfig+0x5c>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026b8:	4b0c      	ldr	r3, [pc, #48]	@ (80026ec <HAL_RCC_GetClockConfig+0x5c>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026c4:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <HAL_RCC_GetClockConfig+0x5c>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	08db      	lsrs	r3, r3, #3
 80026ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026d2:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <HAL_RCC_GetClockConfig+0x60>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0207 	and.w	r2, r3, #7
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	601a      	str	r2, [r3, #0]
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40023c00 	.word	0x40023c00

080026f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d105      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002718:	2b00      	cmp	r3, #0
 800271a:	d035      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800271c:	4b67      	ldr	r3, [pc, #412]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002722:	f7fe ff91 	bl	8001648 <HAL_GetTick>
 8002726:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002728:	e008      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800272a:	f7fe ff8d 	bl	8001648 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0ba      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800273c:	4b60      	ldr	r3, [pc, #384]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	019a      	lsls	r2, r3, #6
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	071b      	lsls	r3, r3, #28
 8002754:	495a      	ldr	r1, [pc, #360]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800275c:	4b57      	ldr	r3, [pc, #348]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002762:	f7fe ff71 	bl	8001648 <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800276a:	f7fe ff6d 	bl	8001648 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e09a      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800277c:	4b50      	ldr	r3, [pc, #320]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 8083 	beq.w	800289c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	4a48      	ldr	r2, [pc, #288]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a6:	4b46      	ldr	r3, [pc, #280]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027b2:	4b44      	ldr	r3, [pc, #272]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a43      	ldr	r2, [pc, #268]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027be:	f7fe ff43 	bl	8001648 <HAL_GetTick>
 80027c2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c6:	f7fe ff3f 	bl	8001648 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e06c      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80027d8:	4b3a      	ldr	r3, [pc, #232]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027e4:	4b36      	ldr	r3, [pc, #216]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ec:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d02f      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d028      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002802:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800280a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800280c:	4b2e      	ldr	r3, [pc, #184]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800280e:	2201      	movs	r2, #1
 8002810:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002812:	4b2d      	ldr	r3, [pc, #180]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002818:	4a29      	ldr	r2, [pc, #164]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800281e:	4b28      	ldr	r3, [pc, #160]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d114      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800282a:	f7fe ff0d 	bl	8001648 <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	e00a      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7fe ff09 	bl	8001648 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e034      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002848:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ee      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800285c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002860:	d10d      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002862:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002876:	4912      	ldr	r1, [pc, #72]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]
 800287c:	e005      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	4a0f      	ldr	r2, [pc, #60]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002884:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002888:	6093      	str	r3, [r2, #8]
 800288a:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800288c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002896:	490a      	ldr	r1, [pc, #40]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002898:	4313      	orrs	r3, r2
 800289a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7c1a      	ldrb	r2, [r3, #16]
 80028ac:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028ae:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	42470068 	.word	0x42470068
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40007000 	.word	0x40007000
 80028c8:	42470e40 	.word	0x42470e40
 80028cc:	424711e0 	.word	0x424711e0

080028d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e073      	b.n	80029ce <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7f5b      	ldrb	r3, [r3, #29]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe fbde 	bl	80010b8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b10      	cmp	r3, #16
 800290e:	d055      	beq.n	80029bc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	22ca      	movs	r2, #202	@ 0xca
 8002916:	625a      	str	r2, [r3, #36]	@ 0x24
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2253      	movs	r2, #83	@ 0x53
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f99d 	bl	8002c60 <RTC_EnterInitMode>
 8002926:	4603      	mov	r3, r0
 8002928:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d12c      	bne.n	800298a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800293e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002942:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6899      	ldr	r1, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68d2      	ldr	r2, [r2, #12]
 800296a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6919      	ldr	r1, [r3, #16]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	041a      	lsls	r2, r3, #16
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f9a4 	bl	8002cce <RTC_ExitInitMode>
 8002986:	4603      	mov	r3, r0
 8002988:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d110      	bne.n	80029b2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	22ff      	movs	r2, #255	@ 0xff
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80029ba:	e001      	b.n	80029c0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80029d6:	b590      	push	{r4, r7, lr}
 80029d8:	b087      	sub	sp, #28
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	7f1b      	ldrb	r3, [r3, #28]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_RTC_SetTime+0x1c>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e087      	b.n	8002b02 <HAL_RTC_SetTime+0x12c>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2202      	movs	r2, #2
 80029fc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d126      	bne.n	8002a52 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d102      	bne.n	8002a18 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2200      	movs	r2, #0
 8002a16:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f97b 	bl	8002d18 <RTC_ByteToBcd2>
 8002a22:	4603      	mov	r3, r0
 8002a24:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	785b      	ldrb	r3, [r3, #1]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f974 	bl	8002d18 <RTC_ByteToBcd2>
 8002a30:	4603      	mov	r3, r0
 8002a32:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002a34:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	789b      	ldrb	r3, [r3, #2]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f96c 	bl	8002d18 <RTC_ByteToBcd2>
 8002a40:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a42:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	78db      	ldrb	r3, [r3, #3]
 8002a4a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	e018      	b.n	8002a84 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2200      	movs	r2, #0
 8002a64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	785b      	ldrb	r3, [r3, #1]
 8002a70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002a72:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002a78:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	78db      	ldrb	r3, [r3, #3]
 8002a7e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	22ca      	movs	r2, #202	@ 0xca
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2253      	movs	r2, #83	@ 0x53
 8002a92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f8e3 	bl	8002c60 <RTC_EnterInitMode>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002a9e:	7cfb      	ldrb	r3, [r7, #19]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d120      	bne.n	8002ae6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002aae:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002ab2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ac2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f8f6 	bl	8002cce <RTC_ExitInitMode>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2201      	movs	r2, #1
 8002af0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	22ff      	movs	r2, #255	@ 0xff
 8002af8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]

  return status;
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd90      	pop	{r4, r7, pc}

08002b0a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b0a:	b590      	push	{r4, r7, lr}
 8002b0c:	b087      	sub	sp, #28
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	7f1b      	ldrb	r3, [r3, #28]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_RTC_SetDate+0x1c>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e071      	b.n	8002c0a <HAL_RTC_SetDate+0x100>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10e      	bne.n	8002b56 <HAL_RTC_SetDate+0x4c>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	785b      	ldrb	r3, [r3, #1]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	785b      	ldrb	r3, [r3, #1]
 8002b48:	f023 0310 	bic.w	r3, r3, #16
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	330a      	adds	r3, #10
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d11c      	bne.n	8002b96 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	78db      	ldrb	r3, [r3, #3]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 f8d9 	bl	8002d18 <RTC_ByteToBcd2>
 8002b66:	4603      	mov	r3, r0
 8002b68:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	785b      	ldrb	r3, [r3, #1]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f8d2 	bl	8002d18 <RTC_ByteToBcd2>
 8002b74:	4603      	mov	r3, r0
 8002b76:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b78:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	789b      	ldrb	r3, [r3, #2]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f8ca 	bl	8002d18 <RTC_ByteToBcd2>
 8002b84:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002b86:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	e00e      	b.n	8002bb4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	78db      	ldrb	r3, [r3, #3]
 8002b9a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	785b      	ldrb	r3, [r3, #1]
 8002ba0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ba2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002ba8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	22ca      	movs	r2, #202	@ 0xca
 8002bba:	625a      	str	r2, [r3, #36]	@ 0x24
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2253      	movs	r2, #83	@ 0x53
 8002bc2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f84b 	bl	8002c60 <RTC_EnterInitMode>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002bce:	7cfb      	ldrb	r3, [r7, #19]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10c      	bne.n	8002bee <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002bde:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002be2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f872 	bl	8002cce <RTC_ExitInitMode>
 8002bea:	4603      	mov	r3, r0
 8002bec:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	22ff      	movs	r2, #255	@ 0xff
 8002c00:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]

  return status;
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd90      	pop	{r4, r7, pc}
	...

08002c14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0d      	ldr	r2, [pc, #52]	@ (8002c5c <HAL_RTC_WaitForSynchro+0x48>)
 8002c26:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c28:	f7fe fd0e 	bl	8001648 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c2e:	e009      	b.n	8002c44 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c30:	f7fe fd0a 	bl	8001648 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c3e:	d901      	bls.n	8002c44 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e007      	b.n	8002c54 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0ee      	beq.n	8002c30 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	00013f5f 	.word	0x00013f5f

08002c60 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d122      	bne.n	8002cc4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c8c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c8e:	f7fe fcdb 	bl	8001648 <HAL_GetTick>
 8002c92:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c94:	e00c      	b.n	8002cb0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c96:	f7fe fcd7 	bl	8001648 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ca4:	d904      	bls.n	8002cb0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2204      	movs	r2, #4
 8002caa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <RTC_EnterInitMode+0x64>
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d1e8      	bne.n	8002c96 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ce8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff8b 	bl	8002c14 <HAL_RTC_WaitForSynchro>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2204      	movs	r2, #4
 8002d08:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002d26:	e005      	b.n	8002d34 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	3b0a      	subs	r3, #10
 8002d32:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	2b09      	cmp	r3, #9
 8002d38:	d8f6      	bhi.n	8002d28 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	b2db      	uxtb	r3, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002d60:	4b5a      	ldr	r3, [pc, #360]	@ (8002ecc <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a5a      	ldr	r2, [pc, #360]	@ (8002ed0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	0adb      	lsrs	r3, r3, #11
 8002d6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	7f1b      	ldrb	r3, [r3, #28]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e09d      	b.n	8002ebe <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	22ca      	movs	r2, #202	@ 0xca
 8002d94:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2253      	movs	r2, #83	@ 0x53
 8002d9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d018      	beq.n	8002dde <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10b      	bne.n	8002dd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	22ff      	movs	r2, #255	@ 0xff
 8002dbe:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e076      	b.n	8002ebe <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e6      	bne.n	8002dac <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dec:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002dfe:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002e00:	4b32      	ldr	r3, [pc, #200]	@ (8002ecc <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a32      	ldr	r2, [pc, #200]	@ (8002ed0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	0adb      	lsrs	r3, r3, #11
 8002e0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e10:	fb02 f303 	mul.w	r3, r2, r3
 8002e14:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10b      	bne.n	8002e3a <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	22ff      	movs	r2, #255	@ 0xff
 8002e28:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e041      	b.n	8002ebe <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0e6      	beq.n	8002e16 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0207 	bic.w	r2, r2, #7
 8002e56:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6899      	ldr	r1, [r3, #8]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002e70:	4b18      	ldr	r3, [pc, #96]	@ (8002ed4 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a17      	ldr	r2, [pc, #92]	@ (8002ed4 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002e76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e7a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002e7c:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a14      	ldr	r2, [pc, #80]	@ (8002ed4 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002e82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e86:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e96:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ea6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	22ff      	movs	r2, #255	@ 0xff
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000030 	.word	0x20000030
 8002ed0:	10624dd3 	.word	0x10624dd3
 8002ed4:	40013c00 	.word	0x40013c00

08002ed8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	7f1b      	ldrb	r3, [r3, #28]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e047      	b.n	8002f80 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	22ca      	movs	r2, #202	@ 0xca
 8002f02:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2253      	movs	r2, #83	@ 0x53
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f1a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f2a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f2c:	f7fe fb8c 	bl	8001648 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002f32:	e013      	b.n	8002f5c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f34:	f7fe fb88 	bl	8001648 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f42:	d90b      	bls.n	8002f5c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	22ff      	movs	r2, #255	@ 0xff
 8002f4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2203      	movs	r2, #3
 8002f50:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e011      	b.n	8002f80 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0e4      	beq.n	8002f34 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	22ff      	movs	r2, #255	@ 0xff
 8002f70:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002f90:	4b0e      	ldr	r3, [pc, #56]	@ (8002fcc <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8002f92:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002f96:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002fb6:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f809 	bl	8002fd0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	775a      	strb	r2, [r3, #29]
}
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40013c00 	.word	0x40013c00

08002fd0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e041      	b.n	800307a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f839 	bl	8003082 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f000 f9b2 	bl	800338c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d001      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e044      	b.n	800313a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003148 <HAL_TIM_Base_Start_IT+0xb0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d018      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x6c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030da:	d013      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x6c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1a      	ldr	r2, [pc, #104]	@ (800314c <HAL_TIM_Base_Start_IT+0xb4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00e      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x6c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a19      	ldr	r2, [pc, #100]	@ (8003150 <HAL_TIM_Base_Start_IT+0xb8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d009      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x6c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a17      	ldr	r2, [pc, #92]	@ (8003154 <HAL_TIM_Base_Start_IT+0xbc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d004      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x6c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a16      	ldr	r2, [pc, #88]	@ (8003158 <HAL_TIM_Base_Start_IT+0xc0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d111      	bne.n	8003128 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b06      	cmp	r3, #6
 8003114:	d010      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003126:	e007      	b.n	8003138 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40010000 	.word	0x40010000
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800
 8003154:	40000c00 	.word	0x40000c00
 8003158:	40014000 	.word	0x40014000

0800315c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d020      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01b      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0202 	mvn.w	r2, #2
 8003190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f8d2 	bl	8003350 <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8c4 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f8d5 	bl	8003364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d020      	beq.n	800320c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01b      	beq.n	800320c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0204 	mvn.w	r2, #4
 80031dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f8ac 	bl	8003350 <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f89e 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f8af 	bl	8003364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d020      	beq.n	8003258 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01b      	beq.n	8003258 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0208 	mvn.w	r2, #8
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2204      	movs	r2, #4
 800322e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f886 	bl	8003350 <HAL_TIM_IC_CaptureCallback>
 8003244:	e005      	b.n	8003252 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f878 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f889 	bl	8003364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d020      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01b      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0210 	mvn.w	r2, #16
 8003274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2208      	movs	r2, #8
 800327a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f860 	bl	8003350 <HAL_TIM_IC_CaptureCallback>
 8003290:	e005      	b.n	800329e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f852 	bl	800333c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f863 	bl	8003364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00c      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0201 	mvn.w	r2, #1
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd fe10 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00c      	beq.n	80032ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f8e6 	bl	80034b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00c      	beq.n	8003310 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f834 	bl	8003378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00c      	beq.n	8003334 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0220 	mvn.w	r2, #32
 800332c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f8b8 	bl	80034a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3a      	ldr	r2, [pc, #232]	@ (8003488 <TIM_Base_SetConfig+0xfc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00f      	beq.n	80033c4 <TIM_Base_SetConfig+0x38>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033aa:	d00b      	beq.n	80033c4 <TIM_Base_SetConfig+0x38>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a37      	ldr	r2, [pc, #220]	@ (800348c <TIM_Base_SetConfig+0x100>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d007      	beq.n	80033c4 <TIM_Base_SetConfig+0x38>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a36      	ldr	r2, [pc, #216]	@ (8003490 <TIM_Base_SetConfig+0x104>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_Base_SetConfig+0x38>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a35      	ldr	r2, [pc, #212]	@ (8003494 <TIM_Base_SetConfig+0x108>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d108      	bne.n	80033d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003488 <TIM_Base_SetConfig+0xfc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d01b      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e4:	d017      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a28      	ldr	r2, [pc, #160]	@ (800348c <TIM_Base_SetConfig+0x100>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a27      	ldr	r2, [pc, #156]	@ (8003490 <TIM_Base_SetConfig+0x104>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00f      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a26      	ldr	r2, [pc, #152]	@ (8003494 <TIM_Base_SetConfig+0x108>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00b      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a25      	ldr	r2, [pc, #148]	@ (8003498 <TIM_Base_SetConfig+0x10c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d007      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a24      	ldr	r2, [pc, #144]	@ (800349c <TIM_Base_SetConfig+0x110>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d003      	beq.n	8003416 <TIM_Base_SetConfig+0x8a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a23      	ldr	r2, [pc, #140]	@ (80034a0 <TIM_Base_SetConfig+0x114>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d108      	bne.n	8003428 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800341c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a0e      	ldr	r2, [pc, #56]	@ (8003488 <TIM_Base_SetConfig+0xfc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d103      	bne.n	800345c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f023 0201 	bic.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	611a      	str	r2, [r3, #16]
  }
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40010000 	.word	0x40010000
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	40000c00 	.word	0x40000c00
 8003498:	40014000 	.word	0x40014000
 800349c:	40014400 	.word	0x40014400
 80034a0:	40014800 	.word	0x40014800

080034a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e042      	b.n	8003564 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fd fff8 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2224      	movs	r2, #36	@ 0x24
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800350e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fdbd 	bl	8004090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	@ 0x28
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b20      	cmp	r3, #32
 800358a:	d175      	bne.n	8003678 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_UART_Transmit+0x2c>
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e06e      	b.n	800367a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2221      	movs	r2, #33	@ 0x21
 80035a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035aa:	f7fe f84d 	bl	8001648 <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	88fa      	ldrh	r2, [r7, #6]
 80035ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c4:	d108      	bne.n	80035d8 <HAL_UART_Transmit+0x6c>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	e003      	b.n	80035e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035e0:	e02e      	b.n	8003640 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2180      	movs	r1, #128	@ 0x80
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fb1f 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e03a      	b.n	800367a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10b      	bne.n	8003622 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003618:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	3302      	adds	r3, #2
 800361e:	61bb      	str	r3, [r7, #24]
 8003620:	e007      	b.n	8003632 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	3301      	adds	r3, #1
 8003630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1cb      	bne.n	80035e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2200      	movs	r2, #0
 8003652:	2140      	movs	r1, #64	@ 0x40
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 faeb 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e006      	b.n	800367a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	e000      	b.n	800367a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003678:	2302      	movs	r3, #2
  }
}
 800367a:	4618      	mov	r0, r3
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	4613      	mov	r3, r2
 800368e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b20      	cmp	r3, #32
 800369a:	d112      	bne.n	80036c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_UART_Receive_IT+0x26>
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e00b      	b.n	80036c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	461a      	mov	r2, r3
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fb12 	bl	8003ce2 <UART_Start_Receive_IT>
 80036be:	4603      	mov	r3, r0
 80036c0:	e000      	b.n	80036c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036c2:	2302      	movs	r3, #2
  }
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b0ba      	sub	sp, #232	@ 0xe8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800370a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10f      	bne.n	8003732 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_UART_IRQHandler+0x66>
 800371e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fbf2 	bl	8003f14 <UART_Receive_IT>
      return;
 8003730:	e25b      	b.n	8003bea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80de 	beq.w	80038f8 <HAL_UART_IRQHandler+0x22c>
 800373c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d106      	bne.n	8003756 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80d1 	beq.w	80038f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <HAL_UART_IRQHandler+0xae>
 8003762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	f043 0201 	orr.w	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800377a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_UART_IRQHandler+0xd2>
 8003786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	f043 0202 	orr.w	r2, r3, #2
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_UART_IRQHandler+0xf6>
 80037aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	f043 0204 	orr.w	r2, r3, #4
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d011      	beq.n	80037f2 <HAL_UART_IRQHandler+0x126>
 80037ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d105      	bne.n	80037e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ea:	f043 0208 	orr.w	r2, r3, #8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 81f2 	beq.w	8003be0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_UART_IRQHandler+0x14e>
 8003808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fb7d 	bl	8003f14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003824:	2b40      	cmp	r3, #64	@ 0x40
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <HAL_UART_IRQHandler+0x17a>
 800383e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003842:	2b00      	cmp	r3, #0
 8003844:	d04f      	beq.n	80038e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fa85 	bl	8003d56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003856:	2b40      	cmp	r3, #64	@ 0x40
 8003858:	d141      	bne.n	80038de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3314      	adds	r3, #20
 8003860:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003870:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003874:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3314      	adds	r3, #20
 8003882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003886:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800388a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800389e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1d9      	bne.n	800385a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d013      	beq.n	80038d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b2:	4a7e      	ldr	r2, [pc, #504]	@ (8003aac <HAL_UART_IRQHandler+0x3e0>)
 80038b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe f846 	bl	800194c <HAL_DMA_Abort_IT>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038d0:	4610      	mov	r0, r2
 80038d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d4:	e00e      	b.n	80038f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f994 	bl	8003c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	e00a      	b.n	80038f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f990 	bl	8003c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e4:	e006      	b.n	80038f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f98c 	bl	8003c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80038f2:	e175      	b.n	8003be0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f4:	bf00      	nop
    return;
 80038f6:	e173      	b.n	8003be0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	f040 814f 	bne.w	8003ba0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8148 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8141 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393e:	2b40      	cmp	r3, #64	@ 0x40
 8003940:	f040 80b6 	bne.w	8003ab0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003950:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8145 	beq.w	8003be4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800395e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003962:	429a      	cmp	r2, r3
 8003964:	f080 813e 	bcs.w	8003be4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800396e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800397a:	f000 8088 	beq.w	8003a8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	330c      	adds	r3, #12
 8003984:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003994:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800399c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1d9      	bne.n	800397e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3314      	adds	r3, #20
 80039d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039d4:	e853 3f00 	ldrex	r3, [r3]
 80039d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3314      	adds	r3, #20
 80039ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e1      	bne.n	80039ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3314      	adds	r3, #20
 8003a0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3314      	adds	r3, #20
 8003a26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e3      	bne.n	8003a06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a5e:	f023 0310 	bic.w	r3, r3, #16
 8003a62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a70:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a72:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e3      	bne.n	8003a4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd feef 	bl	800186c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f8b7 	bl	8003c18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aaa:	e09b      	b.n	8003be4 <HAL_UART_IRQHandler+0x518>
 8003aac:	08003e1d 	.word	0x08003e1d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 808e 	beq.w	8003be8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8089 	beq.w	8003be8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003afa:	647a      	str	r2, [r7, #68]	@ 0x44
 8003afc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e3      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3314      	adds	r3, #20
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b32:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e3      	bne.n	8003b0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	330c      	adds	r3, #12
 8003b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0310 	bic.w	r3, r3, #16
 8003b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	330c      	adds	r3, #12
 8003b74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b78:	61fa      	str	r2, [r7, #28]
 8003b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	69b9      	ldr	r1, [r7, #24]
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	617b      	str	r3, [r7, #20]
   return(result);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e3      	bne.n	8003b54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f83d 	bl	8003c18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b9e:	e023      	b.n	8003be8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x4f4>
 8003bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f943 	bl	8003e44 <UART_Transmit_IT>
    return;
 8003bbe:	e014      	b.n	8003bea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00e      	beq.n	8003bea <HAL_UART_IRQHandler+0x51e>
 8003bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f983 	bl	8003ee4 <UART_EndTransmit_IT>
    return;
 8003bde:	e004      	b.n	8003bea <HAL_UART_IRQHandler+0x51e>
    return;
 8003be0:	bf00      	nop
 8003be2:	e002      	b.n	8003bea <HAL_UART_IRQHandler+0x51e>
      return;
 8003be4:	bf00      	nop
 8003be6:	e000      	b.n	8003bea <HAL_UART_IRQHandler+0x51e>
      return;
 8003be8:	bf00      	nop
  }
}
 8003bea:	37e8      	adds	r7, #232	@ 0xe8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c40:	e03b      	b.n	8003cba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d037      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4a:	f7fd fcfd 	bl	8001648 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	6a3a      	ldr	r2, [r7, #32]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e03a      	b.n	8003cda <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d023      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b80      	cmp	r3, #128	@ 0x80
 8003c76:	d020      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b40      	cmp	r3, #64	@ 0x40
 8003c7c:	d01d      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d116      	bne.n	8003cba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f857 	bl	8003d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2208      	movs	r2, #8
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e00f      	b.n	8003cda <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	bf0c      	ite	eq
 8003cca:	2301      	moveq	r3, #1
 8003ccc:	2300      	movne	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d0b4      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	4613      	mov	r3, r2
 8003cee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	88fa      	ldrh	r2, [r7, #6]
 8003cfa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2222      	movs	r2, #34	@ 0x22
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d26:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0220 	orr.w	r2, r2, #32
 8003d46:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b095      	sub	sp, #84	@ 0x54
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d7e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e5      	bne.n	8003d5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3314      	adds	r3, #20
 8003d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3314      	adds	r3, #20
 8003db0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003db2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003db4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e5      	bne.n	8003d92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d119      	bne.n	8003e02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f023 0310 	bic.w	r3, r3, #16
 8003de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dee:	61ba      	str	r2, [r7, #24]
 8003df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	6979      	ldr	r1, [r7, #20]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e5      	bne.n	8003dce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e10:	bf00      	nop
 8003e12:	3754      	adds	r7, #84	@ 0x54
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7ff fee4 	bl	8003c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e3c:	bf00      	nop
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b21      	cmp	r3, #33	@ 0x21
 8003e56:	d13e      	bne.n	8003ed6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e60:	d114      	bne.n	8003e8c <UART_Transmit_IT+0x48>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d110      	bne.n	8003e8c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	1c9a      	adds	r2, r3, #2
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	621a      	str	r2, [r3, #32]
 8003e8a:	e008      	b.n	8003e9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	1c59      	adds	r1, r3, #1
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6211      	str	r1, [r2, #32]
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10f      	bne.n	8003ed2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ec0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ed0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003efa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff fe73 	bl	8003bf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08c      	sub	sp, #48	@ 0x30
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b22      	cmp	r3, #34	@ 0x22
 8003f26:	f040 80ae 	bne.w	8004086 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f32:	d117      	bne.n	8003f64 <UART_Receive_IT+0x50>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d113      	bne.n	8003f64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f44:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5c:	1c9a      	adds	r2, r3, #2
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f62:	e026      	b.n	8003fb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f76:	d007      	beq.n	8003f88 <UART_Receive_IT+0x74>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <UART_Receive_IT+0x82>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f92:	701a      	strb	r2, [r3, #0]
 8003f94:	e008      	b.n	8003fa8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d15d      	bne.n	8004082 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0220 	bic.w	r2, r2, #32
 8003fd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fe4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004008:	2b01      	cmp	r3, #1
 800400a:	d135      	bne.n	8004078 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	613b      	str	r3, [r7, #16]
   return(result);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f023 0310 	bic.w	r3, r3, #16
 8004028:	627b      	str	r3, [r7, #36]	@ 0x24
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004032:	623a      	str	r2, [r7, #32]
 8004034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	69f9      	ldr	r1, [r7, #28]
 8004038:	6a3a      	ldr	r2, [r7, #32]
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e5      	bne.n	8004012 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b10      	cmp	r3, #16
 8004052:	d10a      	bne.n	800406a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800406e:	4619      	mov	r1, r3
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff fdd1 	bl	8003c18 <HAL_UARTEx_RxEventCallback>
 8004076:	e002      	b.n	800407e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7fc fd87 	bl	8000b8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e002      	b.n	8004088 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e000      	b.n	8004088 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004086:	2302      	movs	r3, #2
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	3730      	adds	r7, #48	@ 0x30
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004094:	b0c0      	sub	sp, #256	@ 0x100
 8004096:	af00      	add	r7, sp, #0
 8004098:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ac:	68d9      	ldr	r1, [r3, #12]
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	ea40 0301 	orr.w	r3, r0, r1
 80040b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040e8:	f021 010c 	bic.w	r1, r1, #12
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040f6:	430b      	orrs	r3, r1
 80040f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410a:	6999      	ldr	r1, [r3, #24]
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	ea40 0301 	orr.w	r3, r0, r1
 8004116:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4b8f      	ldr	r3, [pc, #572]	@ (800435c <UART_SetConfig+0x2cc>)
 8004120:	429a      	cmp	r2, r3
 8004122:	d005      	beq.n	8004130 <UART_SetConfig+0xa0>
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b8d      	ldr	r3, [pc, #564]	@ (8004360 <UART_SetConfig+0x2d0>)
 800412c:	429a      	cmp	r2, r3
 800412e:	d104      	bne.n	800413a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004130:	f7fe fa9a 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 8004134:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004138:	e003      	b.n	8004142 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800413a:	f7fe fa81 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 800413e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800414c:	f040 810c 	bne.w	8004368 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004154:	2200      	movs	r2, #0
 8004156:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800415a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800415e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004162:	4622      	mov	r2, r4
 8004164:	462b      	mov	r3, r5
 8004166:	1891      	adds	r1, r2, r2
 8004168:	65b9      	str	r1, [r7, #88]	@ 0x58
 800416a:	415b      	adcs	r3, r3
 800416c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800416e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004172:	4621      	mov	r1, r4
 8004174:	eb12 0801 	adds.w	r8, r2, r1
 8004178:	4629      	mov	r1, r5
 800417a:	eb43 0901 	adc.w	r9, r3, r1
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800418a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800418e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004192:	4690      	mov	r8, r2
 8004194:	4699      	mov	r9, r3
 8004196:	4623      	mov	r3, r4
 8004198:	eb18 0303 	adds.w	r3, r8, r3
 800419c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041a0:	462b      	mov	r3, r5
 80041a2:	eb49 0303 	adc.w	r3, r9, r3
 80041a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041be:	460b      	mov	r3, r1
 80041c0:	18db      	adds	r3, r3, r3
 80041c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80041c4:	4613      	mov	r3, r2
 80041c6:	eb42 0303 	adc.w	r3, r2, r3
 80041ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80041cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041d4:	f7fc f86c 	bl	80002b0 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4b61      	ldr	r3, [pc, #388]	@ (8004364 <UART_SetConfig+0x2d4>)
 80041de:	fba3 2302 	umull	r2, r3, r3, r2
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	011c      	lsls	r4, r3, #4
 80041e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	1891      	adds	r1, r2, r2
 80041fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004200:	415b      	adcs	r3, r3
 8004202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004204:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004208:	4641      	mov	r1, r8
 800420a:	eb12 0a01 	adds.w	sl, r2, r1
 800420e:	4649      	mov	r1, r9
 8004210:	eb43 0b01 	adc.w	fp, r3, r1
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004220:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004228:	4692      	mov	sl, r2
 800422a:	469b      	mov	fp, r3
 800422c:	4643      	mov	r3, r8
 800422e:	eb1a 0303 	adds.w	r3, sl, r3
 8004232:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004236:	464b      	mov	r3, r9
 8004238:	eb4b 0303 	adc.w	r3, fp, r3
 800423c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800424c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004250:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004254:	460b      	mov	r3, r1
 8004256:	18db      	adds	r3, r3, r3
 8004258:	643b      	str	r3, [r7, #64]	@ 0x40
 800425a:	4613      	mov	r3, r2
 800425c:	eb42 0303 	adc.w	r3, r2, r3
 8004260:	647b      	str	r3, [r7, #68]	@ 0x44
 8004262:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800426a:	f7fc f821 	bl	80002b0 <__aeabi_uldivmod>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4611      	mov	r1, r2
 8004274:	4b3b      	ldr	r3, [pc, #236]	@ (8004364 <UART_SetConfig+0x2d4>)
 8004276:	fba3 2301 	umull	r2, r3, r3, r1
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2264      	movs	r2, #100	@ 0x64
 800427e:	fb02 f303 	mul.w	r3, r2, r3
 8004282:	1acb      	subs	r3, r1, r3
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800428a:	4b36      	ldr	r3, [pc, #216]	@ (8004364 <UART_SetConfig+0x2d4>)
 800428c:	fba3 2302 	umull	r2, r3, r3, r2
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004298:	441c      	add	r4, r3
 800429a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042ac:	4642      	mov	r2, r8
 80042ae:	464b      	mov	r3, r9
 80042b0:	1891      	adds	r1, r2, r2
 80042b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042b4:	415b      	adcs	r3, r3
 80042b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042bc:	4641      	mov	r1, r8
 80042be:	1851      	adds	r1, r2, r1
 80042c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80042c2:	4649      	mov	r1, r9
 80042c4:	414b      	adcs	r3, r1
 80042c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042d4:	4659      	mov	r1, fp
 80042d6:	00cb      	lsls	r3, r1, #3
 80042d8:	4651      	mov	r1, sl
 80042da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042de:	4651      	mov	r1, sl
 80042e0:	00ca      	lsls	r2, r1, #3
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	4603      	mov	r3, r0
 80042e8:	4642      	mov	r2, r8
 80042ea:	189b      	adds	r3, r3, r2
 80042ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042f0:	464b      	mov	r3, r9
 80042f2:	460a      	mov	r2, r1
 80042f4:	eb42 0303 	adc.w	r3, r2, r3
 80042f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004308:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800430c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004310:	460b      	mov	r3, r1
 8004312:	18db      	adds	r3, r3, r3
 8004314:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004316:	4613      	mov	r3, r2
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800431e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004322:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004326:	f7fb ffc3 	bl	80002b0 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4b0d      	ldr	r3, [pc, #52]	@ (8004364 <UART_SetConfig+0x2d4>)
 8004330:	fba3 1302 	umull	r1, r3, r3, r2
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	2164      	movs	r1, #100	@ 0x64
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	3332      	adds	r3, #50	@ 0x32
 8004342:	4a08      	ldr	r2, [pc, #32]	@ (8004364 <UART_SetConfig+0x2d4>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	f003 0207 	and.w	r2, r3, #7
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4422      	add	r2, r4
 8004356:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004358:	e106      	b.n	8004568 <UART_SetConfig+0x4d8>
 800435a:	bf00      	nop
 800435c:	40011000 	.word	0x40011000
 8004360:	40011400 	.word	0x40011400
 8004364:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800436c:	2200      	movs	r2, #0
 800436e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004372:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004376:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800437a:	4642      	mov	r2, r8
 800437c:	464b      	mov	r3, r9
 800437e:	1891      	adds	r1, r2, r2
 8004380:	6239      	str	r1, [r7, #32]
 8004382:	415b      	adcs	r3, r3
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
 8004386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800438a:	4641      	mov	r1, r8
 800438c:	1854      	adds	r4, r2, r1
 800438e:	4649      	mov	r1, r9
 8004390:	eb43 0501 	adc.w	r5, r3, r1
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	00eb      	lsls	r3, r5, #3
 800439e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043a2:	00e2      	lsls	r2, r4, #3
 80043a4:	4614      	mov	r4, r2
 80043a6:	461d      	mov	r5, r3
 80043a8:	4643      	mov	r3, r8
 80043aa:	18e3      	adds	r3, r4, r3
 80043ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043b0:	464b      	mov	r3, r9
 80043b2:	eb45 0303 	adc.w	r3, r5, r3
 80043b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043d6:	4629      	mov	r1, r5
 80043d8:	008b      	lsls	r3, r1, #2
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043e0:	4621      	mov	r1, r4
 80043e2:	008a      	lsls	r2, r1, #2
 80043e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043e8:	f7fb ff62 	bl	80002b0 <__aeabi_uldivmod>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4b60      	ldr	r3, [pc, #384]	@ (8004574 <UART_SetConfig+0x4e4>)
 80043f2:	fba3 2302 	umull	r2, r3, r3, r2
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	011c      	lsls	r4, r3, #4
 80043fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004404:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004408:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800440c:	4642      	mov	r2, r8
 800440e:	464b      	mov	r3, r9
 8004410:	1891      	adds	r1, r2, r2
 8004412:	61b9      	str	r1, [r7, #24]
 8004414:	415b      	adcs	r3, r3
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800441c:	4641      	mov	r1, r8
 800441e:	1851      	adds	r1, r2, r1
 8004420:	6139      	str	r1, [r7, #16]
 8004422:	4649      	mov	r1, r9
 8004424:	414b      	adcs	r3, r1
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004434:	4659      	mov	r1, fp
 8004436:	00cb      	lsls	r3, r1, #3
 8004438:	4651      	mov	r1, sl
 800443a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800443e:	4651      	mov	r1, sl
 8004440:	00ca      	lsls	r2, r1, #3
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	4603      	mov	r3, r0
 8004448:	4642      	mov	r2, r8
 800444a:	189b      	adds	r3, r3, r2
 800444c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004450:	464b      	mov	r3, r9
 8004452:	460a      	mov	r2, r1
 8004454:	eb42 0303 	adc.w	r3, r2, r3
 8004458:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004466:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004474:	4649      	mov	r1, r9
 8004476:	008b      	lsls	r3, r1, #2
 8004478:	4641      	mov	r1, r8
 800447a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800447e:	4641      	mov	r1, r8
 8004480:	008a      	lsls	r2, r1, #2
 8004482:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004486:	f7fb ff13 	bl	80002b0 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4611      	mov	r1, r2
 8004490:	4b38      	ldr	r3, [pc, #224]	@ (8004574 <UART_SetConfig+0x4e4>)
 8004492:	fba3 2301 	umull	r2, r3, r3, r1
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2264      	movs	r2, #100	@ 0x64
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	1acb      	subs	r3, r1, r3
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	3332      	adds	r3, #50	@ 0x32
 80044a4:	4a33      	ldr	r2, [pc, #204]	@ (8004574 <UART_SetConfig+0x4e4>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044b0:	441c      	add	r4, r3
 80044b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044b6:	2200      	movs	r2, #0
 80044b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80044ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80044bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	415b      	adcs	r3, r3
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d0:	4641      	mov	r1, r8
 80044d2:	1851      	adds	r1, r2, r1
 80044d4:	6039      	str	r1, [r7, #0]
 80044d6:	4649      	mov	r1, r9
 80044d8:	414b      	adcs	r3, r1
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044e8:	4659      	mov	r1, fp
 80044ea:	00cb      	lsls	r3, r1, #3
 80044ec:	4651      	mov	r1, sl
 80044ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f2:	4651      	mov	r1, sl
 80044f4:	00ca      	lsls	r2, r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	4642      	mov	r2, r8
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004502:	464b      	mov	r3, r9
 8004504:	460a      	mov	r2, r1
 8004506:	eb42 0303 	adc.w	r3, r2, r3
 800450a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	663b      	str	r3, [r7, #96]	@ 0x60
 8004516:	667a      	str	r2, [r7, #100]	@ 0x64
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004524:	4649      	mov	r1, r9
 8004526:	008b      	lsls	r3, r1, #2
 8004528:	4641      	mov	r1, r8
 800452a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800452e:	4641      	mov	r1, r8
 8004530:	008a      	lsls	r2, r1, #2
 8004532:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004536:	f7fb febb 	bl	80002b0 <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4b0d      	ldr	r3, [pc, #52]	@ (8004574 <UART_SetConfig+0x4e4>)
 8004540:	fba3 1302 	umull	r1, r3, r3, r2
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	2164      	movs	r1, #100	@ 0x64
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	3332      	adds	r3, #50	@ 0x32
 8004552:	4a08      	ldr	r2, [pc, #32]	@ (8004574 <UART_SetConfig+0x4e4>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	f003 020f 	and.w	r2, r3, #15
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4422      	add	r2, r4
 8004566:	609a      	str	r2, [r3, #8]
}
 8004568:	bf00      	nop
 800456a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800456e:	46bd      	mov	sp, r7
 8004570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004574:	51eb851f 	.word	0x51eb851f

08004578 <__NVIC_SetPriority>:
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	6039      	str	r1, [r7, #0]
 8004582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004588:	2b00      	cmp	r3, #0
 800458a:	db0a      	blt.n	80045a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	490c      	ldr	r1, [pc, #48]	@ (80045c4 <__NVIC_SetPriority+0x4c>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	0112      	lsls	r2, r2, #4
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	440b      	add	r3, r1
 800459c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80045a0:	e00a      	b.n	80045b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4908      	ldr	r1, [pc, #32]	@ (80045c8 <__NVIC_SetPriority+0x50>)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	3b04      	subs	r3, #4
 80045b0:	0112      	lsls	r2, r2, #4
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	440b      	add	r3, r1
 80045b6:	761a      	strb	r2, [r3, #24]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	e000e100 	.word	0xe000e100
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045d0:	4b05      	ldr	r3, [pc, #20]	@ (80045e8 <SysTick_Handler+0x1c>)
 80045d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045d4:	f002 f896 	bl	8006704 <xTaskGetSchedulerState>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d001      	beq.n	80045e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045de:	f002 fec3 	bl	8007368 <xPortSysTickHandler>
  }
}
 80045e2:	bf00      	nop
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	e000e010 	.word	0xe000e010

080045ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045f0:	2100      	movs	r1, #0
 80045f2:	f06f 0004 	mvn.w	r0, #4
 80045f6:	f7ff ffbf 	bl	8004578 <__NVIC_SetPriority>
#endif
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004606:	f3ef 8305 	mrs	r3, IPSR
 800460a:	603b      	str	r3, [r7, #0]
  return(result);
 800460c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004612:	f06f 0305 	mvn.w	r3, #5
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	e00c      	b.n	8004634 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800461a:	4b0a      	ldr	r3, [pc, #40]	@ (8004644 <osKernelInitialize+0x44>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d105      	bne.n	800462e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004622:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <osKernelInitialize+0x44>)
 8004624:	2201      	movs	r2, #1
 8004626:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004628:	2300      	movs	r3, #0
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	e002      	b.n	8004634 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
 8004632:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004634:	687b      	ldr	r3, [r7, #4]
}
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000288 	.word	0x20000288

08004648 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800464e:	f3ef 8305 	mrs	r3, IPSR
 8004652:	603b      	str	r3, [r7, #0]
  return(result);
 8004654:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <osKernelStart+0x1a>
    stat = osErrorISR;
 800465a:	f06f 0305 	mvn.w	r3, #5
 800465e:	607b      	str	r3, [r7, #4]
 8004660:	e010      	b.n	8004684 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004662:	4b0b      	ldr	r3, [pc, #44]	@ (8004690 <osKernelStart+0x48>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d109      	bne.n	800467e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800466a:	f7ff ffbf 	bl	80045ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800466e:	4b08      	ldr	r3, [pc, #32]	@ (8004690 <osKernelStart+0x48>)
 8004670:	2202      	movs	r2, #2
 8004672:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004674:	f001 fb56 	bl	8005d24 <vTaskStartScheduler>
      stat = osOK;
 8004678:	2300      	movs	r3, #0
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	e002      	b.n	8004684 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800467e:	f04f 33ff 	mov.w	r3, #4294967295
 8004682:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004684:	687b      	ldr	r3, [r7, #4]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000288 	.word	0x20000288

08004694 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004694:	b580      	push	{r7, lr}
 8004696:	b08e      	sub	sp, #56	@ 0x38
 8004698:	af04      	add	r7, sp, #16
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a4:	f3ef 8305 	mrs	r3, IPSR
 80046a8:	617b      	str	r3, [r7, #20]
  return(result);
 80046aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d17e      	bne.n	80047ae <osThreadNew+0x11a>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d07b      	beq.n	80047ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046b6:	2380      	movs	r3, #128	@ 0x80
 80046b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046ba:	2318      	movs	r3, #24
 80046bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d045      	beq.n	800475a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <osThreadNew+0x48>
        name = attr->name;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <osThreadNew+0x6e>
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b38      	cmp	r3, #56	@ 0x38
 80046f4:	d805      	bhi.n	8004702 <osThreadNew+0x6e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <osThreadNew+0x72>
        return (NULL);
 8004702:	2300      	movs	r3, #0
 8004704:	e054      	b.n	80047b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	089b      	lsrs	r3, r3, #2
 8004714:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00e      	beq.n	800473c <osThreadNew+0xa8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	2b5b      	cmp	r3, #91	@ 0x5b
 8004724:	d90a      	bls.n	800473c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800472a:	2b00      	cmp	r3, #0
 800472c:	d006      	beq.n	800473c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <osThreadNew+0xa8>
        mem = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e010      	b.n	800475e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10c      	bne.n	800475e <osThreadNew+0xca>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d108      	bne.n	800475e <osThreadNew+0xca>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <osThreadNew+0xca>
          mem = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	e001      	b.n	800475e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d110      	bne.n	8004786 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800476c:	9202      	str	r2, [sp, #8]
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	6a3a      	ldr	r2, [r7, #32]
 8004778:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f001 f8f6 	bl	800596c <xTaskCreateStatic>
 8004780:	4603      	mov	r3, r0
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	e013      	b.n	80047ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d110      	bne.n	80047ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	b29a      	uxth	r2, r3
 8004790:	f107 0310 	add.w	r3, r7, #16
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f001 f944 	bl	8005a2c <xTaskCreate>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d001      	beq.n	80047ae <osThreadNew+0x11a>
            hTask = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047ae:	693b      	ldr	r3, [r7, #16]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3728      	adds	r7, #40	@ 0x28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047c0:	f3ef 8305 	mrs	r3, IPSR
 80047c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80047c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <osDelay+0x1c>
    stat = osErrorISR;
 80047cc:	f06f 0305 	mvn.w	r3, #5
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	e007      	b.n	80047e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f001 fa6a 	bl	8005cb8 <vTaskDelay>
    }
  }

  return (stat);
 80047e4:	68fb      	ldr	r3, [r7, #12]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b086      	sub	sp, #24
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047fa:	f3ef 8305 	mrs	r3, IPSR
 80047fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004800:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004802:	2b00      	cmp	r3, #0
 8004804:	d12d      	bne.n	8004862 <osEventFlagsNew+0x74>
    mem = -1;
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
 800480a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d015      	beq.n	800483e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d006      	beq.n	8004828 <osEventFlagsNew+0x3a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2b1f      	cmp	r3, #31
 8004820:	d902      	bls.n	8004828 <osEventFlagsNew+0x3a>
        mem = 1;
 8004822:	2301      	movs	r3, #1
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	e00c      	b.n	8004842 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d108      	bne.n	8004842 <osEventFlagsNew+0x54>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d104      	bne.n	8004842 <osEventFlagsNew+0x54>
          mem = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e001      	b.n	8004842 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d106      	bne.n	8004856 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f8e9 	bl	8004a24 <xEventGroupCreateStatic>
 8004852:	6178      	str	r0, [r7, #20]
 8004854:	e005      	b.n	8004862 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d102      	bne.n	8004862 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800485c:	f000 f91b 	bl	8004a96 <xEventGroupCreate>
 8004860:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004862:	697b      	ldr	r3, [r7, #20]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <osEventFlagsSet+0x1c>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004886:	d303      	bcc.n	8004890 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004888:	f06f 0303 	mvn.w	r3, #3
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e028      	b.n	80048e2 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004890:	f3ef 8305 	mrs	r3, IPSR
 8004894:	60fb      	str	r3, [r7, #12]
  return(result);
 8004896:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01d      	beq.n	80048d8 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800489c:	2300      	movs	r3, #0
 800489e:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80048a0:	f107 0308 	add.w	r3, r7, #8
 80048a4:	461a      	mov	r2, r3
 80048a6:	6839      	ldr	r1, [r7, #0]
 80048a8:	6938      	ldr	r0, [r7, #16]
 80048aa:	f000 fa9d 	bl	8004de8 <xEventGroupSetBitsFromISR>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 80048b4:	f06f 0302 	mvn.w	r3, #2
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e012      	b.n	80048e2 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00d      	beq.n	80048e2 <osEventFlagsSet+0x76>
 80048c6:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <osEventFlagsSet+0x80>)
 80048c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	e004      	b.n	80048e2 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	6938      	ldr	r0, [r7, #16]
 80048dc:	f000 f9c8 	bl	8004c70 <xEventGroupSetBits>
 80048e0:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80048e2:	697b      	ldr	r3, [r7, #20]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	e000ed04 	.word	0xe000ed04

080048f0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08c      	sub	sp, #48	@ 0x30
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <osEventFlagsWait+0x20>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800490e:	d303      	bcc.n	8004918 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8004910:	f06f 0303 	mvn.w	r3, #3
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	e04b      	b.n	80049b0 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004918:	f3ef 8305 	mrs	r3, IPSR
 800491c:	617b      	str	r3, [r7, #20]
  return(result);
 800491e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8004924:	f06f 0305 	mvn.w	r3, #5
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	e041      	b.n	80049b0 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8004936:	2301      	movs	r3, #1
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24
 800493a:	e001      	b.n	8004940 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 800493c:	2300      	movs	r3, #0
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800494a:	2300      	movs	r3, #0
 800494c:	623b      	str	r3, [r7, #32]
 800494e:	e001      	b.n	8004954 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8004950:	2301      	movs	r3, #1
 8004952:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495a:	6a3a      	ldr	r2, [r7, #32]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	69b8      	ldr	r0, [r7, #24]
 8004960:	f000 f8b4 	bl	8004acc <xEventGroupWaitBits>
 8004964:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d010      	beq.n	8004992 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4013      	ands	r3, r2
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	429a      	cmp	r2, r3
 800497a:	d019      	beq.n	80049b0 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8004982:	f06f 0301 	mvn.w	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e012      	b.n	80049b0 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800498a:	f06f 0302 	mvn.w	r3, #2
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	e00e      	b.n	80049b0 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	4013      	ands	r3, r2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 80049a2:	f06f 0301 	mvn.w	r3, #1
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e002      	b.n	80049b0 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80049aa:	f06f 0302 	mvn.w	r3, #2
 80049ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80049b0:	69fb      	ldr	r3, [r7, #28]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3728      	adds	r7, #40	@ 0x28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4a07      	ldr	r2, [pc, #28]	@ (80049e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80049cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4a06      	ldr	r2, [pc, #24]	@ (80049ec <vApplicationGetIdleTaskMemory+0x30>)
 80049d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2280      	movs	r2, #128	@ 0x80
 80049d8:	601a      	str	r2, [r3, #0]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	2000028c 	.word	0x2000028c
 80049ec:	200002e8 	.word	0x200002e8

080049f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a07      	ldr	r2, [pc, #28]	@ (8004a1c <vApplicationGetTimerTaskMemory+0x2c>)
 8004a00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4a06      	ldr	r2, [pc, #24]	@ (8004a20 <vApplicationGetTimerTaskMemory+0x30>)
 8004a06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a0e:	601a      	str	r2, [r3, #0]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	200004e8 	.word	0x200004e8
 8004a20:	20000544 	.word	0x20000544

08004a24 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	e7fd      	b.n	8004a46 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004a4a:	2320      	movs	r3, #32
 8004a4c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d00b      	beq.n	8004a6c <xEventGroupCreateStatic+0x48>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	60fb      	str	r3, [r7, #12]
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	e7fd      	b.n	8004a68 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 f9c5 	bl	8004e10 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004a8c:	697b      	ldr	r3, [r7, #20]
	}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004a9c:	2020      	movs	r0, #32
 8004a9e:	f002 fcf5 	bl	800748c <pvPortMalloc>
 8004aa2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 f9ab 	bl	8004e10 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004ac0:	687b      	ldr	r3, [r7, #4]
	}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b090      	sub	sp, #64	@ 0x40
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <xEventGroupWaitBits+0x38>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	623b      	str	r3, [r7, #32]
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	e7fd      	b.n	8004b00 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b0a:	d30b      	bcc.n	8004b24 <xEventGroupWaitBits+0x58>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	61fb      	str	r3, [r7, #28]
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <xEventGroupWaitBits+0x76>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	61bb      	str	r3, [r7, #24]
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	e7fd      	b.n	8004b3e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b42:	f001 fddf 	bl	8006704 <xTaskGetSchedulerState>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <xEventGroupWaitBits+0x86>
 8004b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <xEventGroupWaitBits+0x8a>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <xEventGroupWaitBits+0x8c>
 8004b56:	2300      	movs	r3, #0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	617b      	str	r3, [r7, #20]
}
 8004b6e:	bf00      	nop
 8004b70:	bf00      	nop
 8004b72:	e7fd      	b.n	8004b70 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8004b74:	f001 f93e 	bl	8005df4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b84:	f000 f90d 	bl	8004da2 <prvTestWaitCondition>
 8004b88:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00e      	beq.n	8004bae <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d028      	beq.n	8004bf0 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	401a      	ands	r2, r3
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	e020      	b.n	8004bf0 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d104      	bne.n	8004bbe <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bbc:	e018      	b.n	8004bf0 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bca:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bdc:	1d18      	adds	r0, r3, #4
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be2:	4313      	orrs	r3, r2
 8004be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004be6:	4619      	mov	r1, r3
 8004be8:	f001 fafe 	bl	80061e8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004bf0:	f001 f90e 	bl	8005e10 <xTaskResumeAll>
 8004bf4:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004bf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d031      	beq.n	8004c60 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d107      	bne.n	8004c12 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8004c02:	4b1a      	ldr	r3, [pc, #104]	@ (8004c6c <xEventGroupWaitBits+0x1a0>)
 8004c04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004c12:	f001 fe05 	bl	8006820 <uxTaskResetEventItemValue>
 8004c16:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d11a      	bne.n	8004c58 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8004c22:	f002 fb11 	bl	8007248 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004c32:	f000 f8b6 	bl	8004da2 <prvTestWaitCondition>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d009      	beq.n	8004c50 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d006      	beq.n	8004c50 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c4e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8004c54:	f002 fb2a 	bl	80072ac <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3740      	adds	r7, #64	@ 0x40
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	e000ed04 	.word	0xe000ed04

08004c70 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08e      	sub	sp, #56	@ 0x38
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <xEventGroupSetBits+0x34>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	613b      	str	r3, [r7, #16]
}
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
 8004ca2:	e7fd      	b.n	8004ca0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004caa:	d30b      	bcc.n	8004cc4 <xEventGroupSetBits+0x54>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	60fb      	str	r3, [r7, #12]
}
 8004cbe:	bf00      	nop
 8004cc0:	bf00      	nop
 8004cc2:	e7fd      	b.n	8004cc0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	3308      	adds	r3, #8
 8004cce:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004cd0:	f001 f890 	bl	8005df4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004ce6:	e03c      	b.n	8004d62 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004cfe:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d06:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d108      	bne.n	8004d24 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d22:	e008      	b.n	8004d36 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d101      	bne.n	8004d36 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004d32:	2301      	movs	r3, #1
 8004d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d010      	beq.n	8004d5e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d56:	4619      	mov	r1, r3
 8004d58:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004d5a:	f001 fb13 	bl	8006384 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8004d62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d1be      	bne.n	8004ce8 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	43db      	mvns	r3, r3
 8004d72:	401a      	ands	r2, r3
 8004d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d76:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004d78:	f001 f84a 	bl	8005e10 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7e:	681b      	ldr	r3, [r3, #0]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3738      	adds	r7, #56	@ 0x38
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004d92:	6839      	ldr	r1, [r7, #0]
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff ff6b 	bl	8004c70 <xEventGroupSetBits>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004da2:	b480      	push	{r7}
 8004da4:	b087      	sub	sp, #28
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d107      	bne.n	8004dc8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	e007      	b.n	8004dd8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d101      	bne.n	8004dd8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004dd8:	697b      	ldr	r3, [r7, #20]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	68f9      	ldr	r1, [r7, #12]
 8004dfa:	4804      	ldr	r0, [pc, #16]	@ (8004e0c <xEventGroupSetBitsFromISR+0x24>)
 8004dfc:	f002 f8d6 	bl	8006fac <xTimerPendFunctionCallFromISR>
 8004e00:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004e02:	697b      	ldr	r3, [r7, #20]
	}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	08004d89 	.word	0x08004d89

08004e10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f103 0208 	add.w	r2, r3, #8
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f04f 32ff 	mov.w	r2, #4294967295
 8004e28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f103 0208 	add.w	r2, r3, #8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f103 0208 	add.w	r2, r3, #8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	601a      	str	r2, [r3, #0]
}
 8004ea6:	bf00      	nop
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b085      	sub	sp, #20
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d103      	bne.n	8004ed2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	e00c      	b.n	8004eec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3308      	adds	r3, #8
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e002      	b.n	8004ee0 <vListInsert+0x2e>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d2f6      	bcs.n	8004eda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6892      	ldr	r2, [r2, #8]
 8004f3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6852      	ldr	r2, [r2, #4]
 8004f44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d103      	bne.n	8004f58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	1e5a      	subs	r2, r3, #1
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10b      	bne.n	8004fa4 <xQueueGenericReset+0x2c>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	60bb      	str	r3, [r7, #8]
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fa4:	f002 f950 	bl	8007248 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb0:	68f9      	ldr	r1, [r7, #12]
 8004fb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	441a      	add	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	68f9      	ldr	r1, [r7, #12]
 8004fd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004fda:	fb01 f303 	mul.w	r3, r1, r3
 8004fde:	441a      	add	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	22ff      	movs	r2, #255	@ 0xff
 8004fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	22ff      	movs	r2, #255	@ 0xff
 8004ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d114      	bne.n	8005024 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01a      	beq.n	8005038 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3310      	adds	r3, #16
 8005006:	4618      	mov	r0, r3
 8005008:	f001 f958 	bl	80062bc <xTaskRemoveFromEventList>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d012      	beq.n	8005038 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005012:	4b0d      	ldr	r3, [pc, #52]	@ (8005048 <xQueueGenericReset+0xd0>)
 8005014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	e009      	b.n	8005038 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3310      	adds	r3, #16
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fef1 	bl	8004e10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3324      	adds	r3, #36	@ 0x24
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff feec 	bl	8004e10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005038:	f002 f938 	bl	80072ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800503c:	2301      	movs	r3, #1
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	e000ed04 	.word	0xe000ed04

0800504c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08e      	sub	sp, #56	@ 0x38
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10b      	bne.n	8005096 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	e7fd      	b.n	8005092 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <xQueueGenericCreateStatic+0x56>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <xQueueGenericCreateStatic+0x5a>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <xQueueGenericCreateStatic+0x5c>
 80050a6:	2300      	movs	r3, #0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10b      	bne.n	80050c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	623b      	str	r3, [r7, #32]
}
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d102      	bne.n	80050d0 <xQueueGenericCreateStatic+0x84>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <xQueueGenericCreateStatic+0x88>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <xQueueGenericCreateStatic+0x8a>
 80050d4:	2300      	movs	r3, #0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	61fb      	str	r3, [r7, #28]
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	e7fd      	b.n	80050ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050f2:	2350      	movs	r3, #80	@ 0x50
 80050f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b50      	cmp	r3, #80	@ 0x50
 80050fa:	d00b      	beq.n	8005114 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	61bb      	str	r3, [r7, #24]
}
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	e7fd      	b.n	8005110 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005114:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800511a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00d      	beq.n	800513c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005128:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800512c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	4613      	mov	r3, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f805 	bl	8005146 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800513c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800513e:	4618      	mov	r0, r3
 8005140:	3730      	adds	r7, #48	@ 0x30
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d103      	bne.n	8005162 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e002      	b.n	8005168 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005174:	2101      	movs	r1, #1
 8005176:	69b8      	ldr	r0, [r7, #24]
 8005178:	f7ff fefe 	bl	8004f78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08e      	sub	sp, #56	@ 0x38
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800519a:	2300      	movs	r3, #0
 800519c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80051a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10b      	bne.n	80051c0 <xQueueGenericSend+0x34>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
 80051be:	e7fd      	b.n	80051bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d103      	bne.n	80051ce <xQueueGenericSend+0x42>
 80051c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <xQueueGenericSend+0x46>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <xQueueGenericSend+0x48>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <xQueueGenericSend+0x64>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051ea:	bf00      	nop
 80051ec:	bf00      	nop
 80051ee:	e7fd      	b.n	80051ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d103      	bne.n	80051fe <xQueueGenericSend+0x72>
 80051f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <xQueueGenericSend+0x76>
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <xQueueGenericSend+0x78>
 8005202:	2300      	movs	r3, #0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <xQueueGenericSend+0x94>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	623b      	str	r3, [r7, #32]
}
 800521a:	bf00      	nop
 800521c:	bf00      	nop
 800521e:	e7fd      	b.n	800521c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005220:	f001 fa70 	bl	8006704 <xTaskGetSchedulerState>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <xQueueGenericSend+0xa4>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <xQueueGenericSend+0xa8>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <xQueueGenericSend+0xaa>
 8005234:	2300      	movs	r3, #0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10b      	bne.n	8005252 <xQueueGenericSend+0xc6>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	61fb      	str	r3, [r7, #28]
}
 800524c:	bf00      	nop
 800524e:	bf00      	nop
 8005250:	e7fd      	b.n	800524e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005252:	f001 fff9 	bl	8007248 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800525a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <xQueueGenericSend+0xdc>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d129      	bne.n	80052bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800526e:	f000 fa0f 	bl	8005690 <prvCopyDataToQueue>
 8005272:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d010      	beq.n	800529e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	3324      	adds	r3, #36	@ 0x24
 8005280:	4618      	mov	r0, r3
 8005282:	f001 f81b 	bl	80062bc <xTaskRemoveFromEventList>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d013      	beq.n	80052b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800528c:	4b3f      	ldr	r3, [pc, #252]	@ (800538c <xQueueGenericSend+0x200>)
 800528e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	e00a      	b.n	80052b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800529e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052a4:	4b39      	ldr	r3, [pc, #228]	@ (800538c <xQueueGenericSend+0x200>)
 80052a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052b4:	f001 fffa 	bl	80072ac <vPortExitCritical>
				return pdPASS;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e063      	b.n	8005384 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d103      	bne.n	80052ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052c2:	f001 fff3 	bl	80072ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e05c      	b.n	8005384 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d106      	bne.n	80052de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052d0:	f107 0314 	add.w	r3, r7, #20
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 f8b9 	bl	800644c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052da:	2301      	movs	r3, #1
 80052dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052de:	f001 ffe5 	bl	80072ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052e2:	f000 fd87 	bl	8005df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052e6:	f001 ffaf 	bl	8007248 <vPortEnterCritical>
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052f0:	b25b      	sxtb	r3, r3
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d103      	bne.n	8005300 <xQueueGenericSend+0x174>
 80052f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005306:	b25b      	sxtb	r3, r3
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530c:	d103      	bne.n	8005316 <xQueueGenericSend+0x18a>
 800530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005316:	f001 ffc9 	bl	80072ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800531a:	1d3a      	adds	r2, r7, #4
 800531c:	f107 0314 	add.w	r3, r7, #20
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f001 f8a8 	bl	8006478 <xTaskCheckForTimeOut>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d124      	bne.n	8005378 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800532e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005330:	f000 faa6 	bl	8005880 <prvIsQueueFull>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d018      	beq.n	800536c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800533a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533c:	3310      	adds	r3, #16
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	4611      	mov	r1, r2
 8005342:	4618      	mov	r0, r3
 8005344:	f000 ff2a 	bl	800619c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005348:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800534a:	f000 fa31 	bl	80057b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800534e:	f000 fd5f 	bl	8005e10 <xTaskResumeAll>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	f47f af7c 	bne.w	8005252 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800535a:	4b0c      	ldr	r3, [pc, #48]	@ (800538c <xQueueGenericSend+0x200>)
 800535c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	e772      	b.n	8005252 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800536c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800536e:	f000 fa1f 	bl	80057b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005372:	f000 fd4d 	bl	8005e10 <xTaskResumeAll>
 8005376:	e76c      	b.n	8005252 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800537a:	f000 fa19 	bl	80057b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800537e:	f000 fd47 	bl	8005e10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005382:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005384:	4618      	mov	r0, r3
 8005386:	3738      	adds	r7, #56	@ 0x38
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	e000ed04 	.word	0xe000ed04

08005390 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b090      	sub	sp, #64	@ 0x40
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80053a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10b      	bne.n	80053c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	e7fd      	b.n	80053bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d103      	bne.n	80053ce <xQueueGenericSendFromISR+0x3e>
 80053c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <xQueueGenericSendFromISR+0x42>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <xQueueGenericSendFromISR+0x44>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10b      	bne.n	80053f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053ea:	bf00      	nop
 80053ec:	bf00      	nop
 80053ee:	e7fd      	b.n	80053ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d103      	bne.n	80053fe <xQueueGenericSendFromISR+0x6e>
 80053f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <xQueueGenericSendFromISR+0x72>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <xQueueGenericSendFromISR+0x74>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	623b      	str	r3, [r7, #32]
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005420:	f001 fff2 	bl	8007408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005424:	f3ef 8211 	mrs	r2, BASEPRI
 8005428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	61fa      	str	r2, [r7, #28]
 800543a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800543c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800543e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005448:	429a      	cmp	r2, r3
 800544a:	d302      	bcc.n	8005452 <xQueueGenericSendFromISR+0xc2>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d12f      	bne.n	80054b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005454:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005458:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800545c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005460:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005468:	f000 f912 	bl	8005690 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800546c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005474:	d112      	bne.n	800549c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547a:	2b00      	cmp	r3, #0
 800547c:	d016      	beq.n	80054ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800547e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005480:	3324      	adds	r3, #36	@ 0x24
 8005482:	4618      	mov	r0, r3
 8005484:	f000 ff1a 	bl	80062bc <xTaskRemoveFromEventList>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00e      	beq.n	80054ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00b      	beq.n	80054ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	e007      	b.n	80054ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800549c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80054a0:	3301      	adds	r3, #1
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	b25a      	sxtb	r2, r3
 80054a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80054ac:	2301      	movs	r3, #1
 80054ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80054b0:	e001      	b.n	80054b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3740      	adds	r7, #64	@ 0x40
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08c      	sub	sp, #48	@ 0x30
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054d8:	2300      	movs	r3, #0
 80054da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10b      	bne.n	80054fe <xQueueReceive+0x32>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	623b      	str	r3, [r7, #32]
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <xQueueReceive+0x40>
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <xQueueReceive+0x44>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <xQueueReceive+0x46>
 8005510:	2300      	movs	r3, #0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10b      	bne.n	800552e <xQueueReceive+0x62>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	61fb      	str	r3, [r7, #28]
}
 8005528:	bf00      	nop
 800552a:	bf00      	nop
 800552c:	e7fd      	b.n	800552a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800552e:	f001 f8e9 	bl	8006704 <xTaskGetSchedulerState>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <xQueueReceive+0x72>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <xQueueReceive+0x76>
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <xQueueReceive+0x78>
 8005542:	2300      	movs	r3, #0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10b      	bne.n	8005560 <xQueueReceive+0x94>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	61bb      	str	r3, [r7, #24]
}
 800555a:	bf00      	nop
 800555c:	bf00      	nop
 800555e:	e7fd      	b.n	800555c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005560:	f001 fe72 	bl	8007248 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01f      	beq.n	80055b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005574:	f000 f8f6 	bl	8005764 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	1e5a      	subs	r2, r3, #1
 800557c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00f      	beq.n	80055a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558a:	3310      	adds	r3, #16
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fe95 	bl	80062bc <xTaskRemoveFromEventList>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d007      	beq.n	80055a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005598:	4b3c      	ldr	r3, [pc, #240]	@ (800568c <xQueueReceive+0x1c0>)
 800559a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055a8:	f001 fe80 	bl	80072ac <vPortExitCritical>
				return pdPASS;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e069      	b.n	8005684 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d103      	bne.n	80055be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055b6:	f001 fe79 	bl	80072ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055ba:	2300      	movs	r3, #0
 80055bc:	e062      	b.n	8005684 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055c4:	f107 0310 	add.w	r3, r7, #16
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 ff3f 	bl	800644c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ce:	2301      	movs	r3, #1
 80055d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055d2:	f001 fe6b 	bl	80072ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055d6:	f000 fc0d 	bl	8005df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055da:	f001 fe35 	bl	8007248 <vPortEnterCritical>
 80055de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055e4:	b25b      	sxtb	r3, r3
 80055e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ea:	d103      	bne.n	80055f4 <xQueueReceive+0x128>
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055fa:	b25b      	sxtb	r3, r3
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d103      	bne.n	800560a <xQueueReceive+0x13e>
 8005602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800560a:	f001 fe4f 	bl	80072ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800560e:	1d3a      	adds	r2, r7, #4
 8005610:	f107 0310 	add.w	r3, r7, #16
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f000 ff2e 	bl	8006478 <xTaskCheckForTimeOut>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d123      	bne.n	800566a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005624:	f000 f916 	bl	8005854 <prvIsQueueEmpty>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d017      	beq.n	800565e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800562e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005630:	3324      	adds	r3, #36	@ 0x24
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fdb0 	bl	800619c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800563c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800563e:	f000 f8b7 	bl	80057b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005642:	f000 fbe5 	bl	8005e10 <xTaskResumeAll>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d189      	bne.n	8005560 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800564c:	4b0f      	ldr	r3, [pc, #60]	@ (800568c <xQueueReceive+0x1c0>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	e780      	b.n	8005560 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800565e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005660:	f000 f8a6 	bl	80057b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005664:	f000 fbd4 	bl	8005e10 <xTaskResumeAll>
 8005668:	e77a      	b.n	8005560 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800566a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800566c:	f000 f8a0 	bl	80057b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005670:	f000 fbce 	bl	8005e10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005674:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005676:	f000 f8ed 	bl	8005854 <prvIsQueueEmpty>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	f43f af6f 	beq.w	8005560 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005682:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005684:	4618      	mov	r0, r3
 8005686:	3730      	adds	r7, #48	@ 0x30
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	e000ed04 	.word	0xe000ed04

08005690 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10d      	bne.n	80056ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d14d      	bne.n	8005752 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 f840 	bl	8006740 <xTaskPriorityDisinherit>
 80056c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	609a      	str	r2, [r3, #8]
 80056c8:	e043      	b.n	8005752 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d119      	bne.n	8005704 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6858      	ldr	r0, [r3, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d8:	461a      	mov	r2, r3
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	f002 fb6b 	bl	8007db6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e8:	441a      	add	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d32b      	bcc.n	8005752 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	e026      	b.n	8005752 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68d8      	ldr	r0, [r3, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570c:	461a      	mov	r2, r3
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	f002 fb51 	bl	8007db6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571c:	425b      	negs	r3, r3
 800571e:	441a      	add	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d207      	bcs.n	8005740 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005738:	425b      	negs	r3, r3
 800573a:	441a      	add	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d105      	bne.n	8005752 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	3b01      	subs	r3, #1
 8005750:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800575a:	697b      	ldr	r3, [r7, #20]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d018      	beq.n	80057a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	441a      	add	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	429a      	cmp	r2, r3
 800578e:	d303      	bcc.n	8005798 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68d9      	ldr	r1, [r3, #12]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a0:	461a      	mov	r2, r3
 80057a2:	6838      	ldr	r0, [r7, #0]
 80057a4:	f002 fb07 	bl	8007db6 <memcpy>
	}
}
 80057a8:	bf00      	nop
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057b8:	f001 fd46 	bl	8007248 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057c4:	e011      	b.n	80057ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d012      	beq.n	80057f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3324      	adds	r3, #36	@ 0x24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fd72 	bl	80062bc <xTaskRemoveFromEventList>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057de:	f000 feaf 	bl	8006540 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	dce9      	bgt.n	80057c6 <prvUnlockQueue+0x16>
 80057f2:	e000      	b.n	80057f6 <prvUnlockQueue+0x46>
					break;
 80057f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	22ff      	movs	r2, #255	@ 0xff
 80057fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80057fe:	f001 fd55 	bl	80072ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005802:	f001 fd21 	bl	8007248 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800580c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800580e:	e011      	b.n	8005834 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d012      	beq.n	800583e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3310      	adds	r3, #16
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fd4d 	bl	80062bc <xTaskRemoveFromEventList>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005828:	f000 fe8a 	bl	8006540 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	3b01      	subs	r3, #1
 8005830:	b2db      	uxtb	r3, r3
 8005832:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005838:	2b00      	cmp	r3, #0
 800583a:	dce9      	bgt.n	8005810 <prvUnlockQueue+0x60>
 800583c:	e000      	b.n	8005840 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800583e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	22ff      	movs	r2, #255	@ 0xff
 8005844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005848:	f001 fd30 	bl	80072ac <vPortExitCritical>
}
 800584c:	bf00      	nop
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800585c:	f001 fcf4 	bl	8007248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005864:	2b00      	cmp	r3, #0
 8005866:	d102      	bne.n	800586e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	e001      	b.n	8005872 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005872:	f001 fd1b 	bl	80072ac <vPortExitCritical>

	return xReturn;
 8005876:	68fb      	ldr	r3, [r7, #12]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005888:	f001 fcde 	bl	8007248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005894:	429a      	cmp	r2, r3
 8005896:	d102      	bne.n	800589e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005898:	2301      	movs	r3, #1
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	e001      	b.n	80058a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058a2:	f001 fd03 	bl	80072ac <vPortExitCritical>

	return xReturn;
 80058a6:	68fb      	ldr	r3, [r7, #12]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	e014      	b.n	80058ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058c0:	4a0f      	ldr	r2, [pc, #60]	@ (8005900 <vQueueAddToRegistry+0x50>)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10b      	bne.n	80058e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058cc:	490c      	ldr	r1, [pc, #48]	@ (8005900 <vQueueAddToRegistry+0x50>)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005900 <vQueueAddToRegistry+0x50>)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	4413      	add	r3, r2
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058e2:	e006      	b.n	80058f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b07      	cmp	r3, #7
 80058ee:	d9e7      	bls.n	80058c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000944 	.word	0x20000944

08005904 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005914:	f001 fc98 	bl	8007248 <vPortEnterCritical>
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800591e:	b25b      	sxtb	r3, r3
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005924:	d103      	bne.n	800592e <vQueueWaitForMessageRestricted+0x2a>
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005934:	b25b      	sxtb	r3, r3
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d103      	bne.n	8005944 <vQueueWaitForMessageRestricted+0x40>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005944:	f001 fcb2 	bl	80072ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594c:	2b00      	cmp	r3, #0
 800594e:	d106      	bne.n	800595e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	3324      	adds	r3, #36	@ 0x24
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fc83 	bl	8006264 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800595e:	6978      	ldr	r0, [r7, #20]
 8005960:	f7ff ff26 	bl	80057b0 <prvUnlockQueue>
	}
 8005964:	bf00      	nop
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08e      	sub	sp, #56	@ 0x38
 8005970:	af04      	add	r7, sp, #16
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800597a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	623b      	str	r3, [r7, #32]
}
 8005992:	bf00      	nop
 8005994:	bf00      	nop
 8005996:	e7fd      	b.n	8005994 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	61fb      	str	r3, [r7, #28]
}
 80059b0:	bf00      	nop
 80059b2:	bf00      	nop
 80059b4:	e7fd      	b.n	80059b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059b6:	235c      	movs	r3, #92	@ 0x5c
 80059b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80059be:	d00b      	beq.n	80059d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	61bb      	str	r3, [r7, #24]
}
 80059d2:	bf00      	nop
 80059d4:	bf00      	nop
 80059d6:	e7fd      	b.n	80059d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01e      	beq.n	8005a1e <xTaskCreateStatic+0xb2>
 80059e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01b      	beq.n	8005a1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059f8:	2300      	movs	r3, #0
 80059fa:	9303      	str	r3, [sp, #12]
 80059fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fe:	9302      	str	r3, [sp, #8]
 8005a00:	f107 0314 	add.w	r3, r7, #20
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f850 	bl	8005ab6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a18:	f000 f8de 	bl	8005bd8 <prvAddNewTaskToReadyList>
 8005a1c:	e001      	b.n	8005a22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a22:	697b      	ldr	r3, [r7, #20]
	}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3728      	adds	r7, #40	@ 0x28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08c      	sub	sp, #48	@ 0x30
 8005a30:	af04      	add	r7, sp, #16
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a3c:	88fb      	ldrh	r3, [r7, #6]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 fd23 	bl	800748c <pvPortMalloc>
 8005a46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00e      	beq.n	8005a6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a4e:	205c      	movs	r0, #92	@ 0x5c
 8005a50:	f001 fd1c 	bl	800748c <pvPortMalloc>
 8005a54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a62:	e005      	b.n	8005a70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a64:	6978      	ldr	r0, [r7, #20]
 8005a66:	f001 fddf 	bl	8007628 <vPortFree>
 8005a6a:	e001      	b.n	8005a70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d017      	beq.n	8005aa6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a7e:	88fa      	ldrh	r2, [r7, #6]
 8005a80:	2300      	movs	r3, #0
 8005a82:	9303      	str	r3, [sp, #12]
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	9302      	str	r3, [sp, #8]
 8005a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8a:	9301      	str	r3, [sp, #4]
 8005a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f80e 	bl	8005ab6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a9a:	69f8      	ldr	r0, [r7, #28]
 8005a9c:	f000 f89c 	bl	8005bd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	61bb      	str	r3, [r7, #24]
 8005aa4:	e002      	b.n	8005aac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aaa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005aac:	69bb      	ldr	r3, [r7, #24]
	}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b088      	sub	sp, #32
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	461a      	mov	r2, r3
 8005ace:	21a5      	movs	r1, #165	@ 0xa5
 8005ad0:	f002 f899 	bl	8007c06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	f023 0307 	bic.w	r3, r3, #7
 8005aec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00b      	beq.n	8005b10 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	617b      	str	r3, [r7, #20]
}
 8005b0a:	bf00      	nop
 8005b0c:	bf00      	nop
 8005b0e:	e7fd      	b.n	8005b0c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01f      	beq.n	8005b56 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b16:	2300      	movs	r3, #0
 8005b18:	61fb      	str	r3, [r7, #28]
 8005b1a:	e012      	b.n	8005b42 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	7819      	ldrb	r1, [r3, #0]
 8005b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	3334      	adds	r3, #52	@ 0x34
 8005b2c:	460a      	mov	r2, r1
 8005b2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d006      	beq.n	8005b4a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	2b0f      	cmp	r3, #15
 8005b46:	d9e9      	bls.n	8005b1c <prvInitialiseNewTask+0x66>
 8005b48:	e000      	b.n	8005b4c <prvInitialiseNewTask+0x96>
			{
				break;
 8005b4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b54:	e003      	b.n	8005b5e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b60:	2b37      	cmp	r3, #55	@ 0x37
 8005b62:	d901      	bls.n	8005b68 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b64:	2337      	movs	r3, #55	@ 0x37
 8005b66:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b72:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b76:	2200      	movs	r2, #0
 8005b78:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff f966 	bl	8004e50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b86:	3318      	adds	r3, #24
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff f961 	bl	8004e50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ba2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	68f9      	ldr	r1, [r7, #12]
 8005bb6:	69b8      	ldr	r0, [r7, #24]
 8005bb8:	f001 fa18 	bl	8006fec <pxPortInitialiseStack>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bce:	bf00      	nop
 8005bd0:	3720      	adds	r7, #32
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005be0:	f001 fb32 	bl	8007248 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005be4:	4b2d      	ldr	r3, [pc, #180]	@ (8005c9c <prvAddNewTaskToReadyList+0xc4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3301      	adds	r3, #1
 8005bea:	4a2c      	ldr	r2, [pc, #176]	@ (8005c9c <prvAddNewTaskToReadyList+0xc4>)
 8005bec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bee:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca0 <prvAddNewTaskToReadyList+0xc8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8005ca0 <prvAddNewTaskToReadyList+0xc8>)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bfc:	4b27      	ldr	r3, [pc, #156]	@ (8005c9c <prvAddNewTaskToReadyList+0xc4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d110      	bne.n	8005c26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c04:	f000 fcc0 	bl	8006588 <prvInitialiseTaskLists>
 8005c08:	e00d      	b.n	8005c26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c0a:	4b26      	ldr	r3, [pc, #152]	@ (8005ca4 <prvAddNewTaskToReadyList+0xcc>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c12:	4b23      	ldr	r3, [pc, #140]	@ (8005ca0 <prvAddNewTaskToReadyList+0xc8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d802      	bhi.n	8005c26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c20:	4a1f      	ldr	r2, [pc, #124]	@ (8005ca0 <prvAddNewTaskToReadyList+0xc8>)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c26:	4b20      	ldr	r3, [pc, #128]	@ (8005ca8 <prvAddNewTaskToReadyList+0xd0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ca8 <prvAddNewTaskToReadyList+0xd0>)
 8005c2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c30:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca8 <prvAddNewTaskToReadyList+0xd0>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cac <prvAddNewTaskToReadyList+0xd4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d903      	bls.n	8005c4c <prvAddNewTaskToReadyList+0x74>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	4a18      	ldr	r2, [pc, #96]	@ (8005cac <prvAddNewTaskToReadyList+0xd4>)
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4a15      	ldr	r2, [pc, #84]	@ (8005cb0 <prvAddNewTaskToReadyList+0xd8>)
 8005c5a:	441a      	add	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	4610      	mov	r0, r2
 8005c64:	f7ff f901 	bl	8004e6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c68:	f001 fb20 	bl	80072ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca4 <prvAddNewTaskToReadyList+0xcc>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00e      	beq.n	8005c92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c74:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca0 <prvAddNewTaskToReadyList+0xc8>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d207      	bcs.n	8005c92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c82:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb4 <prvAddNewTaskToReadyList+0xdc>)
 8005c84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000e58 	.word	0x20000e58
 8005ca0:	20000984 	.word	0x20000984
 8005ca4:	20000e64 	.word	0x20000e64
 8005ca8:	20000e74 	.word	0x20000e74
 8005cac:	20000e60 	.word	0x20000e60
 8005cb0:	20000988 	.word	0x20000988
 8005cb4:	e000ed04 	.word	0xe000ed04

08005cb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d018      	beq.n	8005cfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cca:	4b14      	ldr	r3, [pc, #80]	@ (8005d1c <vTaskDelay+0x64>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00b      	beq.n	8005cea <vTaskDelay+0x32>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	60bb      	str	r3, [r7, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	e7fd      	b.n	8005ce6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005cea:	f000 f883 	bl	8005df4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005cee:	2100      	movs	r1, #0
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fdad 	bl	8006850 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cf6:	f000 f88b 	bl	8005e10 <xTaskResumeAll>
 8005cfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d107      	bne.n	8005d12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005d02:	4b07      	ldr	r3, [pc, #28]	@ (8005d20 <vTaskDelay+0x68>)
 8005d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000e80 	.word	0x20000e80
 8005d20:	e000ed04 	.word	0xe000ed04

08005d24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	@ 0x28
 8005d28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d32:	463a      	mov	r2, r7
 8005d34:	1d39      	adds	r1, r7, #4
 8005d36:	f107 0308 	add.w	r3, r7, #8
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fe3e 	bl	80049bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	9202      	str	r2, [sp, #8]
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	460a      	mov	r2, r1
 8005d52:	4922      	ldr	r1, [pc, #136]	@ (8005ddc <vTaskStartScheduler+0xb8>)
 8005d54:	4822      	ldr	r0, [pc, #136]	@ (8005de0 <vTaskStartScheduler+0xbc>)
 8005d56:	f7ff fe09 	bl	800596c <xTaskCreateStatic>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4a21      	ldr	r2, [pc, #132]	@ (8005de4 <vTaskStartScheduler+0xc0>)
 8005d5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d60:	4b20      	ldr	r3, [pc, #128]	@ (8005de4 <vTaskStartScheduler+0xc0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	e001      	b.n	8005d72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d102      	bne.n	8005d7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d78:	f000 fdbe 	bl	80068f8 <xTimerCreateTimerTask>
 8005d7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d116      	bne.n	8005db2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	613b      	str	r3, [r7, #16]
}
 8005d96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d98:	4b13      	ldr	r3, [pc, #76]	@ (8005de8 <vTaskStartScheduler+0xc4>)
 8005d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005da0:	4b12      	ldr	r3, [pc, #72]	@ (8005dec <vTaskStartScheduler+0xc8>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005da6:	4b12      	ldr	r3, [pc, #72]	@ (8005df0 <vTaskStartScheduler+0xcc>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dac:	f001 f9a8 	bl	8007100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005db0:	e00f      	b.n	8005dd2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d10b      	bne.n	8005dd2 <vTaskStartScheduler+0xae>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	60fb      	str	r3, [r7, #12]
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	e7fd      	b.n	8005dce <vTaskStartScheduler+0xaa>
}
 8005dd2:	bf00      	nop
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	08008f98 	.word	0x08008f98
 8005de0:	08006559 	.word	0x08006559
 8005de4:	20000e7c 	.word	0x20000e7c
 8005de8:	20000e78 	.word	0x20000e78
 8005dec:	20000e64 	.word	0x20000e64
 8005df0:	20000e5c 	.word	0x20000e5c

08005df4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005df8:	4b04      	ldr	r3, [pc, #16]	@ (8005e0c <vTaskSuspendAll+0x18>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	4a03      	ldr	r2, [pc, #12]	@ (8005e0c <vTaskSuspendAll+0x18>)
 8005e00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e02:	bf00      	nop
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000e80 	.word	0x20000e80

08005e10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e1e:	4b42      	ldr	r3, [pc, #264]	@ (8005f28 <xTaskResumeAll+0x118>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10b      	bne.n	8005e3e <xTaskResumeAll+0x2e>
	__asm volatile
 8005e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	603b      	str	r3, [r7, #0]
}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	e7fd      	b.n	8005e3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e3e:	f001 fa03 	bl	8007248 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e42:	4b39      	ldr	r3, [pc, #228]	@ (8005f28 <xTaskResumeAll+0x118>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	4a37      	ldr	r2, [pc, #220]	@ (8005f28 <xTaskResumeAll+0x118>)
 8005e4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e4c:	4b36      	ldr	r3, [pc, #216]	@ (8005f28 <xTaskResumeAll+0x118>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d162      	bne.n	8005f1a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e54:	4b35      	ldr	r3, [pc, #212]	@ (8005f2c <xTaskResumeAll+0x11c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d05e      	beq.n	8005f1a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e5c:	e02f      	b.n	8005ebe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e5e:	4b34      	ldr	r3, [pc, #208]	@ (8005f30 <xTaskResumeAll+0x120>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3318      	adds	r3, #24
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff f85a 	bl	8004f24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff f855 	bl	8004f24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f34 <xTaskResumeAll+0x124>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d903      	bls.n	8005e8e <xTaskResumeAll+0x7e>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8005f34 <xTaskResumeAll+0x124>)
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4a27      	ldr	r2, [pc, #156]	@ (8005f38 <xTaskResumeAll+0x128>)
 8005e9c:	441a      	add	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f7fe ffe0 	bl	8004e6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eae:	4b23      	ldr	r3, [pc, #140]	@ (8005f3c <xTaskResumeAll+0x12c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d302      	bcc.n	8005ebe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005eb8:	4b21      	ldr	r3, [pc, #132]	@ (8005f40 <xTaskResumeAll+0x130>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8005f30 <xTaskResumeAll+0x120>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1cb      	bne.n	8005e5e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ecc:	f000 fbfa 	bl	80066c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f44 <xTaskResumeAll+0x134>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d010      	beq.n	8005efe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005edc:	f000 f846 	bl	8005f6c <xTaskIncrementTick>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005ee6:	4b16      	ldr	r3, [pc, #88]	@ (8005f40 <xTaskResumeAll+0x130>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f1      	bne.n	8005edc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005ef8:	4b12      	ldr	r3, [pc, #72]	@ (8005f44 <xTaskResumeAll+0x134>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005efe:	4b10      	ldr	r3, [pc, #64]	@ (8005f40 <xTaskResumeAll+0x130>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d009      	beq.n	8005f1a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f06:	2301      	movs	r3, #1
 8005f08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f48 <xTaskResumeAll+0x138>)
 8005f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f1a:	f001 f9c7 	bl	80072ac <vPortExitCritical>

	return xAlreadyYielded;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000e80 	.word	0x20000e80
 8005f2c:	20000e58 	.word	0x20000e58
 8005f30:	20000e18 	.word	0x20000e18
 8005f34:	20000e60 	.word	0x20000e60
 8005f38:	20000988 	.word	0x20000988
 8005f3c:	20000984 	.word	0x20000984
 8005f40:	20000e6c 	.word	0x20000e6c
 8005f44:	20000e68 	.word	0x20000e68
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f52:	4b05      	ldr	r3, [pc, #20]	@ (8005f68 <xTaskGetTickCount+0x1c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f58:	687b      	ldr	r3, [r7, #4]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20000e5c 	.word	0x20000e5c

08005f6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f76:	4b4f      	ldr	r3, [pc, #316]	@ (80060b4 <xTaskIncrementTick+0x148>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 8090 	bne.w	80060a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f80:	4b4d      	ldr	r3, [pc, #308]	@ (80060b8 <xTaskIncrementTick+0x14c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3301      	adds	r3, #1
 8005f86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f88:	4a4b      	ldr	r2, [pc, #300]	@ (80060b8 <xTaskIncrementTick+0x14c>)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d121      	bne.n	8005fd8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f94:	4b49      	ldr	r3, [pc, #292]	@ (80060bc <xTaskIncrementTick+0x150>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00b      	beq.n	8005fb6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	603b      	str	r3, [r7, #0]
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	e7fd      	b.n	8005fb2 <xTaskIncrementTick+0x46>
 8005fb6:	4b41      	ldr	r3, [pc, #260]	@ (80060bc <xTaskIncrementTick+0x150>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	4b40      	ldr	r3, [pc, #256]	@ (80060c0 <xTaskIncrementTick+0x154>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a3e      	ldr	r2, [pc, #248]	@ (80060bc <xTaskIncrementTick+0x150>)
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	4a3e      	ldr	r2, [pc, #248]	@ (80060c0 <xTaskIncrementTick+0x154>)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	4b3e      	ldr	r3, [pc, #248]	@ (80060c4 <xTaskIncrementTick+0x158>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	4a3c      	ldr	r2, [pc, #240]	@ (80060c4 <xTaskIncrementTick+0x158>)
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	f000 fb76 	bl	80066c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80060c8 <xTaskIncrementTick+0x15c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d349      	bcc.n	8006076 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fe2:	4b36      	ldr	r3, [pc, #216]	@ (80060bc <xTaskIncrementTick+0x150>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d104      	bne.n	8005ff6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fec:	4b36      	ldr	r3, [pc, #216]	@ (80060c8 <xTaskIncrementTick+0x15c>)
 8005fee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff2:	601a      	str	r2, [r3, #0]
					break;
 8005ff4:	e03f      	b.n	8006076 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ff6:	4b31      	ldr	r3, [pc, #196]	@ (80060bc <xTaskIncrementTick+0x150>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	429a      	cmp	r2, r3
 800600c:	d203      	bcs.n	8006016 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800600e:	4a2e      	ldr	r2, [pc, #184]	@ (80060c8 <xTaskIncrementTick+0x15c>)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006014:	e02f      	b.n	8006076 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	3304      	adds	r3, #4
 800601a:	4618      	mov	r0, r3
 800601c:	f7fe ff82 	bl	8004f24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006024:	2b00      	cmp	r3, #0
 8006026:	d004      	beq.n	8006032 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	3318      	adds	r3, #24
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe ff79 	bl	8004f24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006036:	4b25      	ldr	r3, [pc, #148]	@ (80060cc <xTaskIncrementTick+0x160>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d903      	bls.n	8006046 <xTaskIncrementTick+0xda>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006042:	4a22      	ldr	r2, [pc, #136]	@ (80060cc <xTaskIncrementTick+0x160>)
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4a1f      	ldr	r2, [pc, #124]	@ (80060d0 <xTaskIncrementTick+0x164>)
 8006054:	441a      	add	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	3304      	adds	r3, #4
 800605a:	4619      	mov	r1, r3
 800605c:	4610      	mov	r0, r2
 800605e:	f7fe ff04 	bl	8004e6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006066:	4b1b      	ldr	r3, [pc, #108]	@ (80060d4 <xTaskIncrementTick+0x168>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606c:	429a      	cmp	r2, r3
 800606e:	d3b8      	bcc.n	8005fe2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006070:	2301      	movs	r3, #1
 8006072:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006074:	e7b5      	b.n	8005fe2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006076:	4b17      	ldr	r3, [pc, #92]	@ (80060d4 <xTaskIncrementTick+0x168>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800607c:	4914      	ldr	r1, [pc, #80]	@ (80060d0 <xTaskIncrementTick+0x164>)
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d901      	bls.n	8006092 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800608e:	2301      	movs	r3, #1
 8006090:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006092:	4b11      	ldr	r3, [pc, #68]	@ (80060d8 <xTaskIncrementTick+0x16c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800609a:	2301      	movs	r3, #1
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	e004      	b.n	80060aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060a0:	4b0e      	ldr	r3, [pc, #56]	@ (80060dc <xTaskIncrementTick+0x170>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	4a0d      	ldr	r2, [pc, #52]	@ (80060dc <xTaskIncrementTick+0x170>)
 80060a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060aa:	697b      	ldr	r3, [r7, #20]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20000e80 	.word	0x20000e80
 80060b8:	20000e5c 	.word	0x20000e5c
 80060bc:	20000e10 	.word	0x20000e10
 80060c0:	20000e14 	.word	0x20000e14
 80060c4:	20000e70 	.word	0x20000e70
 80060c8:	20000e78 	.word	0x20000e78
 80060cc:	20000e60 	.word	0x20000e60
 80060d0:	20000988 	.word	0x20000988
 80060d4:	20000984 	.word	0x20000984
 80060d8:	20000e6c 	.word	0x20000e6c
 80060dc:	20000e68 	.word	0x20000e68

080060e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060e6:	4b28      	ldr	r3, [pc, #160]	@ (8006188 <vTaskSwitchContext+0xa8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060ee:	4b27      	ldr	r3, [pc, #156]	@ (800618c <vTaskSwitchContext+0xac>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060f4:	e042      	b.n	800617c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80060f6:	4b25      	ldr	r3, [pc, #148]	@ (800618c <vTaskSwitchContext+0xac>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060fc:	4b24      	ldr	r3, [pc, #144]	@ (8006190 <vTaskSwitchContext+0xb0>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	e011      	b.n	8006128 <vTaskSwitchContext+0x48>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <vTaskSwitchContext+0x42>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	607b      	str	r3, [r7, #4]
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	e7fd      	b.n	800611e <vTaskSwitchContext+0x3e>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3b01      	subs	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	491a      	ldr	r1, [pc, #104]	@ (8006194 <vTaskSwitchContext+0xb4>)
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0e3      	beq.n	8006104 <vTaskSwitchContext+0x24>
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4a13      	ldr	r2, [pc, #76]	@ (8006194 <vTaskSwitchContext+0xb4>)
 8006148:	4413      	add	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	605a      	str	r2, [r3, #4]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	3308      	adds	r3, #8
 800615e:	429a      	cmp	r2, r3
 8006160:	d104      	bne.n	800616c <vTaskSwitchContext+0x8c>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	605a      	str	r2, [r3, #4]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	4a09      	ldr	r2, [pc, #36]	@ (8006198 <vTaskSwitchContext+0xb8>)
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	4a06      	ldr	r2, [pc, #24]	@ (8006190 <vTaskSwitchContext+0xb0>)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6013      	str	r3, [r2, #0]
}
 800617c:	bf00      	nop
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	20000e80 	.word	0x20000e80
 800618c:	20000e6c 	.word	0x20000e6c
 8006190:	20000e60 	.word	0x20000e60
 8006194:	20000988 	.word	0x20000988
 8006198:	20000984 	.word	0x20000984

0800619c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10b      	bne.n	80061c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	60fb      	str	r3, [r7, #12]
}
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
 80061c2:	e7fd      	b.n	80061c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061c4:	4b07      	ldr	r3, [pc, #28]	@ (80061e4 <vTaskPlaceOnEventList+0x48>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3318      	adds	r3, #24
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7fe fe70 	bl	8004eb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061d2:	2101      	movs	r1, #1
 80061d4:	6838      	ldr	r0, [r7, #0]
 80061d6:	f000 fb3b 	bl	8006850 <prvAddCurrentTaskToDelayedList>
}
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000984 	.word	0x20000984

080061e8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10b      	bne.n	8006212 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	617b      	str	r3, [r7, #20]
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	e7fd      	b.n	800620e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006212:	4b12      	ldr	r3, [pc, #72]	@ (800625c <vTaskPlaceOnUnorderedEventList+0x74>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	613b      	str	r3, [r7, #16]
}
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	e7fd      	b.n	800622e <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006232:	4b0b      	ldr	r3, [pc, #44]	@ (8006260 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800623c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800623e:	4b08      	ldr	r3, [pc, #32]	@ (8006260 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3318      	adds	r3, #24
 8006244:	4619      	mov	r1, r3
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7fe fe0f 	bl	8004e6a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800624c:	2101      	movs	r1, #1
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fafe 	bl	8006850 <prvAddCurrentTaskToDelayedList>
}
 8006254:	bf00      	nop
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	20000e80 	.word	0x20000e80
 8006260:	20000984 	.word	0x20000984

08006264 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10b      	bne.n	800628e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	617b      	str	r3, [r7, #20]
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	e7fd      	b.n	800628a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800628e:	4b0a      	ldr	r3, [pc, #40]	@ (80062b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3318      	adds	r3, #24
 8006294:	4619      	mov	r1, r3
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7fe fde7 	bl	8004e6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80062a2:	f04f 33ff 	mov.w	r3, #4294967295
 80062a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	68b8      	ldr	r0, [r7, #8]
 80062ac:	f000 fad0 	bl	8006850 <prvAddCurrentTaskToDelayedList>
	}
 80062b0:	bf00      	nop
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20000984 	.word	0x20000984

080062bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10b      	bne.n	80062ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	60fb      	str	r3, [r7, #12]
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	3318      	adds	r3, #24
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe fe18 	bl	8004f24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062f4:	4b1d      	ldr	r3, [pc, #116]	@ (800636c <xTaskRemoveFromEventList+0xb0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d11d      	bne.n	8006338 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	3304      	adds	r3, #4
 8006300:	4618      	mov	r0, r3
 8006302:	f7fe fe0f 	bl	8004f24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630a:	4b19      	ldr	r3, [pc, #100]	@ (8006370 <xTaskRemoveFromEventList+0xb4>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d903      	bls.n	800631a <xTaskRemoveFromEventList+0x5e>
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006316:	4a16      	ldr	r2, [pc, #88]	@ (8006370 <xTaskRemoveFromEventList+0xb4>)
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4a13      	ldr	r2, [pc, #76]	@ (8006374 <xTaskRemoveFromEventList+0xb8>)
 8006328:	441a      	add	r2, r3
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	3304      	adds	r3, #4
 800632e:	4619      	mov	r1, r3
 8006330:	4610      	mov	r0, r2
 8006332:	f7fe fd9a 	bl	8004e6a <vListInsertEnd>
 8006336:	e005      	b.n	8006344 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	3318      	adds	r3, #24
 800633c:	4619      	mov	r1, r3
 800633e:	480e      	ldr	r0, [pc, #56]	@ (8006378 <xTaskRemoveFromEventList+0xbc>)
 8006340:	f7fe fd93 	bl	8004e6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006348:	4b0c      	ldr	r3, [pc, #48]	@ (800637c <xTaskRemoveFromEventList+0xc0>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	429a      	cmp	r2, r3
 8006350:	d905      	bls.n	800635e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006352:	2301      	movs	r3, #1
 8006354:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006356:	4b0a      	ldr	r3, [pc, #40]	@ (8006380 <xTaskRemoveFromEventList+0xc4>)
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	e001      	b.n	8006362 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006362:	697b      	ldr	r3, [r7, #20]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	20000e80 	.word	0x20000e80
 8006370:	20000e60 	.word	0x20000e60
 8006374:	20000988 	.word	0x20000988
 8006378:	20000e18 	.word	0x20000e18
 800637c:	20000984 	.word	0x20000984
 8006380:	20000e6c 	.word	0x20000e6c

08006384 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800638e:	4b2a      	ldr	r3, [pc, #168]	@ (8006438 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10b      	bne.n	80063ae <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	613b      	str	r3, [r7, #16]
}
 80063a8:	bf00      	nop
 80063aa:	bf00      	nop
 80063ac:	e7fd      	b.n	80063aa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10b      	bne.n	80063dc <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	60fb      	str	r3, [r7, #12]
}
 80063d6:	bf00      	nop
 80063d8:	bf00      	nop
 80063da:	e7fd      	b.n	80063d8 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7fe fda1 	bl	8004f24 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe fd9c 	bl	8004f24 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f0:	4b12      	ldr	r3, [pc, #72]	@ (800643c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d903      	bls.n	8006400 <vTaskRemoveFromUnorderedEventList+0x7c>
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fc:	4a0f      	ldr	r2, [pc, #60]	@ (800643c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4a0c      	ldr	r2, [pc, #48]	@ (8006440 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800640e:	441a      	add	r2, r3
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	3304      	adds	r3, #4
 8006414:	4619      	mov	r1, r3
 8006416:	4610      	mov	r0, r2
 8006418:	f7fe fd27 	bl	8004e6a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006420:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006426:	429a      	cmp	r2, r3
 8006428:	d902      	bls.n	8006430 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800642a:	4b07      	ldr	r3, [pc, #28]	@ (8006448 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800642c:	2201      	movs	r2, #1
 800642e:	601a      	str	r2, [r3, #0]
	}
}
 8006430:	bf00      	nop
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	20000e80 	.word	0x20000e80
 800643c:	20000e60 	.word	0x20000e60
 8006440:	20000988 	.word	0x20000988
 8006444:	20000984 	.word	0x20000984
 8006448:	20000e6c 	.word	0x20000e6c

0800644c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006454:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <vTaskInternalSetTimeOutState+0x24>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800645c:	4b05      	ldr	r3, [pc, #20]	@ (8006474 <vTaskInternalSetTimeOutState+0x28>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	605a      	str	r2, [r3, #4]
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	20000e70 	.word	0x20000e70
 8006474:	20000e5c 	.word	0x20000e5c

08006478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10b      	bne.n	80064a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	613b      	str	r3, [r7, #16]
}
 800649a:	bf00      	nop
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10b      	bne.n	80064be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	60fb      	str	r3, [r7, #12]
}
 80064b8:	bf00      	nop
 80064ba:	bf00      	nop
 80064bc:	e7fd      	b.n	80064ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80064be:	f000 fec3 	bl	8007248 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006538 <xTaskCheckForTimeOut+0xc0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d102      	bne.n	80064e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064dc:	2300      	movs	r3, #0
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	e023      	b.n	800652a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4b15      	ldr	r3, [pc, #84]	@ (800653c <xTaskCheckForTimeOut+0xc4>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d007      	beq.n	80064fe <xTaskCheckForTimeOut+0x86>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d302      	bcc.n	80064fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064f8:	2301      	movs	r3, #1
 80064fa:	61fb      	str	r3, [r7, #28]
 80064fc:	e015      	b.n	800652a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	429a      	cmp	r2, r3
 8006506:	d20b      	bcs.n	8006520 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	1ad2      	subs	r2, r2, r3
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff ff99 	bl	800644c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800651a:	2300      	movs	r3, #0
 800651c:	61fb      	str	r3, [r7, #28]
 800651e:	e004      	b.n	800652a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006526:	2301      	movs	r3, #1
 8006528:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800652a:	f000 febf 	bl	80072ac <vPortExitCritical>

	return xReturn;
 800652e:	69fb      	ldr	r3, [r7, #28]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3720      	adds	r7, #32
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20000e5c 	.word	0x20000e5c
 800653c:	20000e70 	.word	0x20000e70

08006540 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006544:	4b03      	ldr	r3, [pc, #12]	@ (8006554 <vTaskMissedYield+0x14>)
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]
}
 800654a:	bf00      	nop
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	20000e6c 	.word	0x20000e6c

08006558 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006560:	f000 f852 	bl	8006608 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006564:	4b06      	ldr	r3, [pc, #24]	@ (8006580 <prvIdleTask+0x28>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d9f9      	bls.n	8006560 <prvIdleTask+0x8>
			{
				taskYIELD();
 800656c:	4b05      	ldr	r3, [pc, #20]	@ (8006584 <prvIdleTask+0x2c>)
 800656e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800657c:	e7f0      	b.n	8006560 <prvIdleTask+0x8>
 800657e:	bf00      	nop
 8006580:	20000988 	.word	0x20000988
 8006584:	e000ed04 	.word	0xe000ed04

08006588 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800658e:	2300      	movs	r3, #0
 8006590:	607b      	str	r3, [r7, #4]
 8006592:	e00c      	b.n	80065ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4a12      	ldr	r2, [pc, #72]	@ (80065e8 <prvInitialiseTaskLists+0x60>)
 80065a0:	4413      	add	r3, r2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe fc34 	bl	8004e10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3301      	adds	r3, #1
 80065ac:	607b      	str	r3, [r7, #4]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b37      	cmp	r3, #55	@ 0x37
 80065b2:	d9ef      	bls.n	8006594 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065b4:	480d      	ldr	r0, [pc, #52]	@ (80065ec <prvInitialiseTaskLists+0x64>)
 80065b6:	f7fe fc2b 	bl	8004e10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065ba:	480d      	ldr	r0, [pc, #52]	@ (80065f0 <prvInitialiseTaskLists+0x68>)
 80065bc:	f7fe fc28 	bl	8004e10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065c0:	480c      	ldr	r0, [pc, #48]	@ (80065f4 <prvInitialiseTaskLists+0x6c>)
 80065c2:	f7fe fc25 	bl	8004e10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065c6:	480c      	ldr	r0, [pc, #48]	@ (80065f8 <prvInitialiseTaskLists+0x70>)
 80065c8:	f7fe fc22 	bl	8004e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065cc:	480b      	ldr	r0, [pc, #44]	@ (80065fc <prvInitialiseTaskLists+0x74>)
 80065ce:	f7fe fc1f 	bl	8004e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006600 <prvInitialiseTaskLists+0x78>)
 80065d4:	4a05      	ldr	r2, [pc, #20]	@ (80065ec <prvInitialiseTaskLists+0x64>)
 80065d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006604 <prvInitialiseTaskLists+0x7c>)
 80065da:	4a05      	ldr	r2, [pc, #20]	@ (80065f0 <prvInitialiseTaskLists+0x68>)
 80065dc:	601a      	str	r2, [r3, #0]
}
 80065de:	bf00      	nop
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000988 	.word	0x20000988
 80065ec:	20000de8 	.word	0x20000de8
 80065f0:	20000dfc 	.word	0x20000dfc
 80065f4:	20000e18 	.word	0x20000e18
 80065f8:	20000e2c 	.word	0x20000e2c
 80065fc:	20000e44 	.word	0x20000e44
 8006600:	20000e10 	.word	0x20000e10
 8006604:	20000e14 	.word	0x20000e14

08006608 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800660e:	e019      	b.n	8006644 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006610:	f000 fe1a 	bl	8007248 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006614:	4b10      	ldr	r3, [pc, #64]	@ (8006658 <prvCheckTasksWaitingTermination+0x50>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3304      	adds	r3, #4
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe fc7f 	bl	8004f24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006626:	4b0d      	ldr	r3, [pc, #52]	@ (800665c <prvCheckTasksWaitingTermination+0x54>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3b01      	subs	r3, #1
 800662c:	4a0b      	ldr	r2, [pc, #44]	@ (800665c <prvCheckTasksWaitingTermination+0x54>)
 800662e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006630:	4b0b      	ldr	r3, [pc, #44]	@ (8006660 <prvCheckTasksWaitingTermination+0x58>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3b01      	subs	r3, #1
 8006636:	4a0a      	ldr	r2, [pc, #40]	@ (8006660 <prvCheckTasksWaitingTermination+0x58>)
 8006638:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800663a:	f000 fe37 	bl	80072ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f810 	bl	8006664 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006644:	4b06      	ldr	r3, [pc, #24]	@ (8006660 <prvCheckTasksWaitingTermination+0x58>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e1      	bne.n	8006610 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20000e2c 	.word	0x20000e2c
 800665c:	20000e58 	.word	0x20000e58
 8006660:	20000e40 	.word	0x20000e40

08006664 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006672:	2b00      	cmp	r3, #0
 8006674:	d108      	bne.n	8006688 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667a:	4618      	mov	r0, r3
 800667c:	f000 ffd4 	bl	8007628 <vPortFree>
				vPortFree( pxTCB );
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 ffd1 	bl	8007628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006686:	e019      	b.n	80066bc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800668e:	2b01      	cmp	r3, #1
 8006690:	d103      	bne.n	800669a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 ffc8 	bl	8007628 <vPortFree>
	}
 8006698:	e010      	b.n	80066bc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d00b      	beq.n	80066bc <prvDeleteTCB+0x58>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	60fb      	str	r3, [r7, #12]
}
 80066b6:	bf00      	nop
 80066b8:	bf00      	nop
 80066ba:	e7fd      	b.n	80066b8 <prvDeleteTCB+0x54>
	}
 80066bc:	bf00      	nop
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ca:	4b0c      	ldr	r3, [pc, #48]	@ (80066fc <prvResetNextTaskUnblockTime+0x38>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006700 <prvResetNextTaskUnblockTime+0x3c>)
 80066d6:	f04f 32ff 	mov.w	r2, #4294967295
 80066da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066dc:	e008      	b.n	80066f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066de:	4b07      	ldr	r3, [pc, #28]	@ (80066fc <prvResetNextTaskUnblockTime+0x38>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	4a04      	ldr	r2, [pc, #16]	@ (8006700 <prvResetNextTaskUnblockTime+0x3c>)
 80066ee:	6013      	str	r3, [r2, #0]
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	20000e10 	.word	0x20000e10
 8006700:	20000e78 	.word	0x20000e78

08006704 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800670a:	4b0b      	ldr	r3, [pc, #44]	@ (8006738 <xTaskGetSchedulerState+0x34>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006712:	2301      	movs	r3, #1
 8006714:	607b      	str	r3, [r7, #4]
 8006716:	e008      	b.n	800672a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006718:	4b08      	ldr	r3, [pc, #32]	@ (800673c <xTaskGetSchedulerState+0x38>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006720:	2302      	movs	r3, #2
 8006722:	607b      	str	r3, [r7, #4]
 8006724:	e001      	b.n	800672a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006726:	2300      	movs	r3, #0
 8006728:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800672a:	687b      	ldr	r3, [r7, #4]
	}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	20000e64 	.word	0x20000e64
 800673c:	20000e80 	.word	0x20000e80

08006740 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d058      	beq.n	8006808 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006756:	4b2f      	ldr	r3, [pc, #188]	@ (8006814 <xTaskPriorityDisinherit+0xd4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	429a      	cmp	r2, r3
 800675e:	d00b      	beq.n	8006778 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	60fb      	str	r3, [r7, #12]
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	60bb      	str	r3, [r7, #8]
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800679c:	1e5a      	subs	r2, r3, #1
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d02c      	beq.n	8006808 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d128      	bne.n	8006808 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	3304      	adds	r3, #4
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fbb2 	bl	8004f24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006818 <xTaskPriorityDisinherit+0xd8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d903      	bls.n	80067e8 <xTaskPriorityDisinherit+0xa8>
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006818 <xTaskPriorityDisinherit+0xd8>)
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4a09      	ldr	r2, [pc, #36]	@ (800681c <xTaskPriorityDisinherit+0xdc>)
 80067f6:	441a      	add	r2, r3
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f7fe fb33 	bl	8004e6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006804:	2301      	movs	r3, #1
 8006806:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006808:	697b      	ldr	r3, [r7, #20]
	}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000984 	.word	0x20000984
 8006818:	20000e60 	.word	0x20000e60
 800681c:	20000988 	.word	0x20000988

08006820 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006826:	4b09      	ldr	r3, [pc, #36]	@ (800684c <uxTaskResetEventItemValue+0x2c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800682e:	4b07      	ldr	r3, [pc, #28]	@ (800684c <uxTaskResetEventItemValue+0x2c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006834:	4b05      	ldr	r3, [pc, #20]	@ (800684c <uxTaskResetEventItemValue+0x2c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800683c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800683e:	687b      	ldr	r3, [r7, #4]
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	20000984 	.word	0x20000984

08006850 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800685a:	4b21      	ldr	r3, [pc, #132]	@ (80068e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006860:	4b20      	ldr	r3, [pc, #128]	@ (80068e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3304      	adds	r3, #4
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe fb5c 	bl	8004f24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006872:	d10a      	bne.n	800688a <prvAddCurrentTaskToDelayedList+0x3a>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800687a:	4b1a      	ldr	r3, [pc, #104]	@ (80068e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3304      	adds	r3, #4
 8006880:	4619      	mov	r1, r3
 8006882:	4819      	ldr	r0, [pc, #100]	@ (80068e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006884:	f7fe faf1 	bl	8004e6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006888:	e026      	b.n	80068d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4413      	add	r3, r2
 8006890:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006892:	4b14      	ldr	r3, [pc, #80]	@ (80068e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d209      	bcs.n	80068b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068a2:	4b12      	ldr	r3, [pc, #72]	@ (80068ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4b0f      	ldr	r3, [pc, #60]	@ (80068e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7fe faff 	bl	8004eb2 <vListInsert>
}
 80068b4:	e010      	b.n	80068d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068b6:	4b0e      	ldr	r3, [pc, #56]	@ (80068f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b0a      	ldr	r3, [pc, #40]	@ (80068e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3304      	adds	r3, #4
 80068c0:	4619      	mov	r1, r3
 80068c2:	4610      	mov	r0, r2
 80068c4:	f7fe faf5 	bl	8004eb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068c8:	4b0a      	ldr	r3, [pc, #40]	@ (80068f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d202      	bcs.n	80068d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068d2:	4a08      	ldr	r2, [pc, #32]	@ (80068f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	6013      	str	r3, [r2, #0]
}
 80068d8:	bf00      	nop
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	20000e5c 	.word	0x20000e5c
 80068e4:	20000984 	.word	0x20000984
 80068e8:	20000e44 	.word	0x20000e44
 80068ec:	20000e14 	.word	0x20000e14
 80068f0:	20000e10 	.word	0x20000e10
 80068f4:	20000e78 	.word	0x20000e78

080068f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	@ 0x28
 80068fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068fe:	2300      	movs	r3, #0
 8006900:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006902:	f000 fb13 	bl	8006f2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006906:	4b1d      	ldr	r3, [pc, #116]	@ (800697c <xTimerCreateTimerTask+0x84>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d021      	beq.n	8006952 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800690e:	2300      	movs	r3, #0
 8006910:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006912:	2300      	movs	r3, #0
 8006914:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006916:	1d3a      	adds	r2, r7, #4
 8006918:	f107 0108 	add.w	r1, r7, #8
 800691c:	f107 030c 	add.w	r3, r7, #12
 8006920:	4618      	mov	r0, r3
 8006922:	f7fe f865 	bl	80049f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	9202      	str	r2, [sp, #8]
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	2302      	movs	r3, #2
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	2300      	movs	r3, #0
 8006936:	460a      	mov	r2, r1
 8006938:	4911      	ldr	r1, [pc, #68]	@ (8006980 <xTimerCreateTimerTask+0x88>)
 800693a:	4812      	ldr	r0, [pc, #72]	@ (8006984 <xTimerCreateTimerTask+0x8c>)
 800693c:	f7ff f816 	bl	800596c <xTaskCreateStatic>
 8006940:	4603      	mov	r3, r0
 8006942:	4a11      	ldr	r2, [pc, #68]	@ (8006988 <xTimerCreateTimerTask+0x90>)
 8006944:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006946:	4b10      	ldr	r3, [pc, #64]	@ (8006988 <xTimerCreateTimerTask+0x90>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800694e:	2301      	movs	r3, #1
 8006950:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10b      	bne.n	8006970 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	613b      	str	r3, [r7, #16]
}
 800696a:	bf00      	nop
 800696c:	bf00      	nop
 800696e:	e7fd      	b.n	800696c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006970:	697b      	ldr	r3, [r7, #20]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	20000eb4 	.word	0x20000eb4
 8006980:	08008fa0 	.word	0x08008fa0
 8006984:	08006ac5 	.word	0x08006ac5
 8006988:	20000eb8 	.word	0x20000eb8

0800698c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	@ 0x28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800699a:	2300      	movs	r3, #0
 800699c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10b      	bne.n	80069bc <xTimerGenericCommand+0x30>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	623b      	str	r3, [r7, #32]
}
 80069b6:	bf00      	nop
 80069b8:	bf00      	nop
 80069ba:	e7fd      	b.n	80069b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069bc:	4b19      	ldr	r3, [pc, #100]	@ (8006a24 <xTimerGenericCommand+0x98>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d02a      	beq.n	8006a1a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b05      	cmp	r3, #5
 80069d4:	dc18      	bgt.n	8006a08 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069d6:	f7ff fe95 	bl	8006704 <xTaskGetSchedulerState>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d109      	bne.n	80069f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069e0:	4b10      	ldr	r3, [pc, #64]	@ (8006a24 <xTimerGenericCommand+0x98>)
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	f107 0110 	add.w	r1, r7, #16
 80069e8:	2300      	movs	r3, #0
 80069ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ec:	f7fe fbce 	bl	800518c <xQueueGenericSend>
 80069f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80069f2:	e012      	b.n	8006a1a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a24 <xTimerGenericCommand+0x98>)
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	f107 0110 	add.w	r1, r7, #16
 80069fc:	2300      	movs	r3, #0
 80069fe:	2200      	movs	r2, #0
 8006a00:	f7fe fbc4 	bl	800518c <xQueueGenericSend>
 8006a04:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a06:	e008      	b.n	8006a1a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a08:	4b06      	ldr	r3, [pc, #24]	@ (8006a24 <xTimerGenericCommand+0x98>)
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	f107 0110 	add.w	r1, r7, #16
 8006a10:	2300      	movs	r3, #0
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	f7fe fcbc 	bl	8005390 <xQueueGenericSendFromISR>
 8006a18:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3728      	adds	r7, #40	@ 0x28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20000eb4 	.word	0x20000eb4

08006a28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af02      	add	r7, sp, #8
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a32:	4b23      	ldr	r3, [pc, #140]	@ (8006ac0 <prvProcessExpiredTimer+0x98>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fe fa6f 	bl	8004f24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d023      	beq.n	8006a9c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	699a      	ldr	r2, [r3, #24]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	18d1      	adds	r1, r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	6978      	ldr	r0, [r7, #20]
 8006a62:	f000 f8d5 	bl	8006c10 <prvInsertTimerInActiveList>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d020      	beq.n	8006aae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	2300      	movs	r3, #0
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	2100      	movs	r1, #0
 8006a76:	6978      	ldr	r0, [r7, #20]
 8006a78:	f7ff ff88 	bl	800698c <xTimerGenericCommand>
 8006a7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d114      	bne.n	8006aae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	60fb      	str	r3, [r7, #12]
}
 8006a96:	bf00      	nop
 8006a98:	bf00      	nop
 8006a9a:	e7fd      	b.n	8006a98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006aa2:	f023 0301 	bic.w	r3, r3, #1
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	6978      	ldr	r0, [r7, #20]
 8006ab4:	4798      	blx	r3
}
 8006ab6:	bf00      	nop
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20000eac 	.word	0x20000eac

08006ac4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006acc:	f107 0308 	add.w	r3, r7, #8
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 f859 	bl	8006b88 <prvGetNextExpireTime>
 8006ad6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	4619      	mov	r1, r3
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f805 	bl	8006aec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ae2:	f000 f8d7 	bl	8006c94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ae6:	bf00      	nop
 8006ae8:	e7f0      	b.n	8006acc <prvTimerTask+0x8>
	...

08006aec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006af6:	f7ff f97d 	bl	8005df4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006afa:	f107 0308 	add.w	r3, r7, #8
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 f866 	bl	8006bd0 <prvSampleTimeNow>
 8006b04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d130      	bne.n	8006b6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <prvProcessTimerOrBlockTask+0x3c>
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d806      	bhi.n	8006b28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b1a:	f7ff f979 	bl	8005e10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b1e:	68f9      	ldr	r1, [r7, #12]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff ff81 	bl	8006a28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b26:	e024      	b.n	8006b72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d008      	beq.n	8006b40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b2e:	4b13      	ldr	r3, [pc, #76]	@ (8006b7c <prvProcessTimerOrBlockTask+0x90>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <prvProcessTimerOrBlockTask+0x50>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e000      	b.n	8006b3e <prvProcessTimerOrBlockTask+0x52>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b40:	4b0f      	ldr	r3, [pc, #60]	@ (8006b80 <prvProcessTimerOrBlockTask+0x94>)
 8006b42:	6818      	ldr	r0, [r3, #0]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	f7fe fed9 	bl	8005904 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b52:	f7ff f95d 	bl	8005e10 <xTaskResumeAll>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b5c:	4b09      	ldr	r3, [pc, #36]	@ (8006b84 <prvProcessTimerOrBlockTask+0x98>)
 8006b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	f3bf 8f6f 	isb	sy
}
 8006b6c:	e001      	b.n	8006b72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b6e:	f7ff f94f 	bl	8005e10 <xTaskResumeAll>
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000eb0 	.word	0x20000eb0
 8006b80:	20000eb4 	.word	0x20000eb4
 8006b84:	e000ed04 	.word	0xe000ed04

08006b88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b90:	4b0e      	ldr	r3, [pc, #56]	@ (8006bcc <prvGetNextExpireTime+0x44>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <prvGetNextExpireTime+0x16>
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	e000      	b.n	8006ba0 <prvGetNextExpireTime+0x18>
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d105      	bne.n	8006bb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bac:	4b07      	ldr	r3, [pc, #28]	@ (8006bcc <prvGetNextExpireTime+0x44>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	e001      	b.n	8006bbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	20000eac 	.word	0x20000eac

08006bd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006bd8:	f7ff f9b8 	bl	8005f4c <xTaskGetTickCount>
 8006bdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006bde:	4b0b      	ldr	r3, [pc, #44]	@ (8006c0c <prvSampleTimeNow+0x3c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d205      	bcs.n	8006bf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006be8:	f000 f93a 	bl	8006e60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e002      	b.n	8006bfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006bfa:	4a04      	ldr	r2, [pc, #16]	@ (8006c0c <prvSampleTimeNow+0x3c>)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c00:	68fb      	ldr	r3, [r7, #12]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000ebc 	.word	0x20000ebc

08006c10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d812      	bhi.n	8006c5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	1ad2      	subs	r2, r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d302      	bcc.n	8006c4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c44:	2301      	movs	r3, #1
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	e01b      	b.n	8006c82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c4a:	4b10      	ldr	r3, [pc, #64]	@ (8006c8c <prvInsertTimerInActiveList+0x7c>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3304      	adds	r3, #4
 8006c52:	4619      	mov	r1, r3
 8006c54:	4610      	mov	r0, r2
 8006c56:	f7fe f92c 	bl	8004eb2 <vListInsert>
 8006c5a:	e012      	b.n	8006c82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d206      	bcs.n	8006c72 <prvInsertTimerInActiveList+0x62>
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d302      	bcc.n	8006c72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	e007      	b.n	8006c82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c72:	4b07      	ldr	r3, [pc, #28]	@ (8006c90 <prvInsertTimerInActiveList+0x80>)
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	f7fe f918 	bl	8004eb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c82:	697b      	ldr	r3, [r7, #20]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	20000eb0 	.word	0x20000eb0
 8006c90:	20000eac 	.word	0x20000eac

08006c94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08e      	sub	sp, #56	@ 0x38
 8006c98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c9a:	e0ce      	b.n	8006e3a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	da19      	bge.n	8006cd6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ca2:	1d3b      	adds	r3, r7, #4
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10b      	bne.n	8006cc6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	61fb      	str	r3, [r7, #28]
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	e7fd      	b.n	8006cc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ccc:	6850      	ldr	r0, [r2, #4]
 8006cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd0:	6892      	ldr	r2, [r2, #8]
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f2c0 80ae 	blt.w	8006e3a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d004      	beq.n	8006cf4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	3304      	adds	r3, #4
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe f918 	bl	8004f24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cf4:	463b      	mov	r3, r7
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff ff6a 	bl	8006bd0 <prvSampleTimeNow>
 8006cfc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b09      	cmp	r3, #9
 8006d02:	f200 8097 	bhi.w	8006e34 <prvProcessReceivedCommands+0x1a0>
 8006d06:	a201      	add	r2, pc, #4	@ (adr r2, 8006d0c <prvProcessReceivedCommands+0x78>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d35 	.word	0x08006d35
 8006d10:	08006d35 	.word	0x08006d35
 8006d14:	08006d35 	.word	0x08006d35
 8006d18:	08006dab 	.word	0x08006dab
 8006d1c:	08006dbf 	.word	0x08006dbf
 8006d20:	08006e0b 	.word	0x08006e0b
 8006d24:	08006d35 	.word	0x08006d35
 8006d28:	08006d35 	.word	0x08006d35
 8006d2c:	08006dab 	.word	0x08006dab
 8006d30:	08006dbf 	.word	0x08006dbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d3a:	f043 0301 	orr.w	r3, r3, #1
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	18d1      	adds	r1, r2, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d54:	f7ff ff5c 	bl	8006c10 <prvInsertTimerInActiveList>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d06c      	beq.n	8006e38 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d061      	beq.n	8006e38 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	441a      	add	r2, r3
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	2300      	movs	r3, #0
 8006d82:	2100      	movs	r1, #0
 8006d84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d86:	f7ff fe01 	bl	800698c <xTimerGenericCommand>
 8006d8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d152      	bne.n	8006e38 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	61bb      	str	r3, [r7, #24]
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	e7fd      	b.n	8006da6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006db0:	f023 0301 	bic.w	r3, r3, #1
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006dbc:	e03d      	b.n	8006e3a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dc4:	f043 0301 	orr.w	r3, r3, #1
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10b      	bne.n	8006df6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	617b      	str	r3, [r7, #20]
}
 8006df0:	bf00      	nop
 8006df2:	bf00      	nop
 8006df4:	e7fd      	b.n	8006df2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df8:	699a      	ldr	r2, [r3, #24]
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfc:	18d1      	adds	r1, r2, r3
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e04:	f7ff ff04 	bl	8006c10 <prvInsertTimerInActiveList>
					break;
 8006e08:	e017      	b.n	8006e3a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d103      	bne.n	8006e20 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006e18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e1a:	f000 fc05 	bl	8007628 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e1e:	e00c      	b.n	8006e3a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e26:	f023 0301 	bic.w	r3, r3, #1
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e32:	e002      	b.n	8006e3a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006e34:	bf00      	nop
 8006e36:	e000      	b.n	8006e3a <prvProcessReceivedCommands+0x1a6>
					break;
 8006e38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e3a:	4b08      	ldr	r3, [pc, #32]	@ (8006e5c <prvProcessReceivedCommands+0x1c8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	1d39      	adds	r1, r7, #4
 8006e40:	2200      	movs	r2, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fe fb42 	bl	80054cc <xQueueReceive>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f47f af26 	bne.w	8006c9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	3730      	adds	r7, #48	@ 0x30
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000eb4 	.word	0x20000eb4

08006e60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e66:	e049      	b.n	8006efc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e68:	4b2e      	ldr	r3, [pc, #184]	@ (8006f24 <prvSwitchTimerLists+0xc4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e72:	4b2c      	ldr	r3, [pc, #176]	@ (8006f24 <prvSwitchTimerLists+0xc4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe f84f 	bl	8004f24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d02f      	beq.n	8006efc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d90e      	bls.n	8006ecc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006eba:	4b1a      	ldr	r3, [pc, #104]	@ (8006f24 <prvSwitchTimerLists+0xc4>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f7fd fff4 	bl	8004eb2 <vListInsert>
 8006eca:	e017      	b.n	8006efc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ecc:	2300      	movs	r3, #0
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff fd58 	bl	800698c <xTimerGenericCommand>
 8006edc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10b      	bne.n	8006efc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	603b      	str	r3, [r7, #0]
}
 8006ef6:	bf00      	nop
 8006ef8:	bf00      	nop
 8006efa:	e7fd      	b.n	8006ef8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006efc:	4b09      	ldr	r3, [pc, #36]	@ (8006f24 <prvSwitchTimerLists+0xc4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1b0      	bne.n	8006e68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f06:	4b07      	ldr	r3, [pc, #28]	@ (8006f24 <prvSwitchTimerLists+0xc4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f0c:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <prvSwitchTimerLists+0xc8>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a04      	ldr	r2, [pc, #16]	@ (8006f24 <prvSwitchTimerLists+0xc4>)
 8006f12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f14:	4a04      	ldr	r2, [pc, #16]	@ (8006f28 <prvSwitchTimerLists+0xc8>)
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	6013      	str	r3, [r2, #0]
}
 8006f1a:	bf00      	nop
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000eac 	.word	0x20000eac
 8006f28:	20000eb0 	.word	0x20000eb0

08006f2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f32:	f000 f989 	bl	8007248 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f36:	4b15      	ldr	r3, [pc, #84]	@ (8006f8c <prvCheckForValidListAndQueue+0x60>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d120      	bne.n	8006f80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f3e:	4814      	ldr	r0, [pc, #80]	@ (8006f90 <prvCheckForValidListAndQueue+0x64>)
 8006f40:	f7fd ff66 	bl	8004e10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f44:	4813      	ldr	r0, [pc, #76]	@ (8006f94 <prvCheckForValidListAndQueue+0x68>)
 8006f46:	f7fd ff63 	bl	8004e10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f4a:	4b13      	ldr	r3, [pc, #76]	@ (8006f98 <prvCheckForValidListAndQueue+0x6c>)
 8006f4c:	4a10      	ldr	r2, [pc, #64]	@ (8006f90 <prvCheckForValidListAndQueue+0x64>)
 8006f4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f50:	4b12      	ldr	r3, [pc, #72]	@ (8006f9c <prvCheckForValidListAndQueue+0x70>)
 8006f52:	4a10      	ldr	r2, [pc, #64]	@ (8006f94 <prvCheckForValidListAndQueue+0x68>)
 8006f54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f56:	2300      	movs	r3, #0
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	4b11      	ldr	r3, [pc, #68]	@ (8006fa0 <prvCheckForValidListAndQueue+0x74>)
 8006f5c:	4a11      	ldr	r2, [pc, #68]	@ (8006fa4 <prvCheckForValidListAndQueue+0x78>)
 8006f5e:	2110      	movs	r1, #16
 8006f60:	200a      	movs	r0, #10
 8006f62:	f7fe f873 	bl	800504c <xQueueGenericCreateStatic>
 8006f66:	4603      	mov	r3, r0
 8006f68:	4a08      	ldr	r2, [pc, #32]	@ (8006f8c <prvCheckForValidListAndQueue+0x60>)
 8006f6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f6c:	4b07      	ldr	r3, [pc, #28]	@ (8006f8c <prvCheckForValidListAndQueue+0x60>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f74:	4b05      	ldr	r3, [pc, #20]	@ (8006f8c <prvCheckForValidListAndQueue+0x60>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	490b      	ldr	r1, [pc, #44]	@ (8006fa8 <prvCheckForValidListAndQueue+0x7c>)
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe fc98 	bl	80058b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f80:	f000 f994 	bl	80072ac <vPortExitCritical>
}
 8006f84:	bf00      	nop
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20000eb4 	.word	0x20000eb4
 8006f90:	20000e84 	.word	0x20000e84
 8006f94:	20000e98 	.word	0x20000e98
 8006f98:	20000eac 	.word	0x20000eac
 8006f9c:	20000eb0 	.word	0x20000eb0
 8006fa0:	20000f60 	.word	0x20000f60
 8006fa4:	20000ec0 	.word	0x20000ec0
 8006fa8:	08008fa8 	.word	0x08008fa8

08006fac <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	@ 0x28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006fba:	f06f 0301 	mvn.w	r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006fcc:	4b06      	ldr	r3, [pc, #24]	@ (8006fe8 <xTimerPendFunctionCallFromISR+0x3c>)
 8006fce:	6818      	ldr	r0, [r3, #0]
 8006fd0:	f107 0114 	add.w	r1, r7, #20
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	f7fe f9da 	bl	8005390 <xQueueGenericSendFromISR>
 8006fdc:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3728      	adds	r7, #40	@ 0x28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20000eb4 	.word	0x20000eb4

08006fec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3b04      	subs	r3, #4
 8006ffc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3b04      	subs	r3, #4
 800700a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f023 0201 	bic.w	r2, r3, #1
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3b04      	subs	r3, #4
 800701a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800701c:	4a0c      	ldr	r2, [pc, #48]	@ (8007050 <pxPortInitialiseStack+0x64>)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3b14      	subs	r3, #20
 8007026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3b04      	subs	r3, #4
 8007032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f06f 0202 	mvn.w	r2, #2
 800703a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3b20      	subs	r3, #32
 8007040:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007042:	68fb      	ldr	r3, [r7, #12]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	08007055 	.word	0x08007055

08007054 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800705e:	4b13      	ldr	r3, [pc, #76]	@ (80070ac <prvTaskExitError+0x58>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007066:	d00b      	beq.n	8007080 <prvTaskExitError+0x2c>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	60fb      	str	r3, [r7, #12]
}
 800707a:	bf00      	nop
 800707c:	bf00      	nop
 800707e:	e7fd      	b.n	800707c <prvTaskExitError+0x28>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	60bb      	str	r3, [r7, #8]
}
 8007092:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007094:	bf00      	nop
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0fc      	beq.n	8007096 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	2000003c 	.word	0x2000003c

080070b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070b0:	4b07      	ldr	r3, [pc, #28]	@ (80070d0 <pxCurrentTCBConst2>)
 80070b2:	6819      	ldr	r1, [r3, #0]
 80070b4:	6808      	ldr	r0, [r1, #0]
 80070b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ba:	f380 8809 	msr	PSP, r0
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f04f 0000 	mov.w	r0, #0
 80070c6:	f380 8811 	msr	BASEPRI, r0
 80070ca:	4770      	bx	lr
 80070cc:	f3af 8000 	nop.w

080070d0 <pxCurrentTCBConst2>:
 80070d0:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop

080070d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070d8:	4808      	ldr	r0, [pc, #32]	@ (80070fc <prvPortStartFirstTask+0x24>)
 80070da:	6800      	ldr	r0, [r0, #0]
 80070dc:	6800      	ldr	r0, [r0, #0]
 80070de:	f380 8808 	msr	MSP, r0
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f380 8814 	msr	CONTROL, r0
 80070ea:	b662      	cpsie	i
 80070ec:	b661      	cpsie	f
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	df00      	svc	0
 80070f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070fa:	bf00      	nop
 80070fc:	e000ed08 	.word	0xe000ed08

08007100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007106:	4b47      	ldr	r3, [pc, #284]	@ (8007224 <xPortStartScheduler+0x124>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a47      	ldr	r2, [pc, #284]	@ (8007228 <xPortStartScheduler+0x128>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d10b      	bne.n	8007128 <xPortStartScheduler+0x28>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	60fb      	str	r3, [r7, #12]
}
 8007122:	bf00      	nop
 8007124:	bf00      	nop
 8007126:	e7fd      	b.n	8007124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007128:	4b3e      	ldr	r3, [pc, #248]	@ (8007224 <xPortStartScheduler+0x124>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a3f      	ldr	r2, [pc, #252]	@ (800722c <xPortStartScheduler+0x12c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d10b      	bne.n	800714a <xPortStartScheduler+0x4a>
	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	613b      	str	r3, [r7, #16]
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop
 8007148:	e7fd      	b.n	8007146 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800714a:	4b39      	ldr	r3, [pc, #228]	@ (8007230 <xPortStartScheduler+0x130>)
 800714c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	22ff      	movs	r2, #255	@ 0xff
 800715a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800716c:	b2da      	uxtb	r2, r3
 800716e:	4b31      	ldr	r3, [pc, #196]	@ (8007234 <xPortStartScheduler+0x134>)
 8007170:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007172:	4b31      	ldr	r3, [pc, #196]	@ (8007238 <xPortStartScheduler+0x138>)
 8007174:	2207      	movs	r2, #7
 8007176:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007178:	e009      	b.n	800718e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800717a:	4b2f      	ldr	r3, [pc, #188]	@ (8007238 <xPortStartScheduler+0x138>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3b01      	subs	r3, #1
 8007180:	4a2d      	ldr	r2, [pc, #180]	@ (8007238 <xPortStartScheduler+0x138>)
 8007182:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	b2db      	uxtb	r3, r3
 800718c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007196:	2b80      	cmp	r3, #128	@ 0x80
 8007198:	d0ef      	beq.n	800717a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800719a:	4b27      	ldr	r3, [pc, #156]	@ (8007238 <xPortStartScheduler+0x138>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f1c3 0307 	rsb	r3, r3, #7
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d00b      	beq.n	80071be <xPortStartScheduler+0xbe>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	60bb      	str	r3, [r7, #8]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071be:	4b1e      	ldr	r3, [pc, #120]	@ (8007238 <xPortStartScheduler+0x138>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007238 <xPortStartScheduler+0x138>)
 80071c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007238 <xPortStartScheduler+0x138>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071d0:	4a19      	ldr	r2, [pc, #100]	@ (8007238 <xPortStartScheduler+0x138>)
 80071d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071dc:	4b17      	ldr	r3, [pc, #92]	@ (800723c <xPortStartScheduler+0x13c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a16      	ldr	r2, [pc, #88]	@ (800723c <xPortStartScheduler+0x13c>)
 80071e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071e8:	4b14      	ldr	r3, [pc, #80]	@ (800723c <xPortStartScheduler+0x13c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a13      	ldr	r2, [pc, #76]	@ (800723c <xPortStartScheduler+0x13c>)
 80071ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80071f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071f4:	f000 f8da 	bl	80073ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071f8:	4b11      	ldr	r3, [pc, #68]	@ (8007240 <xPortStartScheduler+0x140>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071fe:	f000 f8f9 	bl	80073f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007202:	4b10      	ldr	r3, [pc, #64]	@ (8007244 <xPortStartScheduler+0x144>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a0f      	ldr	r2, [pc, #60]	@ (8007244 <xPortStartScheduler+0x144>)
 8007208:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800720c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800720e:	f7ff ff63 	bl	80070d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007212:	f7fe ff65 	bl	80060e0 <vTaskSwitchContext>
	prvTaskExitError();
 8007216:	f7ff ff1d 	bl	8007054 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	e000ed00 	.word	0xe000ed00
 8007228:	410fc271 	.word	0x410fc271
 800722c:	410fc270 	.word	0x410fc270
 8007230:	e000e400 	.word	0xe000e400
 8007234:	20000fb0 	.word	0x20000fb0
 8007238:	20000fb4 	.word	0x20000fb4
 800723c:	e000ed20 	.word	0xe000ed20
 8007240:	2000003c 	.word	0x2000003c
 8007244:	e000ef34 	.word	0xe000ef34

08007248 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	607b      	str	r3, [r7, #4]
}
 8007260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007262:	4b10      	ldr	r3, [pc, #64]	@ (80072a4 <vPortEnterCritical+0x5c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3301      	adds	r3, #1
 8007268:	4a0e      	ldr	r2, [pc, #56]	@ (80072a4 <vPortEnterCritical+0x5c>)
 800726a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800726c:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <vPortEnterCritical+0x5c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d110      	bne.n	8007296 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007274:	4b0c      	ldr	r3, [pc, #48]	@ (80072a8 <vPortEnterCritical+0x60>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00b      	beq.n	8007296 <vPortEnterCritical+0x4e>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	603b      	str	r3, [r7, #0]
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	e7fd      	b.n	8007292 <vPortEnterCritical+0x4a>
	}
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	2000003c 	.word	0x2000003c
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072b2:	4b12      	ldr	r3, [pc, #72]	@ (80072fc <vPortExitCritical+0x50>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10b      	bne.n	80072d2 <vPortExitCritical+0x26>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	607b      	str	r3, [r7, #4]
}
 80072cc:	bf00      	nop
 80072ce:	bf00      	nop
 80072d0:	e7fd      	b.n	80072ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072d2:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <vPortExitCritical+0x50>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	4a08      	ldr	r2, [pc, #32]	@ (80072fc <vPortExitCritical+0x50>)
 80072da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072dc:	4b07      	ldr	r3, [pc, #28]	@ (80072fc <vPortExitCritical+0x50>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d105      	bne.n	80072f0 <vPortExitCritical+0x44>
 80072e4:	2300      	movs	r3, #0
 80072e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f383 8811 	msr	BASEPRI, r3
}
 80072ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	2000003c 	.word	0x2000003c

08007300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007300:	f3ef 8009 	mrs	r0, PSP
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	4b15      	ldr	r3, [pc, #84]	@ (8007360 <pxCurrentTCBConst>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	f01e 0f10 	tst.w	lr, #16
 8007310:	bf08      	it	eq
 8007312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731a:	6010      	str	r0, [r2, #0]
 800731c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007320:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007324:	f380 8811 	msr	BASEPRI, r0
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f7fe fed6 	bl	80060e0 <vTaskSwitchContext>
 8007334:	f04f 0000 	mov.w	r0, #0
 8007338:	f380 8811 	msr	BASEPRI, r0
 800733c:	bc09      	pop	{r0, r3}
 800733e:	6819      	ldr	r1, [r3, #0]
 8007340:	6808      	ldr	r0, [r1, #0]
 8007342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007346:	f01e 0f10 	tst.w	lr, #16
 800734a:	bf08      	it	eq
 800734c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007350:	f380 8809 	msr	PSP, r0
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	f3af 8000 	nop.w

08007360 <pxCurrentTCBConst>:
 8007360:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop

08007368 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	607b      	str	r3, [r7, #4]
}
 8007380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007382:	f7fe fdf3 	bl	8005f6c <xTaskIncrementTick>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800738c:	4b06      	ldr	r3, [pc, #24]	@ (80073a8 <xPortSysTickHandler+0x40>)
 800738e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	2300      	movs	r3, #0
 8007396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f383 8811 	msr	BASEPRI, r3
}
 800739e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073b0:	4b0b      	ldr	r3, [pc, #44]	@ (80073e0 <vPortSetupTimerInterrupt+0x34>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073b6:	4b0b      	ldr	r3, [pc, #44]	@ (80073e4 <vPortSetupTimerInterrupt+0x38>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073bc:	4b0a      	ldr	r3, [pc, #40]	@ (80073e8 <vPortSetupTimerInterrupt+0x3c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a0a      	ldr	r2, [pc, #40]	@ (80073ec <vPortSetupTimerInterrupt+0x40>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	099b      	lsrs	r3, r3, #6
 80073c8:	4a09      	ldr	r2, [pc, #36]	@ (80073f0 <vPortSetupTimerInterrupt+0x44>)
 80073ca:	3b01      	subs	r3, #1
 80073cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073ce:	4b04      	ldr	r3, [pc, #16]	@ (80073e0 <vPortSetupTimerInterrupt+0x34>)
 80073d0:	2207      	movs	r2, #7
 80073d2:	601a      	str	r2, [r3, #0]
}
 80073d4:	bf00      	nop
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	e000e010 	.word	0xe000e010
 80073e4:	e000e018 	.word	0xe000e018
 80073e8:	20000030 	.word	0x20000030
 80073ec:	10624dd3 	.word	0x10624dd3
 80073f0:	e000e014 	.word	0xe000e014

080073f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007404 <vPortEnableVFP+0x10>
 80073f8:	6801      	ldr	r1, [r0, #0]
 80073fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80073fe:	6001      	str	r1, [r0, #0]
 8007400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007402:	bf00      	nop
 8007404:	e000ed88 	.word	0xe000ed88

08007408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800740e:	f3ef 8305 	mrs	r3, IPSR
 8007412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b0f      	cmp	r3, #15
 8007418:	d915      	bls.n	8007446 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800741a:	4a18      	ldr	r2, [pc, #96]	@ (800747c <vPortValidateInterruptPriority+0x74>)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007424:	4b16      	ldr	r3, [pc, #88]	@ (8007480 <vPortValidateInterruptPriority+0x78>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	7afa      	ldrb	r2, [r7, #11]
 800742a:	429a      	cmp	r2, r3
 800742c:	d20b      	bcs.n	8007446 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	607b      	str	r3, [r7, #4]
}
 8007440:	bf00      	nop
 8007442:	bf00      	nop
 8007444:	e7fd      	b.n	8007442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007446:	4b0f      	ldr	r3, [pc, #60]	@ (8007484 <vPortValidateInterruptPriority+0x7c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800744e:	4b0e      	ldr	r3, [pc, #56]	@ (8007488 <vPortValidateInterruptPriority+0x80>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d90b      	bls.n	800746e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	603b      	str	r3, [r7, #0]
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	e7fd      	b.n	800746a <vPortValidateInterruptPriority+0x62>
	}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	e000e3f0 	.word	0xe000e3f0
 8007480:	20000fb0 	.word	0x20000fb0
 8007484:	e000ed0c 	.word	0xe000ed0c
 8007488:	20000fb4 	.word	0x20000fb4

0800748c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	@ 0x28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007494:	2300      	movs	r3, #0
 8007496:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007498:	f7fe fcac 	bl	8005df4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800749c:	4b5c      	ldr	r3, [pc, #368]	@ (8007610 <pvPortMalloc+0x184>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074a4:	f000 f930 	bl	8007708 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007614 <pvPortMalloc+0x188>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f040 8095 	bne.w	80075e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01e      	beq.n	80074fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80074bc:	2208      	movs	r2, #8
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4413      	add	r3, r2
 80074c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d015      	beq.n	80074fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f023 0307 	bic.w	r3, r3, #7
 80074d4:	3308      	adds	r3, #8
 80074d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00b      	beq.n	80074fa <pvPortMalloc+0x6e>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	617b      	str	r3, [r7, #20]
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop
 80074f8:	e7fd      	b.n	80074f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d06f      	beq.n	80075e0 <pvPortMalloc+0x154>
 8007500:	4b45      	ldr	r3, [pc, #276]	@ (8007618 <pvPortMalloc+0x18c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	429a      	cmp	r2, r3
 8007508:	d86a      	bhi.n	80075e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800750a:	4b44      	ldr	r3, [pc, #272]	@ (800761c <pvPortMalloc+0x190>)
 800750c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800750e:	4b43      	ldr	r3, [pc, #268]	@ (800761c <pvPortMalloc+0x190>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007514:	e004      	b.n	8007520 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	429a      	cmp	r2, r3
 8007528:	d903      	bls.n	8007532 <pvPortMalloc+0xa6>
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f1      	bne.n	8007516 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007532:	4b37      	ldr	r3, [pc, #220]	@ (8007610 <pvPortMalloc+0x184>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007538:	429a      	cmp	r2, r3
 800753a:	d051      	beq.n	80075e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2208      	movs	r2, #8
 8007542:	4413      	add	r3, r2
 8007544:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	1ad2      	subs	r2, r2, r3
 8007556:	2308      	movs	r3, #8
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	429a      	cmp	r2, r3
 800755c:	d920      	bls.n	80075a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800755e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4413      	add	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <pvPortMalloc+0xfc>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	613b      	str	r3, [r7, #16]
}
 8007582:	bf00      	nop
 8007584:	bf00      	nop
 8007586:	e7fd      	b.n	8007584 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	1ad2      	subs	r2, r2, r3
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800759a:	69b8      	ldr	r0, [r7, #24]
 800759c:	f000 f916 	bl	80077cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007618 <pvPortMalloc+0x18c>)
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007618 <pvPortMalloc+0x18c>)
 80075ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007618 <pvPortMalloc+0x18c>)
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007620 <pvPortMalloc+0x194>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d203      	bcs.n	80075c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075ba:	4b17      	ldr	r3, [pc, #92]	@ (8007618 <pvPortMalloc+0x18c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a18      	ldr	r2, [pc, #96]	@ (8007620 <pvPortMalloc+0x194>)
 80075c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	4b13      	ldr	r3, [pc, #76]	@ (8007614 <pvPortMalloc+0x188>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	431a      	orrs	r2, r3
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80075d6:	4b13      	ldr	r3, [pc, #76]	@ (8007624 <pvPortMalloc+0x198>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3301      	adds	r3, #1
 80075dc:	4a11      	ldr	r2, [pc, #68]	@ (8007624 <pvPortMalloc+0x198>)
 80075de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075e0:	f7fe fc16 	bl	8005e10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00b      	beq.n	8007606 <pvPortMalloc+0x17a>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	60fb      	str	r3, [r7, #12]
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	e7fd      	b.n	8007602 <pvPortMalloc+0x176>
	return pvReturn;
 8007606:	69fb      	ldr	r3, [r7, #28]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3728      	adds	r7, #40	@ 0x28
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	20004bc0 	.word	0x20004bc0
 8007614:	20004bd4 	.word	0x20004bd4
 8007618:	20004bc4 	.word	0x20004bc4
 800761c:	20004bb8 	.word	0x20004bb8
 8007620:	20004bc8 	.word	0x20004bc8
 8007624:	20004bcc 	.word	0x20004bcc

08007628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d04f      	beq.n	80076da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800763a:	2308      	movs	r3, #8
 800763c:	425b      	negs	r3, r3
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	4413      	add	r3, r2
 8007642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	4b25      	ldr	r3, [pc, #148]	@ (80076e4 <vPortFree+0xbc>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4013      	ands	r3, r2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <vPortFree+0x46>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	60fb      	str	r3, [r7, #12]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00b      	beq.n	800768e <vPortFree+0x66>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	60bb      	str	r3, [r7, #8]
}
 8007688:	bf00      	nop
 800768a:	bf00      	nop
 800768c:	e7fd      	b.n	800768a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	4b14      	ldr	r3, [pc, #80]	@ (80076e4 <vPortFree+0xbc>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4013      	ands	r3, r2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01e      	beq.n	80076da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d11a      	bne.n	80076da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	4b0e      	ldr	r3, [pc, #56]	@ (80076e4 <vPortFree+0xbc>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	43db      	mvns	r3, r3
 80076ae:	401a      	ands	r2, r3
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076b4:	f7fe fb9e 	bl	8005df4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	4b0a      	ldr	r3, [pc, #40]	@ (80076e8 <vPortFree+0xc0>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4413      	add	r3, r2
 80076c2:	4a09      	ldr	r2, [pc, #36]	@ (80076e8 <vPortFree+0xc0>)
 80076c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076c6:	6938      	ldr	r0, [r7, #16]
 80076c8:	f000 f880 	bl	80077cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80076cc:	4b07      	ldr	r3, [pc, #28]	@ (80076ec <vPortFree+0xc4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3301      	adds	r3, #1
 80076d2:	4a06      	ldr	r2, [pc, #24]	@ (80076ec <vPortFree+0xc4>)
 80076d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80076d6:	f7fe fb9b 	bl	8005e10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076da:	bf00      	nop
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20004bd4 	.word	0x20004bd4
 80076e8:	20004bc4 	.word	0x20004bc4
 80076ec:	20004bd0 	.word	0x20004bd0

080076f0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80076f4:	4b03      	ldr	r3, [pc, #12]	@ (8007704 <xPortGetFreeHeapSize+0x14>)
 80076f6:	681b      	ldr	r3, [r3, #0]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20004bc4 	.word	0x20004bc4

08007708 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800770e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007712:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007714:	4b27      	ldr	r3, [pc, #156]	@ (80077b4 <prvHeapInit+0xac>)
 8007716:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 0307 	and.w	r3, r3, #7
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00c      	beq.n	800773c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3307      	adds	r3, #7
 8007726:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0307 	bic.w	r3, r3, #7
 800772e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	4a1f      	ldr	r2, [pc, #124]	@ (80077b4 <prvHeapInit+0xac>)
 8007738:	4413      	add	r3, r2
 800773a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007740:	4a1d      	ldr	r2, [pc, #116]	@ (80077b8 <prvHeapInit+0xb0>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007746:	4b1c      	ldr	r3, [pc, #112]	@ (80077b8 <prvHeapInit+0xb0>)
 8007748:	2200      	movs	r2, #0
 800774a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	4413      	add	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007754:	2208      	movs	r2, #8
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0307 	bic.w	r3, r3, #7
 8007762:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4a15      	ldr	r2, [pc, #84]	@ (80077bc <prvHeapInit+0xb4>)
 8007768:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800776a:	4b14      	ldr	r3, [pc, #80]	@ (80077bc <prvHeapInit+0xb4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2200      	movs	r2, #0
 8007770:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007772:	4b12      	ldr	r3, [pc, #72]	@ (80077bc <prvHeapInit+0xb4>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007788:	4b0c      	ldr	r3, [pc, #48]	@ (80077bc <prvHeapInit+0xb4>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	4a0a      	ldr	r2, [pc, #40]	@ (80077c0 <prvHeapInit+0xb8>)
 8007796:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	4a09      	ldr	r2, [pc, #36]	@ (80077c4 <prvHeapInit+0xbc>)
 800779e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077a0:	4b09      	ldr	r3, [pc, #36]	@ (80077c8 <prvHeapInit+0xc0>)
 80077a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80077a6:	601a      	str	r2, [r3, #0]
}
 80077a8:	bf00      	nop
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	20000fb8 	.word	0x20000fb8
 80077b8:	20004bb8 	.word	0x20004bb8
 80077bc:	20004bc0 	.word	0x20004bc0
 80077c0:	20004bc8 	.word	0x20004bc8
 80077c4:	20004bc4 	.word	0x20004bc4
 80077c8:	20004bd4 	.word	0x20004bd4

080077cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077d4:	4b28      	ldr	r3, [pc, #160]	@ (8007878 <prvInsertBlockIntoFreeList+0xac>)
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	e002      	b.n	80077e0 <prvInsertBlockIntoFreeList+0x14>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d8f7      	bhi.n	80077da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	4413      	add	r3, r2
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d108      	bne.n	800780e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	441a      	add	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	441a      	add	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d118      	bne.n	8007854 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4b15      	ldr	r3, [pc, #84]	@ (800787c <prvInsertBlockIntoFreeList+0xb0>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	429a      	cmp	r2, r3
 800782c:	d00d      	beq.n	800784a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	441a      	add	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e008      	b.n	800785c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800784a:	4b0c      	ldr	r3, [pc, #48]	@ (800787c <prvInsertBlockIntoFreeList+0xb0>)
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	e003      	b.n	800785c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d002      	beq.n	800786a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	20004bb8 	.word	0x20004bb8
 800787c:	20004bc0 	.word	0x20004bc0

08007880 <atoi>:
 8007880:	220a      	movs	r2, #10
 8007882:	2100      	movs	r1, #0
 8007884:	f000 b87a 	b.w	800797c <strtol>

08007888 <_strtol_l.isra.0>:
 8007888:	2b24      	cmp	r3, #36	@ 0x24
 800788a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800788e:	4686      	mov	lr, r0
 8007890:	4690      	mov	r8, r2
 8007892:	d801      	bhi.n	8007898 <_strtol_l.isra.0+0x10>
 8007894:	2b01      	cmp	r3, #1
 8007896:	d106      	bne.n	80078a6 <_strtol_l.isra.0+0x1e>
 8007898:	f000 fa60 	bl	8007d5c <__errno>
 800789c:	2316      	movs	r3, #22
 800789e:	6003      	str	r3, [r0, #0]
 80078a0:	2000      	movs	r0, #0
 80078a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a6:	4834      	ldr	r0, [pc, #208]	@ (8007978 <_strtol_l.isra.0+0xf0>)
 80078a8:	460d      	mov	r5, r1
 80078aa:	462a      	mov	r2, r5
 80078ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078b0:	5d06      	ldrb	r6, [r0, r4]
 80078b2:	f016 0608 	ands.w	r6, r6, #8
 80078b6:	d1f8      	bne.n	80078aa <_strtol_l.isra.0+0x22>
 80078b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80078ba:	d110      	bne.n	80078de <_strtol_l.isra.0+0x56>
 80078bc:	782c      	ldrb	r4, [r5, #0]
 80078be:	2601      	movs	r6, #1
 80078c0:	1c95      	adds	r5, r2, #2
 80078c2:	f033 0210 	bics.w	r2, r3, #16
 80078c6:	d115      	bne.n	80078f4 <_strtol_l.isra.0+0x6c>
 80078c8:	2c30      	cmp	r4, #48	@ 0x30
 80078ca:	d10d      	bne.n	80078e8 <_strtol_l.isra.0+0x60>
 80078cc:	782a      	ldrb	r2, [r5, #0]
 80078ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80078d2:	2a58      	cmp	r2, #88	@ 0x58
 80078d4:	d108      	bne.n	80078e8 <_strtol_l.isra.0+0x60>
 80078d6:	786c      	ldrb	r4, [r5, #1]
 80078d8:	3502      	adds	r5, #2
 80078da:	2310      	movs	r3, #16
 80078dc:	e00a      	b.n	80078f4 <_strtol_l.isra.0+0x6c>
 80078de:	2c2b      	cmp	r4, #43	@ 0x2b
 80078e0:	bf04      	itt	eq
 80078e2:	782c      	ldrbeq	r4, [r5, #0]
 80078e4:	1c95      	addeq	r5, r2, #2
 80078e6:	e7ec      	b.n	80078c2 <_strtol_l.isra.0+0x3a>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f6      	bne.n	80078da <_strtol_l.isra.0+0x52>
 80078ec:	2c30      	cmp	r4, #48	@ 0x30
 80078ee:	bf14      	ite	ne
 80078f0:	230a      	movne	r3, #10
 80078f2:	2308      	moveq	r3, #8
 80078f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80078f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80078fc:	2200      	movs	r2, #0
 80078fe:	fbbc f9f3 	udiv	r9, ip, r3
 8007902:	4610      	mov	r0, r2
 8007904:	fb03 ca19 	mls	sl, r3, r9, ip
 8007908:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800790c:	2f09      	cmp	r7, #9
 800790e:	d80f      	bhi.n	8007930 <_strtol_l.isra.0+0xa8>
 8007910:	463c      	mov	r4, r7
 8007912:	42a3      	cmp	r3, r4
 8007914:	dd1b      	ble.n	800794e <_strtol_l.isra.0+0xc6>
 8007916:	1c57      	adds	r7, r2, #1
 8007918:	d007      	beq.n	800792a <_strtol_l.isra.0+0xa2>
 800791a:	4581      	cmp	r9, r0
 800791c:	d314      	bcc.n	8007948 <_strtol_l.isra.0+0xc0>
 800791e:	d101      	bne.n	8007924 <_strtol_l.isra.0+0x9c>
 8007920:	45a2      	cmp	sl, r4
 8007922:	db11      	blt.n	8007948 <_strtol_l.isra.0+0xc0>
 8007924:	fb00 4003 	mla	r0, r0, r3, r4
 8007928:	2201      	movs	r2, #1
 800792a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800792e:	e7eb      	b.n	8007908 <_strtol_l.isra.0+0x80>
 8007930:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007934:	2f19      	cmp	r7, #25
 8007936:	d801      	bhi.n	800793c <_strtol_l.isra.0+0xb4>
 8007938:	3c37      	subs	r4, #55	@ 0x37
 800793a:	e7ea      	b.n	8007912 <_strtol_l.isra.0+0x8a>
 800793c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007940:	2f19      	cmp	r7, #25
 8007942:	d804      	bhi.n	800794e <_strtol_l.isra.0+0xc6>
 8007944:	3c57      	subs	r4, #87	@ 0x57
 8007946:	e7e4      	b.n	8007912 <_strtol_l.isra.0+0x8a>
 8007948:	f04f 32ff 	mov.w	r2, #4294967295
 800794c:	e7ed      	b.n	800792a <_strtol_l.isra.0+0xa2>
 800794e:	1c53      	adds	r3, r2, #1
 8007950:	d108      	bne.n	8007964 <_strtol_l.isra.0+0xdc>
 8007952:	2322      	movs	r3, #34	@ 0x22
 8007954:	f8ce 3000 	str.w	r3, [lr]
 8007958:	4660      	mov	r0, ip
 800795a:	f1b8 0f00 	cmp.w	r8, #0
 800795e:	d0a0      	beq.n	80078a2 <_strtol_l.isra.0+0x1a>
 8007960:	1e69      	subs	r1, r5, #1
 8007962:	e006      	b.n	8007972 <_strtol_l.isra.0+0xea>
 8007964:	b106      	cbz	r6, 8007968 <_strtol_l.isra.0+0xe0>
 8007966:	4240      	negs	r0, r0
 8007968:	f1b8 0f00 	cmp.w	r8, #0
 800796c:	d099      	beq.n	80078a2 <_strtol_l.isra.0+0x1a>
 800796e:	2a00      	cmp	r2, #0
 8007970:	d1f6      	bne.n	8007960 <_strtol_l.isra.0+0xd8>
 8007972:	f8c8 1000 	str.w	r1, [r8]
 8007976:	e794      	b.n	80078a2 <_strtol_l.isra.0+0x1a>
 8007978:	08009015 	.word	0x08009015

0800797c <strtol>:
 800797c:	4613      	mov	r3, r2
 800797e:	460a      	mov	r2, r1
 8007980:	4601      	mov	r1, r0
 8007982:	4802      	ldr	r0, [pc, #8]	@ (800798c <strtol+0x10>)
 8007984:	6800      	ldr	r0, [r0, #0]
 8007986:	f7ff bf7f 	b.w	8007888 <_strtol_l.isra.0>
 800798a:	bf00      	nop
 800798c:	2000004c 	.word	0x2000004c

08007990 <std>:
 8007990:	2300      	movs	r3, #0
 8007992:	b510      	push	{r4, lr}
 8007994:	4604      	mov	r4, r0
 8007996:	e9c0 3300 	strd	r3, r3, [r0]
 800799a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800799e:	6083      	str	r3, [r0, #8]
 80079a0:	8181      	strh	r1, [r0, #12]
 80079a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80079a4:	81c2      	strh	r2, [r0, #14]
 80079a6:	6183      	str	r3, [r0, #24]
 80079a8:	4619      	mov	r1, r3
 80079aa:	2208      	movs	r2, #8
 80079ac:	305c      	adds	r0, #92	@ 0x5c
 80079ae:	f000 f92a 	bl	8007c06 <memset>
 80079b2:	4b0d      	ldr	r3, [pc, #52]	@ (80079e8 <std+0x58>)
 80079b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80079b6:	4b0d      	ldr	r3, [pc, #52]	@ (80079ec <std+0x5c>)
 80079b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80079ba:	4b0d      	ldr	r3, [pc, #52]	@ (80079f0 <std+0x60>)
 80079bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079be:	4b0d      	ldr	r3, [pc, #52]	@ (80079f4 <std+0x64>)
 80079c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80079c2:	4b0d      	ldr	r3, [pc, #52]	@ (80079f8 <std+0x68>)
 80079c4:	6224      	str	r4, [r4, #32]
 80079c6:	429c      	cmp	r4, r3
 80079c8:	d006      	beq.n	80079d8 <std+0x48>
 80079ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079ce:	4294      	cmp	r4, r2
 80079d0:	d002      	beq.n	80079d8 <std+0x48>
 80079d2:	33d0      	adds	r3, #208	@ 0xd0
 80079d4:	429c      	cmp	r4, r3
 80079d6:	d105      	bne.n	80079e4 <std+0x54>
 80079d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e0:	f000 b9e6 	b.w	8007db0 <__retarget_lock_init_recursive>
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	bf00      	nop
 80079e8:	08007b81 	.word	0x08007b81
 80079ec:	08007ba3 	.word	0x08007ba3
 80079f0:	08007bdb 	.word	0x08007bdb
 80079f4:	08007bff 	.word	0x08007bff
 80079f8:	20004bd8 	.word	0x20004bd8

080079fc <stdio_exit_handler>:
 80079fc:	4a02      	ldr	r2, [pc, #8]	@ (8007a08 <stdio_exit_handler+0xc>)
 80079fe:	4903      	ldr	r1, [pc, #12]	@ (8007a0c <stdio_exit_handler+0x10>)
 8007a00:	4803      	ldr	r0, [pc, #12]	@ (8007a10 <stdio_exit_handler+0x14>)
 8007a02:	f000 b869 	b.w	8007ad8 <_fwalk_sglue>
 8007a06:	bf00      	nop
 8007a08:	20000040 	.word	0x20000040
 8007a0c:	080086e1 	.word	0x080086e1
 8007a10:	20000050 	.word	0x20000050

08007a14 <cleanup_stdio>:
 8007a14:	6841      	ldr	r1, [r0, #4]
 8007a16:	4b0c      	ldr	r3, [pc, #48]	@ (8007a48 <cleanup_stdio+0x34>)
 8007a18:	4299      	cmp	r1, r3
 8007a1a:	b510      	push	{r4, lr}
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	d001      	beq.n	8007a24 <cleanup_stdio+0x10>
 8007a20:	f000 fe5e 	bl	80086e0 <_fflush_r>
 8007a24:	68a1      	ldr	r1, [r4, #8]
 8007a26:	4b09      	ldr	r3, [pc, #36]	@ (8007a4c <cleanup_stdio+0x38>)
 8007a28:	4299      	cmp	r1, r3
 8007a2a:	d002      	beq.n	8007a32 <cleanup_stdio+0x1e>
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 fe57 	bl	80086e0 <_fflush_r>
 8007a32:	68e1      	ldr	r1, [r4, #12]
 8007a34:	4b06      	ldr	r3, [pc, #24]	@ (8007a50 <cleanup_stdio+0x3c>)
 8007a36:	4299      	cmp	r1, r3
 8007a38:	d004      	beq.n	8007a44 <cleanup_stdio+0x30>
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a40:	f000 be4e 	b.w	80086e0 <_fflush_r>
 8007a44:	bd10      	pop	{r4, pc}
 8007a46:	bf00      	nop
 8007a48:	20004bd8 	.word	0x20004bd8
 8007a4c:	20004c40 	.word	0x20004c40
 8007a50:	20004ca8 	.word	0x20004ca8

08007a54 <global_stdio_init.part.0>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	4b0b      	ldr	r3, [pc, #44]	@ (8007a84 <global_stdio_init.part.0+0x30>)
 8007a58:	4c0b      	ldr	r4, [pc, #44]	@ (8007a88 <global_stdio_init.part.0+0x34>)
 8007a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a8c <global_stdio_init.part.0+0x38>)
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	4620      	mov	r0, r4
 8007a60:	2200      	movs	r2, #0
 8007a62:	2104      	movs	r1, #4
 8007a64:	f7ff ff94 	bl	8007990 <std>
 8007a68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	2109      	movs	r1, #9
 8007a70:	f7ff ff8e 	bl	8007990 <std>
 8007a74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a78:	2202      	movs	r2, #2
 8007a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a7e:	2112      	movs	r1, #18
 8007a80:	f7ff bf86 	b.w	8007990 <std>
 8007a84:	20004d10 	.word	0x20004d10
 8007a88:	20004bd8 	.word	0x20004bd8
 8007a8c:	080079fd 	.word	0x080079fd

08007a90 <__sfp_lock_acquire>:
 8007a90:	4801      	ldr	r0, [pc, #4]	@ (8007a98 <__sfp_lock_acquire+0x8>)
 8007a92:	f000 b98e 	b.w	8007db2 <__retarget_lock_acquire_recursive>
 8007a96:	bf00      	nop
 8007a98:	20004d19 	.word	0x20004d19

08007a9c <__sfp_lock_release>:
 8007a9c:	4801      	ldr	r0, [pc, #4]	@ (8007aa4 <__sfp_lock_release+0x8>)
 8007a9e:	f000 b989 	b.w	8007db4 <__retarget_lock_release_recursive>
 8007aa2:	bf00      	nop
 8007aa4:	20004d19 	.word	0x20004d19

08007aa8 <__sinit>:
 8007aa8:	b510      	push	{r4, lr}
 8007aaa:	4604      	mov	r4, r0
 8007aac:	f7ff fff0 	bl	8007a90 <__sfp_lock_acquire>
 8007ab0:	6a23      	ldr	r3, [r4, #32]
 8007ab2:	b11b      	cbz	r3, 8007abc <__sinit+0x14>
 8007ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ab8:	f7ff bff0 	b.w	8007a9c <__sfp_lock_release>
 8007abc:	4b04      	ldr	r3, [pc, #16]	@ (8007ad0 <__sinit+0x28>)
 8007abe:	6223      	str	r3, [r4, #32]
 8007ac0:	4b04      	ldr	r3, [pc, #16]	@ (8007ad4 <__sinit+0x2c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1f5      	bne.n	8007ab4 <__sinit+0xc>
 8007ac8:	f7ff ffc4 	bl	8007a54 <global_stdio_init.part.0>
 8007acc:	e7f2      	b.n	8007ab4 <__sinit+0xc>
 8007ace:	bf00      	nop
 8007ad0:	08007a15 	.word	0x08007a15
 8007ad4:	20004d10 	.word	0x20004d10

08007ad8 <_fwalk_sglue>:
 8007ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007adc:	4607      	mov	r7, r0
 8007ade:	4688      	mov	r8, r1
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	2600      	movs	r6, #0
 8007ae4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ae8:	f1b9 0901 	subs.w	r9, r9, #1
 8007aec:	d505      	bpl.n	8007afa <_fwalk_sglue+0x22>
 8007aee:	6824      	ldr	r4, [r4, #0]
 8007af0:	2c00      	cmp	r4, #0
 8007af2:	d1f7      	bne.n	8007ae4 <_fwalk_sglue+0xc>
 8007af4:	4630      	mov	r0, r6
 8007af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007afa:	89ab      	ldrh	r3, [r5, #12]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d907      	bls.n	8007b10 <_fwalk_sglue+0x38>
 8007b00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b04:	3301      	adds	r3, #1
 8007b06:	d003      	beq.n	8007b10 <_fwalk_sglue+0x38>
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	47c0      	blx	r8
 8007b0e:	4306      	orrs	r6, r0
 8007b10:	3568      	adds	r5, #104	@ 0x68
 8007b12:	e7e9      	b.n	8007ae8 <_fwalk_sglue+0x10>

08007b14 <sniprintf>:
 8007b14:	b40c      	push	{r2, r3}
 8007b16:	b530      	push	{r4, r5, lr}
 8007b18:	4b18      	ldr	r3, [pc, #96]	@ (8007b7c <sniprintf+0x68>)
 8007b1a:	1e0c      	subs	r4, r1, #0
 8007b1c:	681d      	ldr	r5, [r3, #0]
 8007b1e:	b09d      	sub	sp, #116	@ 0x74
 8007b20:	da08      	bge.n	8007b34 <sniprintf+0x20>
 8007b22:	238b      	movs	r3, #139	@ 0x8b
 8007b24:	602b      	str	r3, [r5, #0]
 8007b26:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2a:	b01d      	add	sp, #116	@ 0x74
 8007b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b30:	b002      	add	sp, #8
 8007b32:	4770      	bx	lr
 8007b34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007b38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007b42:	bf14      	ite	ne
 8007b44:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b48:	4623      	moveq	r3, r4
 8007b4a:	9304      	str	r3, [sp, #16]
 8007b4c:	9307      	str	r3, [sp, #28]
 8007b4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b52:	9002      	str	r0, [sp, #8]
 8007b54:	9006      	str	r0, [sp, #24]
 8007b56:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007b5c:	ab21      	add	r3, sp, #132	@ 0x84
 8007b5e:	a902      	add	r1, sp, #8
 8007b60:	4628      	mov	r0, r5
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	f000 fab0 	bl	80080c8 <_svfiprintf_r>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	bfbc      	itt	lt
 8007b6c:	238b      	movlt	r3, #139	@ 0x8b
 8007b6e:	602b      	strlt	r3, [r5, #0]
 8007b70:	2c00      	cmp	r4, #0
 8007b72:	d0da      	beq.n	8007b2a <sniprintf+0x16>
 8007b74:	9b02      	ldr	r3, [sp, #8]
 8007b76:	2200      	movs	r2, #0
 8007b78:	701a      	strb	r2, [r3, #0]
 8007b7a:	e7d6      	b.n	8007b2a <sniprintf+0x16>
 8007b7c:	2000004c 	.word	0x2000004c

08007b80 <__sread>:
 8007b80:	b510      	push	{r4, lr}
 8007b82:	460c      	mov	r4, r1
 8007b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b88:	f000 f8c4 	bl	8007d14 <_read_r>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	bfab      	itete	ge
 8007b90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b92:	89a3      	ldrhlt	r3, [r4, #12]
 8007b94:	181b      	addge	r3, r3, r0
 8007b96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b9a:	bfac      	ite	ge
 8007b9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b9e:	81a3      	strhlt	r3, [r4, #12]
 8007ba0:	bd10      	pop	{r4, pc}

08007ba2 <__swrite>:
 8007ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba6:	461f      	mov	r7, r3
 8007ba8:	898b      	ldrh	r3, [r1, #12]
 8007baa:	05db      	lsls	r3, r3, #23
 8007bac:	4605      	mov	r5, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	d505      	bpl.n	8007bc0 <__swrite+0x1e>
 8007bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb8:	2302      	movs	r3, #2
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f000 f898 	bl	8007cf0 <_lseek_r>
 8007bc0:	89a3      	ldrh	r3, [r4, #12]
 8007bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bca:	81a3      	strh	r3, [r4, #12]
 8007bcc:	4632      	mov	r2, r6
 8007bce:	463b      	mov	r3, r7
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd6:	f000 b8af 	b.w	8007d38 <_write_r>

08007bda <__sseek>:
 8007bda:	b510      	push	{r4, lr}
 8007bdc:	460c      	mov	r4, r1
 8007bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be2:	f000 f885 	bl	8007cf0 <_lseek_r>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	bf15      	itete	ne
 8007bec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bf6:	81a3      	strheq	r3, [r4, #12]
 8007bf8:	bf18      	it	ne
 8007bfa:	81a3      	strhne	r3, [r4, #12]
 8007bfc:	bd10      	pop	{r4, pc}

08007bfe <__sclose>:
 8007bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c02:	f000 b865 	b.w	8007cd0 <_close_r>

08007c06 <memset>:
 8007c06:	4402      	add	r2, r0
 8007c08:	4603      	mov	r3, r0
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d100      	bne.n	8007c10 <memset+0xa>
 8007c0e:	4770      	bx	lr
 8007c10:	f803 1b01 	strb.w	r1, [r3], #1
 8007c14:	e7f9      	b.n	8007c0a <memset+0x4>
	...

08007c18 <strtok>:
 8007c18:	4b16      	ldr	r3, [pc, #88]	@ (8007c74 <strtok+0x5c>)
 8007c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c1e:	681f      	ldr	r7, [r3, #0]
 8007c20:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007c22:	4605      	mov	r5, r0
 8007c24:	460e      	mov	r6, r1
 8007c26:	b9ec      	cbnz	r4, 8007c64 <strtok+0x4c>
 8007c28:	2050      	movs	r0, #80	@ 0x50
 8007c2a:	f000 f93b 	bl	8007ea4 <malloc>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	6478      	str	r0, [r7, #68]	@ 0x44
 8007c32:	b920      	cbnz	r0, 8007c3e <strtok+0x26>
 8007c34:	4b10      	ldr	r3, [pc, #64]	@ (8007c78 <strtok+0x60>)
 8007c36:	4811      	ldr	r0, [pc, #68]	@ (8007c7c <strtok+0x64>)
 8007c38:	215b      	movs	r1, #91	@ 0x5b
 8007c3a:	f000 f8cb 	bl	8007dd4 <__assert_func>
 8007c3e:	e9c0 4400 	strd	r4, r4, [r0]
 8007c42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007c46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007c4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007c4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007c52:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007c56:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007c5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007c5e:	6184      	str	r4, [r0, #24]
 8007c60:	7704      	strb	r4, [r0, #28]
 8007c62:	6244      	str	r4, [r0, #36]	@ 0x24
 8007c64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c66:	4631      	mov	r1, r6
 8007c68:	4628      	mov	r0, r5
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c70:	f000 b806 	b.w	8007c80 <__strtok_r>
 8007c74:	2000004c 	.word	0x2000004c
 8007c78:	08009115 	.word	0x08009115
 8007c7c:	0800912c 	.word	0x0800912c

08007c80 <__strtok_r>:
 8007c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c82:	4604      	mov	r4, r0
 8007c84:	b908      	cbnz	r0, 8007c8a <__strtok_r+0xa>
 8007c86:	6814      	ldr	r4, [r2, #0]
 8007c88:	b144      	cbz	r4, 8007c9c <__strtok_r+0x1c>
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007c90:	460f      	mov	r7, r1
 8007c92:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007c96:	b91e      	cbnz	r6, 8007ca0 <__strtok_r+0x20>
 8007c98:	b965      	cbnz	r5, 8007cb4 <__strtok_r+0x34>
 8007c9a:	6015      	str	r5, [r2, #0]
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	e005      	b.n	8007cac <__strtok_r+0x2c>
 8007ca0:	42b5      	cmp	r5, r6
 8007ca2:	d1f6      	bne.n	8007c92 <__strtok_r+0x12>
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1f0      	bne.n	8007c8a <__strtok_r+0xa>
 8007ca8:	6014      	str	r4, [r2, #0]
 8007caa:	7003      	strb	r3, [r0, #0]
 8007cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cae:	461c      	mov	r4, r3
 8007cb0:	e00c      	b.n	8007ccc <__strtok_r+0x4c>
 8007cb2:	b91d      	cbnz	r5, 8007cbc <__strtok_r+0x3c>
 8007cb4:	4627      	mov	r7, r4
 8007cb6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007cba:	460e      	mov	r6, r1
 8007cbc:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007cc0:	42ab      	cmp	r3, r5
 8007cc2:	d1f6      	bne.n	8007cb2 <__strtok_r+0x32>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0f2      	beq.n	8007cae <__strtok_r+0x2e>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	703b      	strb	r3, [r7, #0]
 8007ccc:	6014      	str	r4, [r2, #0]
 8007cce:	e7ed      	b.n	8007cac <__strtok_r+0x2c>

08007cd0 <_close_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4d06      	ldr	r5, [pc, #24]	@ (8007cec <_close_r+0x1c>)
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	4608      	mov	r0, r1
 8007cda:	602b      	str	r3, [r5, #0]
 8007cdc:	f7f9 fb5e 	bl	800139c <_close>
 8007ce0:	1c43      	adds	r3, r0, #1
 8007ce2:	d102      	bne.n	8007cea <_close_r+0x1a>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	b103      	cbz	r3, 8007cea <_close_r+0x1a>
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	20004d14 	.word	0x20004d14

08007cf0 <_lseek_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d07      	ldr	r5, [pc, #28]	@ (8007d10 <_lseek_r+0x20>)
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	4608      	mov	r0, r1
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	602a      	str	r2, [r5, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f7f9 fb73 	bl	80013ea <_lseek>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_lseek_r+0x1e>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_lseek_r+0x1e>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	20004d14 	.word	0x20004d14

08007d14 <_read_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4d07      	ldr	r5, [pc, #28]	@ (8007d34 <_read_r+0x20>)
 8007d18:	4604      	mov	r4, r0
 8007d1a:	4608      	mov	r0, r1
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	2200      	movs	r2, #0
 8007d20:	602a      	str	r2, [r5, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	f7f9 fb01 	bl	800132a <_read>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_read_r+0x1e>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_read_r+0x1e>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	20004d14 	.word	0x20004d14

08007d38 <_write_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d07      	ldr	r5, [pc, #28]	@ (8007d58 <_write_r+0x20>)
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	4608      	mov	r0, r1
 8007d40:	4611      	mov	r1, r2
 8007d42:	2200      	movs	r2, #0
 8007d44:	602a      	str	r2, [r5, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	f7f9 fb0c 	bl	8001364 <_write>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_write_r+0x1e>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_write_r+0x1e>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	20004d14 	.word	0x20004d14

08007d5c <__errno>:
 8007d5c:	4b01      	ldr	r3, [pc, #4]	@ (8007d64 <__errno+0x8>)
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	2000004c 	.word	0x2000004c

08007d68 <__libc_init_array>:
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	4d0d      	ldr	r5, [pc, #52]	@ (8007da0 <__libc_init_array+0x38>)
 8007d6c:	4c0d      	ldr	r4, [pc, #52]	@ (8007da4 <__libc_init_array+0x3c>)
 8007d6e:	1b64      	subs	r4, r4, r5
 8007d70:	10a4      	asrs	r4, r4, #2
 8007d72:	2600      	movs	r6, #0
 8007d74:	42a6      	cmp	r6, r4
 8007d76:	d109      	bne.n	8007d8c <__libc_init_array+0x24>
 8007d78:	4d0b      	ldr	r5, [pc, #44]	@ (8007da8 <__libc_init_array+0x40>)
 8007d7a:	4c0c      	ldr	r4, [pc, #48]	@ (8007dac <__libc_init_array+0x44>)
 8007d7c:	f000 ffee 	bl	8008d5c <_init>
 8007d80:	1b64      	subs	r4, r4, r5
 8007d82:	10a4      	asrs	r4, r4, #2
 8007d84:	2600      	movs	r6, #0
 8007d86:	42a6      	cmp	r6, r4
 8007d88:	d105      	bne.n	8007d96 <__libc_init_array+0x2e>
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
 8007d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d90:	4798      	blx	r3
 8007d92:	3601      	adds	r6, #1
 8007d94:	e7ee      	b.n	8007d74 <__libc_init_array+0xc>
 8007d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d9a:	4798      	blx	r3
 8007d9c:	3601      	adds	r6, #1
 8007d9e:	e7f2      	b.n	8007d86 <__libc_init_array+0x1e>
 8007da0:	08009200 	.word	0x08009200
 8007da4:	08009200 	.word	0x08009200
 8007da8:	08009200 	.word	0x08009200
 8007dac:	08009204 	.word	0x08009204

08007db0 <__retarget_lock_init_recursive>:
 8007db0:	4770      	bx	lr

08007db2 <__retarget_lock_acquire_recursive>:
 8007db2:	4770      	bx	lr

08007db4 <__retarget_lock_release_recursive>:
 8007db4:	4770      	bx	lr

08007db6 <memcpy>:
 8007db6:	440a      	add	r2, r1
 8007db8:	4291      	cmp	r1, r2
 8007dba:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dbe:	d100      	bne.n	8007dc2 <memcpy+0xc>
 8007dc0:	4770      	bx	lr
 8007dc2:	b510      	push	{r4, lr}
 8007dc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dcc:	4291      	cmp	r1, r2
 8007dce:	d1f9      	bne.n	8007dc4 <memcpy+0xe>
 8007dd0:	bd10      	pop	{r4, pc}
	...

08007dd4 <__assert_func>:
 8007dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dd6:	4614      	mov	r4, r2
 8007dd8:	461a      	mov	r2, r3
 8007dda:	4b09      	ldr	r3, [pc, #36]	@ (8007e00 <__assert_func+0x2c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4605      	mov	r5, r0
 8007de0:	68d8      	ldr	r0, [r3, #12]
 8007de2:	b14c      	cbz	r4, 8007df8 <__assert_func+0x24>
 8007de4:	4b07      	ldr	r3, [pc, #28]	@ (8007e04 <__assert_func+0x30>)
 8007de6:	9100      	str	r1, [sp, #0]
 8007de8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dec:	4906      	ldr	r1, [pc, #24]	@ (8007e08 <__assert_func+0x34>)
 8007dee:	462b      	mov	r3, r5
 8007df0:	f000 fc9e 	bl	8008730 <fiprintf>
 8007df4:	f000 fcd8 	bl	80087a8 <abort>
 8007df8:	4b04      	ldr	r3, [pc, #16]	@ (8007e0c <__assert_func+0x38>)
 8007dfa:	461c      	mov	r4, r3
 8007dfc:	e7f3      	b.n	8007de6 <__assert_func+0x12>
 8007dfe:	bf00      	nop
 8007e00:	2000004c 	.word	0x2000004c
 8007e04:	08009186 	.word	0x08009186
 8007e08:	08009193 	.word	0x08009193
 8007e0c:	080091c1 	.word	0x080091c1

08007e10 <_free_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4605      	mov	r5, r0
 8007e14:	2900      	cmp	r1, #0
 8007e16:	d041      	beq.n	8007e9c <_free_r+0x8c>
 8007e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e1c:	1f0c      	subs	r4, r1, #4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	bfb8      	it	lt
 8007e22:	18e4      	addlt	r4, r4, r3
 8007e24:	f000 f8e8 	bl	8007ff8 <__malloc_lock>
 8007e28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea0 <_free_r+0x90>)
 8007e2a:	6813      	ldr	r3, [r2, #0]
 8007e2c:	b933      	cbnz	r3, 8007e3c <_free_r+0x2c>
 8007e2e:	6063      	str	r3, [r4, #4]
 8007e30:	6014      	str	r4, [r2, #0]
 8007e32:	4628      	mov	r0, r5
 8007e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e38:	f000 b8e4 	b.w	8008004 <__malloc_unlock>
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	d908      	bls.n	8007e52 <_free_r+0x42>
 8007e40:	6820      	ldr	r0, [r4, #0]
 8007e42:	1821      	adds	r1, r4, r0
 8007e44:	428b      	cmp	r3, r1
 8007e46:	bf01      	itttt	eq
 8007e48:	6819      	ldreq	r1, [r3, #0]
 8007e4a:	685b      	ldreq	r3, [r3, #4]
 8007e4c:	1809      	addeq	r1, r1, r0
 8007e4e:	6021      	streq	r1, [r4, #0]
 8007e50:	e7ed      	b.n	8007e2e <_free_r+0x1e>
 8007e52:	461a      	mov	r2, r3
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	b10b      	cbz	r3, 8007e5c <_free_r+0x4c>
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	d9fa      	bls.n	8007e52 <_free_r+0x42>
 8007e5c:	6811      	ldr	r1, [r2, #0]
 8007e5e:	1850      	adds	r0, r2, r1
 8007e60:	42a0      	cmp	r0, r4
 8007e62:	d10b      	bne.n	8007e7c <_free_r+0x6c>
 8007e64:	6820      	ldr	r0, [r4, #0]
 8007e66:	4401      	add	r1, r0
 8007e68:	1850      	adds	r0, r2, r1
 8007e6a:	4283      	cmp	r3, r0
 8007e6c:	6011      	str	r1, [r2, #0]
 8007e6e:	d1e0      	bne.n	8007e32 <_free_r+0x22>
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	6053      	str	r3, [r2, #4]
 8007e76:	4408      	add	r0, r1
 8007e78:	6010      	str	r0, [r2, #0]
 8007e7a:	e7da      	b.n	8007e32 <_free_r+0x22>
 8007e7c:	d902      	bls.n	8007e84 <_free_r+0x74>
 8007e7e:	230c      	movs	r3, #12
 8007e80:	602b      	str	r3, [r5, #0]
 8007e82:	e7d6      	b.n	8007e32 <_free_r+0x22>
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	1821      	adds	r1, r4, r0
 8007e88:	428b      	cmp	r3, r1
 8007e8a:	bf04      	itt	eq
 8007e8c:	6819      	ldreq	r1, [r3, #0]
 8007e8e:	685b      	ldreq	r3, [r3, #4]
 8007e90:	6063      	str	r3, [r4, #4]
 8007e92:	bf04      	itt	eq
 8007e94:	1809      	addeq	r1, r1, r0
 8007e96:	6021      	streq	r1, [r4, #0]
 8007e98:	6054      	str	r4, [r2, #4]
 8007e9a:	e7ca      	b.n	8007e32 <_free_r+0x22>
 8007e9c:	bd38      	pop	{r3, r4, r5, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20004d20 	.word	0x20004d20

08007ea4 <malloc>:
 8007ea4:	4b02      	ldr	r3, [pc, #8]	@ (8007eb0 <malloc+0xc>)
 8007ea6:	4601      	mov	r1, r0
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	f000 b825 	b.w	8007ef8 <_malloc_r>
 8007eae:	bf00      	nop
 8007eb0:	2000004c 	.word	0x2000004c

08007eb4 <sbrk_aligned>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	4e0f      	ldr	r6, [pc, #60]	@ (8007ef4 <sbrk_aligned+0x40>)
 8007eb8:	460c      	mov	r4, r1
 8007eba:	6831      	ldr	r1, [r6, #0]
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	b911      	cbnz	r1, 8007ec6 <sbrk_aligned+0x12>
 8007ec0:	f000 fc62 	bl	8008788 <_sbrk_r>
 8007ec4:	6030      	str	r0, [r6, #0]
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f000 fc5d 	bl	8008788 <_sbrk_r>
 8007ece:	1c43      	adds	r3, r0, #1
 8007ed0:	d103      	bne.n	8007eda <sbrk_aligned+0x26>
 8007ed2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	bd70      	pop	{r4, r5, r6, pc}
 8007eda:	1cc4      	adds	r4, r0, #3
 8007edc:	f024 0403 	bic.w	r4, r4, #3
 8007ee0:	42a0      	cmp	r0, r4
 8007ee2:	d0f8      	beq.n	8007ed6 <sbrk_aligned+0x22>
 8007ee4:	1a21      	subs	r1, r4, r0
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f000 fc4e 	bl	8008788 <_sbrk_r>
 8007eec:	3001      	adds	r0, #1
 8007eee:	d1f2      	bne.n	8007ed6 <sbrk_aligned+0x22>
 8007ef0:	e7ef      	b.n	8007ed2 <sbrk_aligned+0x1e>
 8007ef2:	bf00      	nop
 8007ef4:	20004d1c 	.word	0x20004d1c

08007ef8 <_malloc_r>:
 8007ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007efc:	1ccd      	adds	r5, r1, #3
 8007efe:	f025 0503 	bic.w	r5, r5, #3
 8007f02:	3508      	adds	r5, #8
 8007f04:	2d0c      	cmp	r5, #12
 8007f06:	bf38      	it	cc
 8007f08:	250c      	movcc	r5, #12
 8007f0a:	2d00      	cmp	r5, #0
 8007f0c:	4606      	mov	r6, r0
 8007f0e:	db01      	blt.n	8007f14 <_malloc_r+0x1c>
 8007f10:	42a9      	cmp	r1, r5
 8007f12:	d904      	bls.n	8007f1e <_malloc_r+0x26>
 8007f14:	230c      	movs	r3, #12
 8007f16:	6033      	str	r3, [r6, #0]
 8007f18:	2000      	movs	r0, #0
 8007f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ff4 <_malloc_r+0xfc>
 8007f22:	f000 f869 	bl	8007ff8 <__malloc_lock>
 8007f26:	f8d8 3000 	ldr.w	r3, [r8]
 8007f2a:	461c      	mov	r4, r3
 8007f2c:	bb44      	cbnz	r4, 8007f80 <_malloc_r+0x88>
 8007f2e:	4629      	mov	r1, r5
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7ff ffbf 	bl	8007eb4 <sbrk_aligned>
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	4604      	mov	r4, r0
 8007f3a:	d158      	bne.n	8007fee <_malloc_r+0xf6>
 8007f3c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f40:	4627      	mov	r7, r4
 8007f42:	2f00      	cmp	r7, #0
 8007f44:	d143      	bne.n	8007fce <_malloc_r+0xd6>
 8007f46:	2c00      	cmp	r4, #0
 8007f48:	d04b      	beq.n	8007fe2 <_malloc_r+0xea>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	4630      	mov	r0, r6
 8007f50:	eb04 0903 	add.w	r9, r4, r3
 8007f54:	f000 fc18 	bl	8008788 <_sbrk_r>
 8007f58:	4581      	cmp	r9, r0
 8007f5a:	d142      	bne.n	8007fe2 <_malloc_r+0xea>
 8007f5c:	6821      	ldr	r1, [r4, #0]
 8007f5e:	1a6d      	subs	r5, r5, r1
 8007f60:	4629      	mov	r1, r5
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7ff ffa6 	bl	8007eb4 <sbrk_aligned>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d03a      	beq.n	8007fe2 <_malloc_r+0xea>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	442b      	add	r3, r5
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	f8d8 3000 	ldr.w	r3, [r8]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	bb62      	cbnz	r2, 8007fd4 <_malloc_r+0xdc>
 8007f7a:	f8c8 7000 	str.w	r7, [r8]
 8007f7e:	e00f      	b.n	8007fa0 <_malloc_r+0xa8>
 8007f80:	6822      	ldr	r2, [r4, #0]
 8007f82:	1b52      	subs	r2, r2, r5
 8007f84:	d420      	bmi.n	8007fc8 <_malloc_r+0xd0>
 8007f86:	2a0b      	cmp	r2, #11
 8007f88:	d917      	bls.n	8007fba <_malloc_r+0xc2>
 8007f8a:	1961      	adds	r1, r4, r5
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	6025      	str	r5, [r4, #0]
 8007f90:	bf18      	it	ne
 8007f92:	6059      	strne	r1, [r3, #4]
 8007f94:	6863      	ldr	r3, [r4, #4]
 8007f96:	bf08      	it	eq
 8007f98:	f8c8 1000 	streq.w	r1, [r8]
 8007f9c:	5162      	str	r2, [r4, r5]
 8007f9e:	604b      	str	r3, [r1, #4]
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 f82f 	bl	8008004 <__malloc_unlock>
 8007fa6:	f104 000b 	add.w	r0, r4, #11
 8007faa:	1d23      	adds	r3, r4, #4
 8007fac:	f020 0007 	bic.w	r0, r0, #7
 8007fb0:	1ac2      	subs	r2, r0, r3
 8007fb2:	bf1c      	itt	ne
 8007fb4:	1a1b      	subne	r3, r3, r0
 8007fb6:	50a3      	strne	r3, [r4, r2]
 8007fb8:	e7af      	b.n	8007f1a <_malloc_r+0x22>
 8007fba:	6862      	ldr	r2, [r4, #4]
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	bf0c      	ite	eq
 8007fc0:	f8c8 2000 	streq.w	r2, [r8]
 8007fc4:	605a      	strne	r2, [r3, #4]
 8007fc6:	e7eb      	b.n	8007fa0 <_malloc_r+0xa8>
 8007fc8:	4623      	mov	r3, r4
 8007fca:	6864      	ldr	r4, [r4, #4]
 8007fcc:	e7ae      	b.n	8007f2c <_malloc_r+0x34>
 8007fce:	463c      	mov	r4, r7
 8007fd0:	687f      	ldr	r7, [r7, #4]
 8007fd2:	e7b6      	b.n	8007f42 <_malloc_r+0x4a>
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	42a3      	cmp	r3, r4
 8007fda:	d1fb      	bne.n	8007fd4 <_malloc_r+0xdc>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6053      	str	r3, [r2, #4]
 8007fe0:	e7de      	b.n	8007fa0 <_malloc_r+0xa8>
 8007fe2:	230c      	movs	r3, #12
 8007fe4:	6033      	str	r3, [r6, #0]
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f000 f80c 	bl	8008004 <__malloc_unlock>
 8007fec:	e794      	b.n	8007f18 <_malloc_r+0x20>
 8007fee:	6005      	str	r5, [r0, #0]
 8007ff0:	e7d6      	b.n	8007fa0 <_malloc_r+0xa8>
 8007ff2:	bf00      	nop
 8007ff4:	20004d20 	.word	0x20004d20

08007ff8 <__malloc_lock>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	@ (8008000 <__malloc_lock+0x8>)
 8007ffa:	f7ff beda 	b.w	8007db2 <__retarget_lock_acquire_recursive>
 8007ffe:	bf00      	nop
 8008000:	20004d18 	.word	0x20004d18

08008004 <__malloc_unlock>:
 8008004:	4801      	ldr	r0, [pc, #4]	@ (800800c <__malloc_unlock+0x8>)
 8008006:	f7ff bed5 	b.w	8007db4 <__retarget_lock_release_recursive>
 800800a:	bf00      	nop
 800800c:	20004d18 	.word	0x20004d18

08008010 <__ssputs_r>:
 8008010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008014:	688e      	ldr	r6, [r1, #8]
 8008016:	461f      	mov	r7, r3
 8008018:	42be      	cmp	r6, r7
 800801a:	680b      	ldr	r3, [r1, #0]
 800801c:	4682      	mov	sl, r0
 800801e:	460c      	mov	r4, r1
 8008020:	4690      	mov	r8, r2
 8008022:	d82d      	bhi.n	8008080 <__ssputs_r+0x70>
 8008024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008028:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800802c:	d026      	beq.n	800807c <__ssputs_r+0x6c>
 800802e:	6965      	ldr	r5, [r4, #20]
 8008030:	6909      	ldr	r1, [r1, #16]
 8008032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008036:	eba3 0901 	sub.w	r9, r3, r1
 800803a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800803e:	1c7b      	adds	r3, r7, #1
 8008040:	444b      	add	r3, r9
 8008042:	106d      	asrs	r5, r5, #1
 8008044:	429d      	cmp	r5, r3
 8008046:	bf38      	it	cc
 8008048:	461d      	movcc	r5, r3
 800804a:	0553      	lsls	r3, r2, #21
 800804c:	d527      	bpl.n	800809e <__ssputs_r+0x8e>
 800804e:	4629      	mov	r1, r5
 8008050:	f7ff ff52 	bl	8007ef8 <_malloc_r>
 8008054:	4606      	mov	r6, r0
 8008056:	b360      	cbz	r0, 80080b2 <__ssputs_r+0xa2>
 8008058:	6921      	ldr	r1, [r4, #16]
 800805a:	464a      	mov	r2, r9
 800805c:	f7ff feab 	bl	8007db6 <memcpy>
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800806a:	81a3      	strh	r3, [r4, #12]
 800806c:	6126      	str	r6, [r4, #16]
 800806e:	6165      	str	r5, [r4, #20]
 8008070:	444e      	add	r6, r9
 8008072:	eba5 0509 	sub.w	r5, r5, r9
 8008076:	6026      	str	r6, [r4, #0]
 8008078:	60a5      	str	r5, [r4, #8]
 800807a:	463e      	mov	r6, r7
 800807c:	42be      	cmp	r6, r7
 800807e:	d900      	bls.n	8008082 <__ssputs_r+0x72>
 8008080:	463e      	mov	r6, r7
 8008082:	6820      	ldr	r0, [r4, #0]
 8008084:	4632      	mov	r2, r6
 8008086:	4641      	mov	r1, r8
 8008088:	f000 fb64 	bl	8008754 <memmove>
 800808c:	68a3      	ldr	r3, [r4, #8]
 800808e:	1b9b      	subs	r3, r3, r6
 8008090:	60a3      	str	r3, [r4, #8]
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	4433      	add	r3, r6
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	2000      	movs	r0, #0
 800809a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809e:	462a      	mov	r2, r5
 80080a0:	f000 fb89 	bl	80087b6 <_realloc_r>
 80080a4:	4606      	mov	r6, r0
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d1e0      	bne.n	800806c <__ssputs_r+0x5c>
 80080aa:	6921      	ldr	r1, [r4, #16]
 80080ac:	4650      	mov	r0, sl
 80080ae:	f7ff feaf 	bl	8007e10 <_free_r>
 80080b2:	230c      	movs	r3, #12
 80080b4:	f8ca 3000 	str.w	r3, [sl]
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080be:	81a3      	strh	r3, [r4, #12]
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295
 80080c4:	e7e9      	b.n	800809a <__ssputs_r+0x8a>
	...

080080c8 <_svfiprintf_r>:
 80080c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	4698      	mov	r8, r3
 80080ce:	898b      	ldrh	r3, [r1, #12]
 80080d0:	061b      	lsls	r3, r3, #24
 80080d2:	b09d      	sub	sp, #116	@ 0x74
 80080d4:	4607      	mov	r7, r0
 80080d6:	460d      	mov	r5, r1
 80080d8:	4614      	mov	r4, r2
 80080da:	d510      	bpl.n	80080fe <_svfiprintf_r+0x36>
 80080dc:	690b      	ldr	r3, [r1, #16]
 80080de:	b973      	cbnz	r3, 80080fe <_svfiprintf_r+0x36>
 80080e0:	2140      	movs	r1, #64	@ 0x40
 80080e2:	f7ff ff09 	bl	8007ef8 <_malloc_r>
 80080e6:	6028      	str	r0, [r5, #0]
 80080e8:	6128      	str	r0, [r5, #16]
 80080ea:	b930      	cbnz	r0, 80080fa <_svfiprintf_r+0x32>
 80080ec:	230c      	movs	r3, #12
 80080ee:	603b      	str	r3, [r7, #0]
 80080f0:	f04f 30ff 	mov.w	r0, #4294967295
 80080f4:	b01d      	add	sp, #116	@ 0x74
 80080f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fa:	2340      	movs	r3, #64	@ 0x40
 80080fc:	616b      	str	r3, [r5, #20]
 80080fe:	2300      	movs	r3, #0
 8008100:	9309      	str	r3, [sp, #36]	@ 0x24
 8008102:	2320      	movs	r3, #32
 8008104:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008108:	f8cd 800c 	str.w	r8, [sp, #12]
 800810c:	2330      	movs	r3, #48	@ 0x30
 800810e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80082ac <_svfiprintf_r+0x1e4>
 8008112:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008116:	f04f 0901 	mov.w	r9, #1
 800811a:	4623      	mov	r3, r4
 800811c:	469a      	mov	sl, r3
 800811e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008122:	b10a      	cbz	r2, 8008128 <_svfiprintf_r+0x60>
 8008124:	2a25      	cmp	r2, #37	@ 0x25
 8008126:	d1f9      	bne.n	800811c <_svfiprintf_r+0x54>
 8008128:	ebba 0b04 	subs.w	fp, sl, r4
 800812c:	d00b      	beq.n	8008146 <_svfiprintf_r+0x7e>
 800812e:	465b      	mov	r3, fp
 8008130:	4622      	mov	r2, r4
 8008132:	4629      	mov	r1, r5
 8008134:	4638      	mov	r0, r7
 8008136:	f7ff ff6b 	bl	8008010 <__ssputs_r>
 800813a:	3001      	adds	r0, #1
 800813c:	f000 80a7 	beq.w	800828e <_svfiprintf_r+0x1c6>
 8008140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008142:	445a      	add	r2, fp
 8008144:	9209      	str	r2, [sp, #36]	@ 0x24
 8008146:	f89a 3000 	ldrb.w	r3, [sl]
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 809f 	beq.w	800828e <_svfiprintf_r+0x1c6>
 8008150:	2300      	movs	r3, #0
 8008152:	f04f 32ff 	mov.w	r2, #4294967295
 8008156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800815a:	f10a 0a01 	add.w	sl, sl, #1
 800815e:	9304      	str	r3, [sp, #16]
 8008160:	9307      	str	r3, [sp, #28]
 8008162:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008166:	931a      	str	r3, [sp, #104]	@ 0x68
 8008168:	4654      	mov	r4, sl
 800816a:	2205      	movs	r2, #5
 800816c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008170:	484e      	ldr	r0, [pc, #312]	@ (80082ac <_svfiprintf_r+0x1e4>)
 8008172:	f7f8 f84d 	bl	8000210 <memchr>
 8008176:	9a04      	ldr	r2, [sp, #16]
 8008178:	b9d8      	cbnz	r0, 80081b2 <_svfiprintf_r+0xea>
 800817a:	06d0      	lsls	r0, r2, #27
 800817c:	bf44      	itt	mi
 800817e:	2320      	movmi	r3, #32
 8008180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008184:	0711      	lsls	r1, r2, #28
 8008186:	bf44      	itt	mi
 8008188:	232b      	movmi	r3, #43	@ 0x2b
 800818a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800818e:	f89a 3000 	ldrb.w	r3, [sl]
 8008192:	2b2a      	cmp	r3, #42	@ 0x2a
 8008194:	d015      	beq.n	80081c2 <_svfiprintf_r+0xfa>
 8008196:	9a07      	ldr	r2, [sp, #28]
 8008198:	4654      	mov	r4, sl
 800819a:	2000      	movs	r0, #0
 800819c:	f04f 0c0a 	mov.w	ip, #10
 80081a0:	4621      	mov	r1, r4
 80081a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081a6:	3b30      	subs	r3, #48	@ 0x30
 80081a8:	2b09      	cmp	r3, #9
 80081aa:	d94b      	bls.n	8008244 <_svfiprintf_r+0x17c>
 80081ac:	b1b0      	cbz	r0, 80081dc <_svfiprintf_r+0x114>
 80081ae:	9207      	str	r2, [sp, #28]
 80081b0:	e014      	b.n	80081dc <_svfiprintf_r+0x114>
 80081b2:	eba0 0308 	sub.w	r3, r0, r8
 80081b6:	fa09 f303 	lsl.w	r3, r9, r3
 80081ba:	4313      	orrs	r3, r2
 80081bc:	9304      	str	r3, [sp, #16]
 80081be:	46a2      	mov	sl, r4
 80081c0:	e7d2      	b.n	8008168 <_svfiprintf_r+0xa0>
 80081c2:	9b03      	ldr	r3, [sp, #12]
 80081c4:	1d19      	adds	r1, r3, #4
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	9103      	str	r1, [sp, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	bfbb      	ittet	lt
 80081ce:	425b      	neglt	r3, r3
 80081d0:	f042 0202 	orrlt.w	r2, r2, #2
 80081d4:	9307      	strge	r3, [sp, #28]
 80081d6:	9307      	strlt	r3, [sp, #28]
 80081d8:	bfb8      	it	lt
 80081da:	9204      	strlt	r2, [sp, #16]
 80081dc:	7823      	ldrb	r3, [r4, #0]
 80081de:	2b2e      	cmp	r3, #46	@ 0x2e
 80081e0:	d10a      	bne.n	80081f8 <_svfiprintf_r+0x130>
 80081e2:	7863      	ldrb	r3, [r4, #1]
 80081e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80081e6:	d132      	bne.n	800824e <_svfiprintf_r+0x186>
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	1d1a      	adds	r2, r3, #4
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	9203      	str	r2, [sp, #12]
 80081f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081f4:	3402      	adds	r4, #2
 80081f6:	9305      	str	r3, [sp, #20]
 80081f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082bc <_svfiprintf_r+0x1f4>
 80081fc:	7821      	ldrb	r1, [r4, #0]
 80081fe:	2203      	movs	r2, #3
 8008200:	4650      	mov	r0, sl
 8008202:	f7f8 f805 	bl	8000210 <memchr>
 8008206:	b138      	cbz	r0, 8008218 <_svfiprintf_r+0x150>
 8008208:	9b04      	ldr	r3, [sp, #16]
 800820a:	eba0 000a 	sub.w	r0, r0, sl
 800820e:	2240      	movs	r2, #64	@ 0x40
 8008210:	4082      	lsls	r2, r0
 8008212:	4313      	orrs	r3, r2
 8008214:	3401      	adds	r4, #1
 8008216:	9304      	str	r3, [sp, #16]
 8008218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800821c:	4824      	ldr	r0, [pc, #144]	@ (80082b0 <_svfiprintf_r+0x1e8>)
 800821e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008222:	2206      	movs	r2, #6
 8008224:	f7f7 fff4 	bl	8000210 <memchr>
 8008228:	2800      	cmp	r0, #0
 800822a:	d036      	beq.n	800829a <_svfiprintf_r+0x1d2>
 800822c:	4b21      	ldr	r3, [pc, #132]	@ (80082b4 <_svfiprintf_r+0x1ec>)
 800822e:	bb1b      	cbnz	r3, 8008278 <_svfiprintf_r+0x1b0>
 8008230:	9b03      	ldr	r3, [sp, #12]
 8008232:	3307      	adds	r3, #7
 8008234:	f023 0307 	bic.w	r3, r3, #7
 8008238:	3308      	adds	r3, #8
 800823a:	9303      	str	r3, [sp, #12]
 800823c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800823e:	4433      	add	r3, r6
 8008240:	9309      	str	r3, [sp, #36]	@ 0x24
 8008242:	e76a      	b.n	800811a <_svfiprintf_r+0x52>
 8008244:	fb0c 3202 	mla	r2, ip, r2, r3
 8008248:	460c      	mov	r4, r1
 800824a:	2001      	movs	r0, #1
 800824c:	e7a8      	b.n	80081a0 <_svfiprintf_r+0xd8>
 800824e:	2300      	movs	r3, #0
 8008250:	3401      	adds	r4, #1
 8008252:	9305      	str	r3, [sp, #20]
 8008254:	4619      	mov	r1, r3
 8008256:	f04f 0c0a 	mov.w	ip, #10
 800825a:	4620      	mov	r0, r4
 800825c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008260:	3a30      	subs	r2, #48	@ 0x30
 8008262:	2a09      	cmp	r2, #9
 8008264:	d903      	bls.n	800826e <_svfiprintf_r+0x1a6>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0c6      	beq.n	80081f8 <_svfiprintf_r+0x130>
 800826a:	9105      	str	r1, [sp, #20]
 800826c:	e7c4      	b.n	80081f8 <_svfiprintf_r+0x130>
 800826e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008272:	4604      	mov	r4, r0
 8008274:	2301      	movs	r3, #1
 8008276:	e7f0      	b.n	800825a <_svfiprintf_r+0x192>
 8008278:	ab03      	add	r3, sp, #12
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	462a      	mov	r2, r5
 800827e:	4b0e      	ldr	r3, [pc, #56]	@ (80082b8 <_svfiprintf_r+0x1f0>)
 8008280:	a904      	add	r1, sp, #16
 8008282:	4638      	mov	r0, r7
 8008284:	f3af 8000 	nop.w
 8008288:	1c42      	adds	r2, r0, #1
 800828a:	4606      	mov	r6, r0
 800828c:	d1d6      	bne.n	800823c <_svfiprintf_r+0x174>
 800828e:	89ab      	ldrh	r3, [r5, #12]
 8008290:	065b      	lsls	r3, r3, #25
 8008292:	f53f af2d 	bmi.w	80080f0 <_svfiprintf_r+0x28>
 8008296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008298:	e72c      	b.n	80080f4 <_svfiprintf_r+0x2c>
 800829a:	ab03      	add	r3, sp, #12
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	462a      	mov	r2, r5
 80082a0:	4b05      	ldr	r3, [pc, #20]	@ (80082b8 <_svfiprintf_r+0x1f0>)
 80082a2:	a904      	add	r1, sp, #16
 80082a4:	4638      	mov	r0, r7
 80082a6:	f000 f879 	bl	800839c <_printf_i>
 80082aa:	e7ed      	b.n	8008288 <_svfiprintf_r+0x1c0>
 80082ac:	080091c2 	.word	0x080091c2
 80082b0:	080091cc 	.word	0x080091cc
 80082b4:	00000000 	.word	0x00000000
 80082b8:	08008011 	.word	0x08008011
 80082bc:	080091c8 	.word	0x080091c8

080082c0 <_printf_common>:
 80082c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c4:	4616      	mov	r6, r2
 80082c6:	4698      	mov	r8, r3
 80082c8:	688a      	ldr	r2, [r1, #8]
 80082ca:	690b      	ldr	r3, [r1, #16]
 80082cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082d0:	4293      	cmp	r3, r2
 80082d2:	bfb8      	it	lt
 80082d4:	4613      	movlt	r3, r2
 80082d6:	6033      	str	r3, [r6, #0]
 80082d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082dc:	4607      	mov	r7, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	b10a      	cbz	r2, 80082e6 <_printf_common+0x26>
 80082e2:	3301      	adds	r3, #1
 80082e4:	6033      	str	r3, [r6, #0]
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	0699      	lsls	r1, r3, #26
 80082ea:	bf42      	ittt	mi
 80082ec:	6833      	ldrmi	r3, [r6, #0]
 80082ee:	3302      	addmi	r3, #2
 80082f0:	6033      	strmi	r3, [r6, #0]
 80082f2:	6825      	ldr	r5, [r4, #0]
 80082f4:	f015 0506 	ands.w	r5, r5, #6
 80082f8:	d106      	bne.n	8008308 <_printf_common+0x48>
 80082fa:	f104 0a19 	add.w	sl, r4, #25
 80082fe:	68e3      	ldr	r3, [r4, #12]
 8008300:	6832      	ldr	r2, [r6, #0]
 8008302:	1a9b      	subs	r3, r3, r2
 8008304:	42ab      	cmp	r3, r5
 8008306:	dc26      	bgt.n	8008356 <_printf_common+0x96>
 8008308:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800830c:	6822      	ldr	r2, [r4, #0]
 800830e:	3b00      	subs	r3, #0
 8008310:	bf18      	it	ne
 8008312:	2301      	movne	r3, #1
 8008314:	0692      	lsls	r2, r2, #26
 8008316:	d42b      	bmi.n	8008370 <_printf_common+0xb0>
 8008318:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800831c:	4641      	mov	r1, r8
 800831e:	4638      	mov	r0, r7
 8008320:	47c8      	blx	r9
 8008322:	3001      	adds	r0, #1
 8008324:	d01e      	beq.n	8008364 <_printf_common+0xa4>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	6922      	ldr	r2, [r4, #16]
 800832a:	f003 0306 	and.w	r3, r3, #6
 800832e:	2b04      	cmp	r3, #4
 8008330:	bf02      	ittt	eq
 8008332:	68e5      	ldreq	r5, [r4, #12]
 8008334:	6833      	ldreq	r3, [r6, #0]
 8008336:	1aed      	subeq	r5, r5, r3
 8008338:	68a3      	ldr	r3, [r4, #8]
 800833a:	bf0c      	ite	eq
 800833c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008340:	2500      	movne	r5, #0
 8008342:	4293      	cmp	r3, r2
 8008344:	bfc4      	itt	gt
 8008346:	1a9b      	subgt	r3, r3, r2
 8008348:	18ed      	addgt	r5, r5, r3
 800834a:	2600      	movs	r6, #0
 800834c:	341a      	adds	r4, #26
 800834e:	42b5      	cmp	r5, r6
 8008350:	d11a      	bne.n	8008388 <_printf_common+0xc8>
 8008352:	2000      	movs	r0, #0
 8008354:	e008      	b.n	8008368 <_printf_common+0xa8>
 8008356:	2301      	movs	r3, #1
 8008358:	4652      	mov	r2, sl
 800835a:	4641      	mov	r1, r8
 800835c:	4638      	mov	r0, r7
 800835e:	47c8      	blx	r9
 8008360:	3001      	adds	r0, #1
 8008362:	d103      	bne.n	800836c <_printf_common+0xac>
 8008364:	f04f 30ff 	mov.w	r0, #4294967295
 8008368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800836c:	3501      	adds	r5, #1
 800836e:	e7c6      	b.n	80082fe <_printf_common+0x3e>
 8008370:	18e1      	adds	r1, r4, r3
 8008372:	1c5a      	adds	r2, r3, #1
 8008374:	2030      	movs	r0, #48	@ 0x30
 8008376:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800837a:	4422      	add	r2, r4
 800837c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008380:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008384:	3302      	adds	r3, #2
 8008386:	e7c7      	b.n	8008318 <_printf_common+0x58>
 8008388:	2301      	movs	r3, #1
 800838a:	4622      	mov	r2, r4
 800838c:	4641      	mov	r1, r8
 800838e:	4638      	mov	r0, r7
 8008390:	47c8      	blx	r9
 8008392:	3001      	adds	r0, #1
 8008394:	d0e6      	beq.n	8008364 <_printf_common+0xa4>
 8008396:	3601      	adds	r6, #1
 8008398:	e7d9      	b.n	800834e <_printf_common+0x8e>
	...

0800839c <_printf_i>:
 800839c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083a0:	7e0f      	ldrb	r7, [r1, #24]
 80083a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083a4:	2f78      	cmp	r7, #120	@ 0x78
 80083a6:	4691      	mov	r9, r2
 80083a8:	4680      	mov	r8, r0
 80083aa:	460c      	mov	r4, r1
 80083ac:	469a      	mov	sl, r3
 80083ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083b2:	d807      	bhi.n	80083c4 <_printf_i+0x28>
 80083b4:	2f62      	cmp	r7, #98	@ 0x62
 80083b6:	d80a      	bhi.n	80083ce <_printf_i+0x32>
 80083b8:	2f00      	cmp	r7, #0
 80083ba:	f000 80d1 	beq.w	8008560 <_printf_i+0x1c4>
 80083be:	2f58      	cmp	r7, #88	@ 0x58
 80083c0:	f000 80b8 	beq.w	8008534 <_printf_i+0x198>
 80083c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083cc:	e03a      	b.n	8008444 <_printf_i+0xa8>
 80083ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083d2:	2b15      	cmp	r3, #21
 80083d4:	d8f6      	bhi.n	80083c4 <_printf_i+0x28>
 80083d6:	a101      	add	r1, pc, #4	@ (adr r1, 80083dc <_printf_i+0x40>)
 80083d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083dc:	08008435 	.word	0x08008435
 80083e0:	08008449 	.word	0x08008449
 80083e4:	080083c5 	.word	0x080083c5
 80083e8:	080083c5 	.word	0x080083c5
 80083ec:	080083c5 	.word	0x080083c5
 80083f0:	080083c5 	.word	0x080083c5
 80083f4:	08008449 	.word	0x08008449
 80083f8:	080083c5 	.word	0x080083c5
 80083fc:	080083c5 	.word	0x080083c5
 8008400:	080083c5 	.word	0x080083c5
 8008404:	080083c5 	.word	0x080083c5
 8008408:	08008547 	.word	0x08008547
 800840c:	08008473 	.word	0x08008473
 8008410:	08008501 	.word	0x08008501
 8008414:	080083c5 	.word	0x080083c5
 8008418:	080083c5 	.word	0x080083c5
 800841c:	08008569 	.word	0x08008569
 8008420:	080083c5 	.word	0x080083c5
 8008424:	08008473 	.word	0x08008473
 8008428:	080083c5 	.word	0x080083c5
 800842c:	080083c5 	.word	0x080083c5
 8008430:	08008509 	.word	0x08008509
 8008434:	6833      	ldr	r3, [r6, #0]
 8008436:	1d1a      	adds	r2, r3, #4
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6032      	str	r2, [r6, #0]
 800843c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008440:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008444:	2301      	movs	r3, #1
 8008446:	e09c      	b.n	8008582 <_printf_i+0x1e6>
 8008448:	6833      	ldr	r3, [r6, #0]
 800844a:	6820      	ldr	r0, [r4, #0]
 800844c:	1d19      	adds	r1, r3, #4
 800844e:	6031      	str	r1, [r6, #0]
 8008450:	0606      	lsls	r6, r0, #24
 8008452:	d501      	bpl.n	8008458 <_printf_i+0xbc>
 8008454:	681d      	ldr	r5, [r3, #0]
 8008456:	e003      	b.n	8008460 <_printf_i+0xc4>
 8008458:	0645      	lsls	r5, r0, #25
 800845a:	d5fb      	bpl.n	8008454 <_printf_i+0xb8>
 800845c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008460:	2d00      	cmp	r5, #0
 8008462:	da03      	bge.n	800846c <_printf_i+0xd0>
 8008464:	232d      	movs	r3, #45	@ 0x2d
 8008466:	426d      	negs	r5, r5
 8008468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800846c:	4858      	ldr	r0, [pc, #352]	@ (80085d0 <_printf_i+0x234>)
 800846e:	230a      	movs	r3, #10
 8008470:	e011      	b.n	8008496 <_printf_i+0xfa>
 8008472:	6821      	ldr	r1, [r4, #0]
 8008474:	6833      	ldr	r3, [r6, #0]
 8008476:	0608      	lsls	r0, r1, #24
 8008478:	f853 5b04 	ldr.w	r5, [r3], #4
 800847c:	d402      	bmi.n	8008484 <_printf_i+0xe8>
 800847e:	0649      	lsls	r1, r1, #25
 8008480:	bf48      	it	mi
 8008482:	b2ad      	uxthmi	r5, r5
 8008484:	2f6f      	cmp	r7, #111	@ 0x6f
 8008486:	4852      	ldr	r0, [pc, #328]	@ (80085d0 <_printf_i+0x234>)
 8008488:	6033      	str	r3, [r6, #0]
 800848a:	bf14      	ite	ne
 800848c:	230a      	movne	r3, #10
 800848e:	2308      	moveq	r3, #8
 8008490:	2100      	movs	r1, #0
 8008492:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008496:	6866      	ldr	r6, [r4, #4]
 8008498:	60a6      	str	r6, [r4, #8]
 800849a:	2e00      	cmp	r6, #0
 800849c:	db05      	blt.n	80084aa <_printf_i+0x10e>
 800849e:	6821      	ldr	r1, [r4, #0]
 80084a0:	432e      	orrs	r6, r5
 80084a2:	f021 0104 	bic.w	r1, r1, #4
 80084a6:	6021      	str	r1, [r4, #0]
 80084a8:	d04b      	beq.n	8008542 <_printf_i+0x1a6>
 80084aa:	4616      	mov	r6, r2
 80084ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80084b0:	fb03 5711 	mls	r7, r3, r1, r5
 80084b4:	5dc7      	ldrb	r7, [r0, r7]
 80084b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084ba:	462f      	mov	r7, r5
 80084bc:	42bb      	cmp	r3, r7
 80084be:	460d      	mov	r5, r1
 80084c0:	d9f4      	bls.n	80084ac <_printf_i+0x110>
 80084c2:	2b08      	cmp	r3, #8
 80084c4:	d10b      	bne.n	80084de <_printf_i+0x142>
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	07df      	lsls	r7, r3, #31
 80084ca:	d508      	bpl.n	80084de <_printf_i+0x142>
 80084cc:	6923      	ldr	r3, [r4, #16]
 80084ce:	6861      	ldr	r1, [r4, #4]
 80084d0:	4299      	cmp	r1, r3
 80084d2:	bfde      	ittt	le
 80084d4:	2330      	movle	r3, #48	@ 0x30
 80084d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084de:	1b92      	subs	r2, r2, r6
 80084e0:	6122      	str	r2, [r4, #16]
 80084e2:	f8cd a000 	str.w	sl, [sp]
 80084e6:	464b      	mov	r3, r9
 80084e8:	aa03      	add	r2, sp, #12
 80084ea:	4621      	mov	r1, r4
 80084ec:	4640      	mov	r0, r8
 80084ee:	f7ff fee7 	bl	80082c0 <_printf_common>
 80084f2:	3001      	adds	r0, #1
 80084f4:	d14a      	bne.n	800858c <_printf_i+0x1f0>
 80084f6:	f04f 30ff 	mov.w	r0, #4294967295
 80084fa:	b004      	add	sp, #16
 80084fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	f043 0320 	orr.w	r3, r3, #32
 8008506:	6023      	str	r3, [r4, #0]
 8008508:	4832      	ldr	r0, [pc, #200]	@ (80085d4 <_printf_i+0x238>)
 800850a:	2778      	movs	r7, #120	@ 0x78
 800850c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	6831      	ldr	r1, [r6, #0]
 8008514:	061f      	lsls	r7, r3, #24
 8008516:	f851 5b04 	ldr.w	r5, [r1], #4
 800851a:	d402      	bmi.n	8008522 <_printf_i+0x186>
 800851c:	065f      	lsls	r7, r3, #25
 800851e:	bf48      	it	mi
 8008520:	b2ad      	uxthmi	r5, r5
 8008522:	6031      	str	r1, [r6, #0]
 8008524:	07d9      	lsls	r1, r3, #31
 8008526:	bf44      	itt	mi
 8008528:	f043 0320 	orrmi.w	r3, r3, #32
 800852c:	6023      	strmi	r3, [r4, #0]
 800852e:	b11d      	cbz	r5, 8008538 <_printf_i+0x19c>
 8008530:	2310      	movs	r3, #16
 8008532:	e7ad      	b.n	8008490 <_printf_i+0xf4>
 8008534:	4826      	ldr	r0, [pc, #152]	@ (80085d0 <_printf_i+0x234>)
 8008536:	e7e9      	b.n	800850c <_printf_i+0x170>
 8008538:	6823      	ldr	r3, [r4, #0]
 800853a:	f023 0320 	bic.w	r3, r3, #32
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	e7f6      	b.n	8008530 <_printf_i+0x194>
 8008542:	4616      	mov	r6, r2
 8008544:	e7bd      	b.n	80084c2 <_printf_i+0x126>
 8008546:	6833      	ldr	r3, [r6, #0]
 8008548:	6825      	ldr	r5, [r4, #0]
 800854a:	6961      	ldr	r1, [r4, #20]
 800854c:	1d18      	adds	r0, r3, #4
 800854e:	6030      	str	r0, [r6, #0]
 8008550:	062e      	lsls	r6, r5, #24
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	d501      	bpl.n	800855a <_printf_i+0x1be>
 8008556:	6019      	str	r1, [r3, #0]
 8008558:	e002      	b.n	8008560 <_printf_i+0x1c4>
 800855a:	0668      	lsls	r0, r5, #25
 800855c:	d5fb      	bpl.n	8008556 <_printf_i+0x1ba>
 800855e:	8019      	strh	r1, [r3, #0]
 8008560:	2300      	movs	r3, #0
 8008562:	6123      	str	r3, [r4, #16]
 8008564:	4616      	mov	r6, r2
 8008566:	e7bc      	b.n	80084e2 <_printf_i+0x146>
 8008568:	6833      	ldr	r3, [r6, #0]
 800856a:	1d1a      	adds	r2, r3, #4
 800856c:	6032      	str	r2, [r6, #0]
 800856e:	681e      	ldr	r6, [r3, #0]
 8008570:	6862      	ldr	r2, [r4, #4]
 8008572:	2100      	movs	r1, #0
 8008574:	4630      	mov	r0, r6
 8008576:	f7f7 fe4b 	bl	8000210 <memchr>
 800857a:	b108      	cbz	r0, 8008580 <_printf_i+0x1e4>
 800857c:	1b80      	subs	r0, r0, r6
 800857e:	6060      	str	r0, [r4, #4]
 8008580:	6863      	ldr	r3, [r4, #4]
 8008582:	6123      	str	r3, [r4, #16]
 8008584:	2300      	movs	r3, #0
 8008586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800858a:	e7aa      	b.n	80084e2 <_printf_i+0x146>
 800858c:	6923      	ldr	r3, [r4, #16]
 800858e:	4632      	mov	r2, r6
 8008590:	4649      	mov	r1, r9
 8008592:	4640      	mov	r0, r8
 8008594:	47d0      	blx	sl
 8008596:	3001      	adds	r0, #1
 8008598:	d0ad      	beq.n	80084f6 <_printf_i+0x15a>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	079b      	lsls	r3, r3, #30
 800859e:	d413      	bmi.n	80085c8 <_printf_i+0x22c>
 80085a0:	68e0      	ldr	r0, [r4, #12]
 80085a2:	9b03      	ldr	r3, [sp, #12]
 80085a4:	4298      	cmp	r0, r3
 80085a6:	bfb8      	it	lt
 80085a8:	4618      	movlt	r0, r3
 80085aa:	e7a6      	b.n	80084fa <_printf_i+0x15e>
 80085ac:	2301      	movs	r3, #1
 80085ae:	4632      	mov	r2, r6
 80085b0:	4649      	mov	r1, r9
 80085b2:	4640      	mov	r0, r8
 80085b4:	47d0      	blx	sl
 80085b6:	3001      	adds	r0, #1
 80085b8:	d09d      	beq.n	80084f6 <_printf_i+0x15a>
 80085ba:	3501      	adds	r5, #1
 80085bc:	68e3      	ldr	r3, [r4, #12]
 80085be:	9903      	ldr	r1, [sp, #12]
 80085c0:	1a5b      	subs	r3, r3, r1
 80085c2:	42ab      	cmp	r3, r5
 80085c4:	dcf2      	bgt.n	80085ac <_printf_i+0x210>
 80085c6:	e7eb      	b.n	80085a0 <_printf_i+0x204>
 80085c8:	2500      	movs	r5, #0
 80085ca:	f104 0619 	add.w	r6, r4, #25
 80085ce:	e7f5      	b.n	80085bc <_printf_i+0x220>
 80085d0:	080091d3 	.word	0x080091d3
 80085d4:	080091e4 	.word	0x080091e4

080085d8 <__sflush_r>:
 80085d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e0:	0716      	lsls	r6, r2, #28
 80085e2:	4605      	mov	r5, r0
 80085e4:	460c      	mov	r4, r1
 80085e6:	d454      	bmi.n	8008692 <__sflush_r+0xba>
 80085e8:	684b      	ldr	r3, [r1, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	dc02      	bgt.n	80085f4 <__sflush_r+0x1c>
 80085ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	dd48      	ble.n	8008686 <__sflush_r+0xae>
 80085f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085f6:	2e00      	cmp	r6, #0
 80085f8:	d045      	beq.n	8008686 <__sflush_r+0xae>
 80085fa:	2300      	movs	r3, #0
 80085fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008600:	682f      	ldr	r7, [r5, #0]
 8008602:	6a21      	ldr	r1, [r4, #32]
 8008604:	602b      	str	r3, [r5, #0]
 8008606:	d030      	beq.n	800866a <__sflush_r+0x92>
 8008608:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	0759      	lsls	r1, r3, #29
 800860e:	d505      	bpl.n	800861c <__sflush_r+0x44>
 8008610:	6863      	ldr	r3, [r4, #4]
 8008612:	1ad2      	subs	r2, r2, r3
 8008614:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008616:	b10b      	cbz	r3, 800861c <__sflush_r+0x44>
 8008618:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800861a:	1ad2      	subs	r2, r2, r3
 800861c:	2300      	movs	r3, #0
 800861e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008620:	6a21      	ldr	r1, [r4, #32]
 8008622:	4628      	mov	r0, r5
 8008624:	47b0      	blx	r6
 8008626:	1c43      	adds	r3, r0, #1
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	d106      	bne.n	800863a <__sflush_r+0x62>
 800862c:	6829      	ldr	r1, [r5, #0]
 800862e:	291d      	cmp	r1, #29
 8008630:	d82b      	bhi.n	800868a <__sflush_r+0xb2>
 8008632:	4a2a      	ldr	r2, [pc, #168]	@ (80086dc <__sflush_r+0x104>)
 8008634:	40ca      	lsrs	r2, r1
 8008636:	07d6      	lsls	r6, r2, #31
 8008638:	d527      	bpl.n	800868a <__sflush_r+0xb2>
 800863a:	2200      	movs	r2, #0
 800863c:	6062      	str	r2, [r4, #4]
 800863e:	04d9      	lsls	r1, r3, #19
 8008640:	6922      	ldr	r2, [r4, #16]
 8008642:	6022      	str	r2, [r4, #0]
 8008644:	d504      	bpl.n	8008650 <__sflush_r+0x78>
 8008646:	1c42      	adds	r2, r0, #1
 8008648:	d101      	bne.n	800864e <__sflush_r+0x76>
 800864a:	682b      	ldr	r3, [r5, #0]
 800864c:	b903      	cbnz	r3, 8008650 <__sflush_r+0x78>
 800864e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008652:	602f      	str	r7, [r5, #0]
 8008654:	b1b9      	cbz	r1, 8008686 <__sflush_r+0xae>
 8008656:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800865a:	4299      	cmp	r1, r3
 800865c:	d002      	beq.n	8008664 <__sflush_r+0x8c>
 800865e:	4628      	mov	r0, r5
 8008660:	f7ff fbd6 	bl	8007e10 <_free_r>
 8008664:	2300      	movs	r3, #0
 8008666:	6363      	str	r3, [r4, #52]	@ 0x34
 8008668:	e00d      	b.n	8008686 <__sflush_r+0xae>
 800866a:	2301      	movs	r3, #1
 800866c:	4628      	mov	r0, r5
 800866e:	47b0      	blx	r6
 8008670:	4602      	mov	r2, r0
 8008672:	1c50      	adds	r0, r2, #1
 8008674:	d1c9      	bne.n	800860a <__sflush_r+0x32>
 8008676:	682b      	ldr	r3, [r5, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0c6      	beq.n	800860a <__sflush_r+0x32>
 800867c:	2b1d      	cmp	r3, #29
 800867e:	d001      	beq.n	8008684 <__sflush_r+0xac>
 8008680:	2b16      	cmp	r3, #22
 8008682:	d11e      	bne.n	80086c2 <__sflush_r+0xea>
 8008684:	602f      	str	r7, [r5, #0]
 8008686:	2000      	movs	r0, #0
 8008688:	e022      	b.n	80086d0 <__sflush_r+0xf8>
 800868a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800868e:	b21b      	sxth	r3, r3
 8008690:	e01b      	b.n	80086ca <__sflush_r+0xf2>
 8008692:	690f      	ldr	r7, [r1, #16]
 8008694:	2f00      	cmp	r7, #0
 8008696:	d0f6      	beq.n	8008686 <__sflush_r+0xae>
 8008698:	0793      	lsls	r3, r2, #30
 800869a:	680e      	ldr	r6, [r1, #0]
 800869c:	bf08      	it	eq
 800869e:	694b      	ldreq	r3, [r1, #20]
 80086a0:	600f      	str	r7, [r1, #0]
 80086a2:	bf18      	it	ne
 80086a4:	2300      	movne	r3, #0
 80086a6:	eba6 0807 	sub.w	r8, r6, r7
 80086aa:	608b      	str	r3, [r1, #8]
 80086ac:	f1b8 0f00 	cmp.w	r8, #0
 80086b0:	dde9      	ble.n	8008686 <__sflush_r+0xae>
 80086b2:	6a21      	ldr	r1, [r4, #32]
 80086b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086b6:	4643      	mov	r3, r8
 80086b8:	463a      	mov	r2, r7
 80086ba:	4628      	mov	r0, r5
 80086bc:	47b0      	blx	r6
 80086be:	2800      	cmp	r0, #0
 80086c0:	dc08      	bgt.n	80086d4 <__sflush_r+0xfc>
 80086c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ca:	81a3      	strh	r3, [r4, #12]
 80086cc:	f04f 30ff 	mov.w	r0, #4294967295
 80086d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d4:	4407      	add	r7, r0
 80086d6:	eba8 0800 	sub.w	r8, r8, r0
 80086da:	e7e7      	b.n	80086ac <__sflush_r+0xd4>
 80086dc:	20400001 	.word	0x20400001

080086e0 <_fflush_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	690b      	ldr	r3, [r1, #16]
 80086e4:	4605      	mov	r5, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	b913      	cbnz	r3, 80086f0 <_fflush_r+0x10>
 80086ea:	2500      	movs	r5, #0
 80086ec:	4628      	mov	r0, r5
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	b118      	cbz	r0, 80086fa <_fflush_r+0x1a>
 80086f2:	6a03      	ldr	r3, [r0, #32]
 80086f4:	b90b      	cbnz	r3, 80086fa <_fflush_r+0x1a>
 80086f6:	f7ff f9d7 	bl	8007aa8 <__sinit>
 80086fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0f3      	beq.n	80086ea <_fflush_r+0xa>
 8008702:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008704:	07d0      	lsls	r0, r2, #31
 8008706:	d404      	bmi.n	8008712 <_fflush_r+0x32>
 8008708:	0599      	lsls	r1, r3, #22
 800870a:	d402      	bmi.n	8008712 <_fflush_r+0x32>
 800870c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800870e:	f7ff fb50 	bl	8007db2 <__retarget_lock_acquire_recursive>
 8008712:	4628      	mov	r0, r5
 8008714:	4621      	mov	r1, r4
 8008716:	f7ff ff5f 	bl	80085d8 <__sflush_r>
 800871a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800871c:	07da      	lsls	r2, r3, #31
 800871e:	4605      	mov	r5, r0
 8008720:	d4e4      	bmi.n	80086ec <_fflush_r+0xc>
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	059b      	lsls	r3, r3, #22
 8008726:	d4e1      	bmi.n	80086ec <_fflush_r+0xc>
 8008728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800872a:	f7ff fb43 	bl	8007db4 <__retarget_lock_release_recursive>
 800872e:	e7dd      	b.n	80086ec <_fflush_r+0xc>

08008730 <fiprintf>:
 8008730:	b40e      	push	{r1, r2, r3}
 8008732:	b503      	push	{r0, r1, lr}
 8008734:	4601      	mov	r1, r0
 8008736:	ab03      	add	r3, sp, #12
 8008738:	4805      	ldr	r0, [pc, #20]	@ (8008750 <fiprintf+0x20>)
 800873a:	f853 2b04 	ldr.w	r2, [r3], #4
 800873e:	6800      	ldr	r0, [r0, #0]
 8008740:	9301      	str	r3, [sp, #4]
 8008742:	f000 f88f 	bl	8008864 <_vfiprintf_r>
 8008746:	b002      	add	sp, #8
 8008748:	f85d eb04 	ldr.w	lr, [sp], #4
 800874c:	b003      	add	sp, #12
 800874e:	4770      	bx	lr
 8008750:	2000004c 	.word	0x2000004c

08008754 <memmove>:
 8008754:	4288      	cmp	r0, r1
 8008756:	b510      	push	{r4, lr}
 8008758:	eb01 0402 	add.w	r4, r1, r2
 800875c:	d902      	bls.n	8008764 <memmove+0x10>
 800875e:	4284      	cmp	r4, r0
 8008760:	4623      	mov	r3, r4
 8008762:	d807      	bhi.n	8008774 <memmove+0x20>
 8008764:	1e43      	subs	r3, r0, #1
 8008766:	42a1      	cmp	r1, r4
 8008768:	d008      	beq.n	800877c <memmove+0x28>
 800876a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800876e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008772:	e7f8      	b.n	8008766 <memmove+0x12>
 8008774:	4402      	add	r2, r0
 8008776:	4601      	mov	r1, r0
 8008778:	428a      	cmp	r2, r1
 800877a:	d100      	bne.n	800877e <memmove+0x2a>
 800877c:	bd10      	pop	{r4, pc}
 800877e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008786:	e7f7      	b.n	8008778 <memmove+0x24>

08008788 <_sbrk_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d06      	ldr	r5, [pc, #24]	@ (80087a4 <_sbrk_r+0x1c>)
 800878c:	2300      	movs	r3, #0
 800878e:	4604      	mov	r4, r0
 8008790:	4608      	mov	r0, r1
 8008792:	602b      	str	r3, [r5, #0]
 8008794:	f7f8 fe36 	bl	8001404 <_sbrk>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_sbrk_r+0x1a>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_sbrk_r+0x1a>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	20004d14 	.word	0x20004d14

080087a8 <abort>:
 80087a8:	b508      	push	{r3, lr}
 80087aa:	2006      	movs	r0, #6
 80087ac:	f000 fa2e 	bl	8008c0c <raise>
 80087b0:	2001      	movs	r0, #1
 80087b2:	f7f8 fdaf 	bl	8001314 <_exit>

080087b6 <_realloc_r>:
 80087b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ba:	4607      	mov	r7, r0
 80087bc:	4614      	mov	r4, r2
 80087be:	460d      	mov	r5, r1
 80087c0:	b921      	cbnz	r1, 80087cc <_realloc_r+0x16>
 80087c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087c6:	4611      	mov	r1, r2
 80087c8:	f7ff bb96 	b.w	8007ef8 <_malloc_r>
 80087cc:	b92a      	cbnz	r2, 80087da <_realloc_r+0x24>
 80087ce:	f7ff fb1f 	bl	8007e10 <_free_r>
 80087d2:	4625      	mov	r5, r4
 80087d4:	4628      	mov	r0, r5
 80087d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087da:	f000 fa33 	bl	8008c44 <_malloc_usable_size_r>
 80087de:	4284      	cmp	r4, r0
 80087e0:	4606      	mov	r6, r0
 80087e2:	d802      	bhi.n	80087ea <_realloc_r+0x34>
 80087e4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087e8:	d8f4      	bhi.n	80087d4 <_realloc_r+0x1e>
 80087ea:	4621      	mov	r1, r4
 80087ec:	4638      	mov	r0, r7
 80087ee:	f7ff fb83 	bl	8007ef8 <_malloc_r>
 80087f2:	4680      	mov	r8, r0
 80087f4:	b908      	cbnz	r0, 80087fa <_realloc_r+0x44>
 80087f6:	4645      	mov	r5, r8
 80087f8:	e7ec      	b.n	80087d4 <_realloc_r+0x1e>
 80087fa:	42b4      	cmp	r4, r6
 80087fc:	4622      	mov	r2, r4
 80087fe:	4629      	mov	r1, r5
 8008800:	bf28      	it	cs
 8008802:	4632      	movcs	r2, r6
 8008804:	f7ff fad7 	bl	8007db6 <memcpy>
 8008808:	4629      	mov	r1, r5
 800880a:	4638      	mov	r0, r7
 800880c:	f7ff fb00 	bl	8007e10 <_free_r>
 8008810:	e7f1      	b.n	80087f6 <_realloc_r+0x40>

08008812 <__sfputc_r>:
 8008812:	6893      	ldr	r3, [r2, #8]
 8008814:	3b01      	subs	r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	b410      	push	{r4}
 800881a:	6093      	str	r3, [r2, #8]
 800881c:	da08      	bge.n	8008830 <__sfputc_r+0x1e>
 800881e:	6994      	ldr	r4, [r2, #24]
 8008820:	42a3      	cmp	r3, r4
 8008822:	db01      	blt.n	8008828 <__sfputc_r+0x16>
 8008824:	290a      	cmp	r1, #10
 8008826:	d103      	bne.n	8008830 <__sfputc_r+0x1e>
 8008828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800882c:	f000 b932 	b.w	8008a94 <__swbuf_r>
 8008830:	6813      	ldr	r3, [r2, #0]
 8008832:	1c58      	adds	r0, r3, #1
 8008834:	6010      	str	r0, [r2, #0]
 8008836:	7019      	strb	r1, [r3, #0]
 8008838:	4608      	mov	r0, r1
 800883a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800883e:	4770      	bx	lr

08008840 <__sfputs_r>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	4606      	mov	r6, r0
 8008844:	460f      	mov	r7, r1
 8008846:	4614      	mov	r4, r2
 8008848:	18d5      	adds	r5, r2, r3
 800884a:	42ac      	cmp	r4, r5
 800884c:	d101      	bne.n	8008852 <__sfputs_r+0x12>
 800884e:	2000      	movs	r0, #0
 8008850:	e007      	b.n	8008862 <__sfputs_r+0x22>
 8008852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008856:	463a      	mov	r2, r7
 8008858:	4630      	mov	r0, r6
 800885a:	f7ff ffda 	bl	8008812 <__sfputc_r>
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	d1f3      	bne.n	800884a <__sfputs_r+0xa>
 8008862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008864 <_vfiprintf_r>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	460d      	mov	r5, r1
 800886a:	b09d      	sub	sp, #116	@ 0x74
 800886c:	4614      	mov	r4, r2
 800886e:	4698      	mov	r8, r3
 8008870:	4606      	mov	r6, r0
 8008872:	b118      	cbz	r0, 800887c <_vfiprintf_r+0x18>
 8008874:	6a03      	ldr	r3, [r0, #32]
 8008876:	b90b      	cbnz	r3, 800887c <_vfiprintf_r+0x18>
 8008878:	f7ff f916 	bl	8007aa8 <__sinit>
 800887c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800887e:	07d9      	lsls	r1, r3, #31
 8008880:	d405      	bmi.n	800888e <_vfiprintf_r+0x2a>
 8008882:	89ab      	ldrh	r3, [r5, #12]
 8008884:	059a      	lsls	r2, r3, #22
 8008886:	d402      	bmi.n	800888e <_vfiprintf_r+0x2a>
 8008888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800888a:	f7ff fa92 	bl	8007db2 <__retarget_lock_acquire_recursive>
 800888e:	89ab      	ldrh	r3, [r5, #12]
 8008890:	071b      	lsls	r3, r3, #28
 8008892:	d501      	bpl.n	8008898 <_vfiprintf_r+0x34>
 8008894:	692b      	ldr	r3, [r5, #16]
 8008896:	b99b      	cbnz	r3, 80088c0 <_vfiprintf_r+0x5c>
 8008898:	4629      	mov	r1, r5
 800889a:	4630      	mov	r0, r6
 800889c:	f000 f938 	bl	8008b10 <__swsetup_r>
 80088a0:	b170      	cbz	r0, 80088c0 <_vfiprintf_r+0x5c>
 80088a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088a4:	07dc      	lsls	r4, r3, #31
 80088a6:	d504      	bpl.n	80088b2 <_vfiprintf_r+0x4e>
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	b01d      	add	sp, #116	@ 0x74
 80088ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b2:	89ab      	ldrh	r3, [r5, #12]
 80088b4:	0598      	lsls	r0, r3, #22
 80088b6:	d4f7      	bmi.n	80088a8 <_vfiprintf_r+0x44>
 80088b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ba:	f7ff fa7b 	bl	8007db4 <__retarget_lock_release_recursive>
 80088be:	e7f3      	b.n	80088a8 <_vfiprintf_r+0x44>
 80088c0:	2300      	movs	r3, #0
 80088c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80088c4:	2320      	movs	r3, #32
 80088c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80088ce:	2330      	movs	r3, #48	@ 0x30
 80088d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a80 <_vfiprintf_r+0x21c>
 80088d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088d8:	f04f 0901 	mov.w	r9, #1
 80088dc:	4623      	mov	r3, r4
 80088de:	469a      	mov	sl, r3
 80088e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088e4:	b10a      	cbz	r2, 80088ea <_vfiprintf_r+0x86>
 80088e6:	2a25      	cmp	r2, #37	@ 0x25
 80088e8:	d1f9      	bne.n	80088de <_vfiprintf_r+0x7a>
 80088ea:	ebba 0b04 	subs.w	fp, sl, r4
 80088ee:	d00b      	beq.n	8008908 <_vfiprintf_r+0xa4>
 80088f0:	465b      	mov	r3, fp
 80088f2:	4622      	mov	r2, r4
 80088f4:	4629      	mov	r1, r5
 80088f6:	4630      	mov	r0, r6
 80088f8:	f7ff ffa2 	bl	8008840 <__sfputs_r>
 80088fc:	3001      	adds	r0, #1
 80088fe:	f000 80a7 	beq.w	8008a50 <_vfiprintf_r+0x1ec>
 8008902:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008904:	445a      	add	r2, fp
 8008906:	9209      	str	r2, [sp, #36]	@ 0x24
 8008908:	f89a 3000 	ldrb.w	r3, [sl]
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 809f 	beq.w	8008a50 <_vfiprintf_r+0x1ec>
 8008912:	2300      	movs	r3, #0
 8008914:	f04f 32ff 	mov.w	r2, #4294967295
 8008918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800891c:	f10a 0a01 	add.w	sl, sl, #1
 8008920:	9304      	str	r3, [sp, #16]
 8008922:	9307      	str	r3, [sp, #28]
 8008924:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008928:	931a      	str	r3, [sp, #104]	@ 0x68
 800892a:	4654      	mov	r4, sl
 800892c:	2205      	movs	r2, #5
 800892e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008932:	4853      	ldr	r0, [pc, #332]	@ (8008a80 <_vfiprintf_r+0x21c>)
 8008934:	f7f7 fc6c 	bl	8000210 <memchr>
 8008938:	9a04      	ldr	r2, [sp, #16]
 800893a:	b9d8      	cbnz	r0, 8008974 <_vfiprintf_r+0x110>
 800893c:	06d1      	lsls	r1, r2, #27
 800893e:	bf44      	itt	mi
 8008940:	2320      	movmi	r3, #32
 8008942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008946:	0713      	lsls	r3, r2, #28
 8008948:	bf44      	itt	mi
 800894a:	232b      	movmi	r3, #43	@ 0x2b
 800894c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008950:	f89a 3000 	ldrb.w	r3, [sl]
 8008954:	2b2a      	cmp	r3, #42	@ 0x2a
 8008956:	d015      	beq.n	8008984 <_vfiprintf_r+0x120>
 8008958:	9a07      	ldr	r2, [sp, #28]
 800895a:	4654      	mov	r4, sl
 800895c:	2000      	movs	r0, #0
 800895e:	f04f 0c0a 	mov.w	ip, #10
 8008962:	4621      	mov	r1, r4
 8008964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008968:	3b30      	subs	r3, #48	@ 0x30
 800896a:	2b09      	cmp	r3, #9
 800896c:	d94b      	bls.n	8008a06 <_vfiprintf_r+0x1a2>
 800896e:	b1b0      	cbz	r0, 800899e <_vfiprintf_r+0x13a>
 8008970:	9207      	str	r2, [sp, #28]
 8008972:	e014      	b.n	800899e <_vfiprintf_r+0x13a>
 8008974:	eba0 0308 	sub.w	r3, r0, r8
 8008978:	fa09 f303 	lsl.w	r3, r9, r3
 800897c:	4313      	orrs	r3, r2
 800897e:	9304      	str	r3, [sp, #16]
 8008980:	46a2      	mov	sl, r4
 8008982:	e7d2      	b.n	800892a <_vfiprintf_r+0xc6>
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	1d19      	adds	r1, r3, #4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	9103      	str	r1, [sp, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	bfbb      	ittet	lt
 8008990:	425b      	neglt	r3, r3
 8008992:	f042 0202 	orrlt.w	r2, r2, #2
 8008996:	9307      	strge	r3, [sp, #28]
 8008998:	9307      	strlt	r3, [sp, #28]
 800899a:	bfb8      	it	lt
 800899c:	9204      	strlt	r2, [sp, #16]
 800899e:	7823      	ldrb	r3, [r4, #0]
 80089a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80089a2:	d10a      	bne.n	80089ba <_vfiprintf_r+0x156>
 80089a4:	7863      	ldrb	r3, [r4, #1]
 80089a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80089a8:	d132      	bne.n	8008a10 <_vfiprintf_r+0x1ac>
 80089aa:	9b03      	ldr	r3, [sp, #12]
 80089ac:	1d1a      	adds	r2, r3, #4
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	9203      	str	r2, [sp, #12]
 80089b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089b6:	3402      	adds	r4, #2
 80089b8:	9305      	str	r3, [sp, #20]
 80089ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a90 <_vfiprintf_r+0x22c>
 80089be:	7821      	ldrb	r1, [r4, #0]
 80089c0:	2203      	movs	r2, #3
 80089c2:	4650      	mov	r0, sl
 80089c4:	f7f7 fc24 	bl	8000210 <memchr>
 80089c8:	b138      	cbz	r0, 80089da <_vfiprintf_r+0x176>
 80089ca:	9b04      	ldr	r3, [sp, #16]
 80089cc:	eba0 000a 	sub.w	r0, r0, sl
 80089d0:	2240      	movs	r2, #64	@ 0x40
 80089d2:	4082      	lsls	r2, r0
 80089d4:	4313      	orrs	r3, r2
 80089d6:	3401      	adds	r4, #1
 80089d8:	9304      	str	r3, [sp, #16]
 80089da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089de:	4829      	ldr	r0, [pc, #164]	@ (8008a84 <_vfiprintf_r+0x220>)
 80089e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089e4:	2206      	movs	r2, #6
 80089e6:	f7f7 fc13 	bl	8000210 <memchr>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d03f      	beq.n	8008a6e <_vfiprintf_r+0x20a>
 80089ee:	4b26      	ldr	r3, [pc, #152]	@ (8008a88 <_vfiprintf_r+0x224>)
 80089f0:	bb1b      	cbnz	r3, 8008a3a <_vfiprintf_r+0x1d6>
 80089f2:	9b03      	ldr	r3, [sp, #12]
 80089f4:	3307      	adds	r3, #7
 80089f6:	f023 0307 	bic.w	r3, r3, #7
 80089fa:	3308      	adds	r3, #8
 80089fc:	9303      	str	r3, [sp, #12]
 80089fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a00:	443b      	add	r3, r7
 8008a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a04:	e76a      	b.n	80088dc <_vfiprintf_r+0x78>
 8008a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	2001      	movs	r0, #1
 8008a0e:	e7a8      	b.n	8008962 <_vfiprintf_r+0xfe>
 8008a10:	2300      	movs	r3, #0
 8008a12:	3401      	adds	r4, #1
 8008a14:	9305      	str	r3, [sp, #20]
 8008a16:	4619      	mov	r1, r3
 8008a18:	f04f 0c0a 	mov.w	ip, #10
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a22:	3a30      	subs	r2, #48	@ 0x30
 8008a24:	2a09      	cmp	r2, #9
 8008a26:	d903      	bls.n	8008a30 <_vfiprintf_r+0x1cc>
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d0c6      	beq.n	80089ba <_vfiprintf_r+0x156>
 8008a2c:	9105      	str	r1, [sp, #20]
 8008a2e:	e7c4      	b.n	80089ba <_vfiprintf_r+0x156>
 8008a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a34:	4604      	mov	r4, r0
 8008a36:	2301      	movs	r3, #1
 8008a38:	e7f0      	b.n	8008a1c <_vfiprintf_r+0x1b8>
 8008a3a:	ab03      	add	r3, sp, #12
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	462a      	mov	r2, r5
 8008a40:	4b12      	ldr	r3, [pc, #72]	@ (8008a8c <_vfiprintf_r+0x228>)
 8008a42:	a904      	add	r1, sp, #16
 8008a44:	4630      	mov	r0, r6
 8008a46:	f3af 8000 	nop.w
 8008a4a:	4607      	mov	r7, r0
 8008a4c:	1c78      	adds	r0, r7, #1
 8008a4e:	d1d6      	bne.n	80089fe <_vfiprintf_r+0x19a>
 8008a50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a52:	07d9      	lsls	r1, r3, #31
 8008a54:	d405      	bmi.n	8008a62 <_vfiprintf_r+0x1fe>
 8008a56:	89ab      	ldrh	r3, [r5, #12]
 8008a58:	059a      	lsls	r2, r3, #22
 8008a5a:	d402      	bmi.n	8008a62 <_vfiprintf_r+0x1fe>
 8008a5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a5e:	f7ff f9a9 	bl	8007db4 <__retarget_lock_release_recursive>
 8008a62:	89ab      	ldrh	r3, [r5, #12]
 8008a64:	065b      	lsls	r3, r3, #25
 8008a66:	f53f af1f 	bmi.w	80088a8 <_vfiprintf_r+0x44>
 8008a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a6c:	e71e      	b.n	80088ac <_vfiprintf_r+0x48>
 8008a6e:	ab03      	add	r3, sp, #12
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	462a      	mov	r2, r5
 8008a74:	4b05      	ldr	r3, [pc, #20]	@ (8008a8c <_vfiprintf_r+0x228>)
 8008a76:	a904      	add	r1, sp, #16
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f7ff fc8f 	bl	800839c <_printf_i>
 8008a7e:	e7e4      	b.n	8008a4a <_vfiprintf_r+0x1e6>
 8008a80:	080091c2 	.word	0x080091c2
 8008a84:	080091cc 	.word	0x080091cc
 8008a88:	00000000 	.word	0x00000000
 8008a8c:	08008841 	.word	0x08008841
 8008a90:	080091c8 	.word	0x080091c8

08008a94 <__swbuf_r>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	460e      	mov	r6, r1
 8008a98:	4614      	mov	r4, r2
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	b118      	cbz	r0, 8008aa6 <__swbuf_r+0x12>
 8008a9e:	6a03      	ldr	r3, [r0, #32]
 8008aa0:	b90b      	cbnz	r3, 8008aa6 <__swbuf_r+0x12>
 8008aa2:	f7ff f801 	bl	8007aa8 <__sinit>
 8008aa6:	69a3      	ldr	r3, [r4, #24]
 8008aa8:	60a3      	str	r3, [r4, #8]
 8008aaa:	89a3      	ldrh	r3, [r4, #12]
 8008aac:	071a      	lsls	r2, r3, #28
 8008aae:	d501      	bpl.n	8008ab4 <__swbuf_r+0x20>
 8008ab0:	6923      	ldr	r3, [r4, #16]
 8008ab2:	b943      	cbnz	r3, 8008ac6 <__swbuf_r+0x32>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f000 f82a 	bl	8008b10 <__swsetup_r>
 8008abc:	b118      	cbz	r0, 8008ac6 <__swbuf_r+0x32>
 8008abe:	f04f 37ff 	mov.w	r7, #4294967295
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	6922      	ldr	r2, [r4, #16]
 8008aca:	1a98      	subs	r0, r3, r2
 8008acc:	6963      	ldr	r3, [r4, #20]
 8008ace:	b2f6      	uxtb	r6, r6
 8008ad0:	4283      	cmp	r3, r0
 8008ad2:	4637      	mov	r7, r6
 8008ad4:	dc05      	bgt.n	8008ae2 <__swbuf_r+0x4e>
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	4628      	mov	r0, r5
 8008ada:	f7ff fe01 	bl	80086e0 <_fflush_r>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d1ed      	bne.n	8008abe <__swbuf_r+0x2a>
 8008ae2:	68a3      	ldr	r3, [r4, #8]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	60a3      	str	r3, [r4, #8]
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	1c5a      	adds	r2, r3, #1
 8008aec:	6022      	str	r2, [r4, #0]
 8008aee:	701e      	strb	r6, [r3, #0]
 8008af0:	6962      	ldr	r2, [r4, #20]
 8008af2:	1c43      	adds	r3, r0, #1
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d004      	beq.n	8008b02 <__swbuf_r+0x6e>
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	07db      	lsls	r3, r3, #31
 8008afc:	d5e1      	bpl.n	8008ac2 <__swbuf_r+0x2e>
 8008afe:	2e0a      	cmp	r6, #10
 8008b00:	d1df      	bne.n	8008ac2 <__swbuf_r+0x2e>
 8008b02:	4621      	mov	r1, r4
 8008b04:	4628      	mov	r0, r5
 8008b06:	f7ff fdeb 	bl	80086e0 <_fflush_r>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d0d9      	beq.n	8008ac2 <__swbuf_r+0x2e>
 8008b0e:	e7d6      	b.n	8008abe <__swbuf_r+0x2a>

08008b10 <__swsetup_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4b29      	ldr	r3, [pc, #164]	@ (8008bb8 <__swsetup_r+0xa8>)
 8008b14:	4605      	mov	r5, r0
 8008b16:	6818      	ldr	r0, [r3, #0]
 8008b18:	460c      	mov	r4, r1
 8008b1a:	b118      	cbz	r0, 8008b24 <__swsetup_r+0x14>
 8008b1c:	6a03      	ldr	r3, [r0, #32]
 8008b1e:	b90b      	cbnz	r3, 8008b24 <__swsetup_r+0x14>
 8008b20:	f7fe ffc2 	bl	8007aa8 <__sinit>
 8008b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b28:	0719      	lsls	r1, r3, #28
 8008b2a:	d422      	bmi.n	8008b72 <__swsetup_r+0x62>
 8008b2c:	06da      	lsls	r2, r3, #27
 8008b2e:	d407      	bmi.n	8008b40 <__swsetup_r+0x30>
 8008b30:	2209      	movs	r2, #9
 8008b32:	602a      	str	r2, [r5, #0]
 8008b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b38:	81a3      	strh	r3, [r4, #12]
 8008b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3e:	e033      	b.n	8008ba8 <__swsetup_r+0x98>
 8008b40:	0758      	lsls	r0, r3, #29
 8008b42:	d512      	bpl.n	8008b6a <__swsetup_r+0x5a>
 8008b44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b46:	b141      	cbz	r1, 8008b5a <__swsetup_r+0x4a>
 8008b48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b4c:	4299      	cmp	r1, r3
 8008b4e:	d002      	beq.n	8008b56 <__swsetup_r+0x46>
 8008b50:	4628      	mov	r0, r5
 8008b52:	f7ff f95d 	bl	8007e10 <_free_r>
 8008b56:	2300      	movs	r3, #0
 8008b58:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b60:	81a3      	strh	r3, [r4, #12]
 8008b62:	2300      	movs	r3, #0
 8008b64:	6063      	str	r3, [r4, #4]
 8008b66:	6923      	ldr	r3, [r4, #16]
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	89a3      	ldrh	r3, [r4, #12]
 8008b6c:	f043 0308 	orr.w	r3, r3, #8
 8008b70:	81a3      	strh	r3, [r4, #12]
 8008b72:	6923      	ldr	r3, [r4, #16]
 8008b74:	b94b      	cbnz	r3, 8008b8a <__swsetup_r+0x7a>
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b80:	d003      	beq.n	8008b8a <__swsetup_r+0x7a>
 8008b82:	4621      	mov	r1, r4
 8008b84:	4628      	mov	r0, r5
 8008b86:	f000 f88b 	bl	8008ca0 <__smakebuf_r>
 8008b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b8e:	f013 0201 	ands.w	r2, r3, #1
 8008b92:	d00a      	beq.n	8008baa <__swsetup_r+0x9a>
 8008b94:	2200      	movs	r2, #0
 8008b96:	60a2      	str	r2, [r4, #8]
 8008b98:	6962      	ldr	r2, [r4, #20]
 8008b9a:	4252      	negs	r2, r2
 8008b9c:	61a2      	str	r2, [r4, #24]
 8008b9e:	6922      	ldr	r2, [r4, #16]
 8008ba0:	b942      	cbnz	r2, 8008bb4 <__swsetup_r+0xa4>
 8008ba2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ba6:	d1c5      	bne.n	8008b34 <__swsetup_r+0x24>
 8008ba8:	bd38      	pop	{r3, r4, r5, pc}
 8008baa:	0799      	lsls	r1, r3, #30
 8008bac:	bf58      	it	pl
 8008bae:	6962      	ldrpl	r2, [r4, #20]
 8008bb0:	60a2      	str	r2, [r4, #8]
 8008bb2:	e7f4      	b.n	8008b9e <__swsetup_r+0x8e>
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	e7f7      	b.n	8008ba8 <__swsetup_r+0x98>
 8008bb8:	2000004c 	.word	0x2000004c

08008bbc <_raise_r>:
 8008bbc:	291f      	cmp	r1, #31
 8008bbe:	b538      	push	{r3, r4, r5, lr}
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	d904      	bls.n	8008bd0 <_raise_r+0x14>
 8008bc6:	2316      	movs	r3, #22
 8008bc8:	6003      	str	r3, [r0, #0]
 8008bca:	f04f 30ff 	mov.w	r0, #4294967295
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008bd2:	b112      	cbz	r2, 8008bda <_raise_r+0x1e>
 8008bd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bd8:	b94b      	cbnz	r3, 8008bee <_raise_r+0x32>
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f000 f830 	bl	8008c40 <_getpid_r>
 8008be0:	4622      	mov	r2, r4
 8008be2:	4601      	mov	r1, r0
 8008be4:	4628      	mov	r0, r5
 8008be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bea:	f000 b817 	b.w	8008c1c <_kill_r>
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d00a      	beq.n	8008c08 <_raise_r+0x4c>
 8008bf2:	1c59      	adds	r1, r3, #1
 8008bf4:	d103      	bne.n	8008bfe <_raise_r+0x42>
 8008bf6:	2316      	movs	r3, #22
 8008bf8:	6003      	str	r3, [r0, #0]
 8008bfa:	2001      	movs	r0, #1
 8008bfc:	e7e7      	b.n	8008bce <_raise_r+0x12>
 8008bfe:	2100      	movs	r1, #0
 8008c00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c04:	4620      	mov	r0, r4
 8008c06:	4798      	blx	r3
 8008c08:	2000      	movs	r0, #0
 8008c0a:	e7e0      	b.n	8008bce <_raise_r+0x12>

08008c0c <raise>:
 8008c0c:	4b02      	ldr	r3, [pc, #8]	@ (8008c18 <raise+0xc>)
 8008c0e:	4601      	mov	r1, r0
 8008c10:	6818      	ldr	r0, [r3, #0]
 8008c12:	f7ff bfd3 	b.w	8008bbc <_raise_r>
 8008c16:	bf00      	nop
 8008c18:	2000004c 	.word	0x2000004c

08008c1c <_kill_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4d07      	ldr	r5, [pc, #28]	@ (8008c3c <_kill_r+0x20>)
 8008c20:	2300      	movs	r3, #0
 8008c22:	4604      	mov	r4, r0
 8008c24:	4608      	mov	r0, r1
 8008c26:	4611      	mov	r1, r2
 8008c28:	602b      	str	r3, [r5, #0]
 8008c2a:	f7f8 fb63 	bl	80012f4 <_kill>
 8008c2e:	1c43      	adds	r3, r0, #1
 8008c30:	d102      	bne.n	8008c38 <_kill_r+0x1c>
 8008c32:	682b      	ldr	r3, [r5, #0]
 8008c34:	b103      	cbz	r3, 8008c38 <_kill_r+0x1c>
 8008c36:	6023      	str	r3, [r4, #0]
 8008c38:	bd38      	pop	{r3, r4, r5, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20004d14 	.word	0x20004d14

08008c40 <_getpid_r>:
 8008c40:	f7f8 bb50 	b.w	80012e4 <_getpid>

08008c44 <_malloc_usable_size_r>:
 8008c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c48:	1f18      	subs	r0, r3, #4
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	bfbc      	itt	lt
 8008c4e:	580b      	ldrlt	r3, [r1, r0]
 8008c50:	18c0      	addlt	r0, r0, r3
 8008c52:	4770      	bx	lr

08008c54 <__swhatbuf_r>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	460c      	mov	r4, r1
 8008c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	b096      	sub	sp, #88	@ 0x58
 8008c60:	4615      	mov	r5, r2
 8008c62:	461e      	mov	r6, r3
 8008c64:	da0d      	bge.n	8008c82 <__swhatbuf_r+0x2e>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c6c:	f04f 0100 	mov.w	r1, #0
 8008c70:	bf14      	ite	ne
 8008c72:	2340      	movne	r3, #64	@ 0x40
 8008c74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c78:	2000      	movs	r0, #0
 8008c7a:	6031      	str	r1, [r6, #0]
 8008c7c:	602b      	str	r3, [r5, #0]
 8008c7e:	b016      	add	sp, #88	@ 0x58
 8008c80:	bd70      	pop	{r4, r5, r6, pc}
 8008c82:	466a      	mov	r2, sp
 8008c84:	f000 f848 	bl	8008d18 <_fstat_r>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	dbec      	blt.n	8008c66 <__swhatbuf_r+0x12>
 8008c8c:	9901      	ldr	r1, [sp, #4]
 8008c8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c96:	4259      	negs	r1, r3
 8008c98:	4159      	adcs	r1, r3
 8008c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c9e:	e7eb      	b.n	8008c78 <__swhatbuf_r+0x24>

08008ca0 <__smakebuf_r>:
 8008ca0:	898b      	ldrh	r3, [r1, #12]
 8008ca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ca4:	079d      	lsls	r5, r3, #30
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	460c      	mov	r4, r1
 8008caa:	d507      	bpl.n	8008cbc <__smakebuf_r+0x1c>
 8008cac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	6123      	str	r3, [r4, #16]
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	6163      	str	r3, [r4, #20]
 8008cb8:	b003      	add	sp, #12
 8008cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cbc:	ab01      	add	r3, sp, #4
 8008cbe:	466a      	mov	r2, sp
 8008cc0:	f7ff ffc8 	bl	8008c54 <__swhatbuf_r>
 8008cc4:	9f00      	ldr	r7, [sp, #0]
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	4639      	mov	r1, r7
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7ff f914 	bl	8007ef8 <_malloc_r>
 8008cd0:	b948      	cbnz	r0, 8008ce6 <__smakebuf_r+0x46>
 8008cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd6:	059a      	lsls	r2, r3, #22
 8008cd8:	d4ee      	bmi.n	8008cb8 <__smakebuf_r+0x18>
 8008cda:	f023 0303 	bic.w	r3, r3, #3
 8008cde:	f043 0302 	orr.w	r3, r3, #2
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	e7e2      	b.n	8008cac <__smakebuf_r+0xc>
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	6020      	str	r0, [r4, #0]
 8008cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cee:	81a3      	strh	r3, [r4, #12]
 8008cf0:	9b01      	ldr	r3, [sp, #4]
 8008cf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008cf6:	b15b      	cbz	r3, 8008d10 <__smakebuf_r+0x70>
 8008cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f000 f81d 	bl	8008d3c <_isatty_r>
 8008d02:	b128      	cbz	r0, 8008d10 <__smakebuf_r+0x70>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f023 0303 	bic.w	r3, r3, #3
 8008d0a:	f043 0301 	orr.w	r3, r3, #1
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	431d      	orrs	r5, r3
 8008d14:	81a5      	strh	r5, [r4, #12]
 8008d16:	e7cf      	b.n	8008cb8 <__smakebuf_r+0x18>

08008d18 <_fstat_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4d07      	ldr	r5, [pc, #28]	@ (8008d38 <_fstat_r+0x20>)
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4604      	mov	r4, r0
 8008d20:	4608      	mov	r0, r1
 8008d22:	4611      	mov	r1, r2
 8008d24:	602b      	str	r3, [r5, #0]
 8008d26:	f7f8 fb45 	bl	80013b4 <_fstat>
 8008d2a:	1c43      	adds	r3, r0, #1
 8008d2c:	d102      	bne.n	8008d34 <_fstat_r+0x1c>
 8008d2e:	682b      	ldr	r3, [r5, #0]
 8008d30:	b103      	cbz	r3, 8008d34 <_fstat_r+0x1c>
 8008d32:	6023      	str	r3, [r4, #0]
 8008d34:	bd38      	pop	{r3, r4, r5, pc}
 8008d36:	bf00      	nop
 8008d38:	20004d14 	.word	0x20004d14

08008d3c <_isatty_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4d06      	ldr	r5, [pc, #24]	@ (8008d58 <_isatty_r+0x1c>)
 8008d40:	2300      	movs	r3, #0
 8008d42:	4604      	mov	r4, r0
 8008d44:	4608      	mov	r0, r1
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	f7f8 fb44 	bl	80013d4 <_isatty>
 8008d4c:	1c43      	adds	r3, r0, #1
 8008d4e:	d102      	bne.n	8008d56 <_isatty_r+0x1a>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	b103      	cbz	r3, 8008d56 <_isatty_r+0x1a>
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	20004d14 	.word	0x20004d14

08008d5c <_init>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	bf00      	nop
 8008d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d62:	bc08      	pop	{r3}
 8008d64:	469e      	mov	lr, r3
 8008d66:	4770      	bx	lr

08008d68 <_fini>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	bf00      	nop
 8008d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6e:	bc08      	pop	{r3}
 8008d70:	469e      	mov	lr, r3
 8008d72:	4770      	bx	lr
