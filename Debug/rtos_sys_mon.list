
rtos_sys_mon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006034  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080061d4  080061d4  000071d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006238  08006238  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006238  08006238  00007238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006240  08006240  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006240  08006240  00007240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006244  08006244  00007244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006248  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a90  20000010  08006258  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004aa0  08006258  00008aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189e8  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c30  00000000  00000000  00020a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00024658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a6  00000000  00000000  00025be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001876f  00000000  00000000  00026c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e08  00000000  00000000  0003f3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097cc1  00000000  00000000  00058205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000efec6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005984  00000000  00000000  000eff0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000f5890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080061bc 	.word	0x080061bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080061bc 	.word	0x080061bc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  RingBuffer_Init(&cli_buffer);
 8000510:	480a      	ldr	r0, [pc, #40]	@ (800053c <MX_FREERTOS_Init+0x30>)
 8000512:	f000 f96c 	bl	80007ee <RingBuffer_Init>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, sizeof(rx_data));
 8000516:	2201      	movs	r2, #1
 8000518:	4909      	ldr	r1, [pc, #36]	@ (8000540 <MX_FREERTOS_Init+0x34>)
 800051a:	480a      	ldr	r0, [pc, #40]	@ (8000544 <MX_FREERTOS_Init+0x38>)
 800051c:	f001 fed3 	bl	80022c6 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
	TaskCreateSafe(HeartBeatTask, NULL, &HeartBeatTask_attributes, &HeartBeatTaskHandle);
 8000520:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <MX_FREERTOS_Init+0x3c>)
 8000522:	4a0a      	ldr	r2, [pc, #40]	@ (800054c <MX_FREERTOS_Init+0x40>)
 8000524:	2100      	movs	r1, #0
 8000526:	480a      	ldr	r0, [pc, #40]	@ (8000550 <MX_FREERTOS_Init+0x44>)
 8000528:	f000 fa88 	bl	8000a3c <TaskCreateSafe>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
   cliFlags = osEventFlagsNew(NULL);
 800052c:	2000      	movs	r0, #0
 800052e:	f002 ff80 	bl	8003432 <osEventFlagsNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a07      	ldr	r2, [pc, #28]	@ (8000554 <MX_FREERTOS_Init+0x48>)
 8000536:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_EVENTS */

}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000030 	.word	0x20000030
 8000540:	2000002c 	.word	0x2000002c
 8000544:	20000104 	.word	0x20000104
 8000548:	200000b8 	.word	0x200000b8
 800054c:	080061fc 	.word	0x080061fc
 8000550:	08000559 	.word	0x08000559
 8000554:	200000b4 	.word	0x200000b4

08000558 <HeartBeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void HeartBeatTask(void *argument)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000560:	2120      	movs	r1, #32
 8000562:	4804      	ldr	r0, [pc, #16]	@ (8000574 <HeartBeatTask+0x1c>)
 8000564:	f000 fe7b 	bl	800125e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000568:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800056c:	f002 ff46 	bl	80033fc <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000570:	bf00      	nop
 8000572:	e7f5      	b.n	8000560 <HeartBeatTask+0x8>
 8000574:	40020000 	.word	0x40020000

08000578 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a14      	ldr	r2, [pc, #80]	@ (80005d8 <HAL_UART_RxCpltCallback+0x60>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d122      	bne.n	80005d0 <HAL_UART_RxCpltCallback+0x58>
	{
	  HAL_UART_Transmit(&huart2, &rx_data, 1, HAL_MAX_DELAY);
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	2201      	movs	r2, #1
 8000590:	4912      	ldr	r1, [pc, #72]	@ (80005dc <HAL_UART_RxCpltCallback+0x64>)
 8000592:	4813      	ldr	r0, [pc, #76]	@ (80005e0 <HAL_UART_RxCpltCallback+0x68>)
 8000594:	f001 fe0c 	bl	80021b0 <HAL_UART_Transmit>
	  RingBuffer_Put(&cli_buffer,rx_data);
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <HAL_UART_RxCpltCallback+0x64>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4619      	mov	r1, r3
 80005a0:	4810      	ldr	r0, [pc, #64]	@ (80005e4 <HAL_UART_RxCpltCallback+0x6c>)
 80005a2:	f000 f936 	bl	8000812 <RingBuffer_Put>
	  if(rx_data == '\n' || rx_data == '\r' )
 80005a6:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <HAL_UART_RxCpltCallback+0x64>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b0a      	cmp	r3, #10
 80005ae:	d004      	beq.n	80005ba <HAL_UART_RxCpltCallback+0x42>
 80005b0:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <HAL_UART_RxCpltCallback+0x64>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b0d      	cmp	r3, #13
 80005b8:	d105      	bne.n	80005c6 <HAL_UART_RxCpltCallback+0x4e>
	  {
       //set event flag
		osEventFlagsSet(cliFlags, CLI_FLAG_LINE_READY);
 80005ba:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <HAL_UART_RxCpltCallback+0x70>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2101      	movs	r1, #1
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 ff75 	bl	80034b0 <osEventFlagsSet>
	  }
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, sizeof(rx_data));
 80005c6:	2201      	movs	r2, #1
 80005c8:	4904      	ldr	r1, [pc, #16]	@ (80005dc <HAL_UART_RxCpltCallback+0x64>)
 80005ca:	4805      	ldr	r0, [pc, #20]	@ (80005e0 <HAL_UART_RxCpltCallback+0x68>)
 80005cc:	f001 fe7b 	bl	80022c6 <HAL_UART_Receive_IT>
	}
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40004400 	.word	0x40004400
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	20000104 	.word	0x20000104
 80005e4:	20000030 	.word	0x20000030
 80005e8:	200000b4 	.word	0x200000b4

080005ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b2d      	ldr	r3, [pc, #180]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a2c      	ldr	r2, [pc, #176]	@ (80006bc <MX_GPIO_Init+0xd0>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b2a      	ldr	r3, [pc, #168]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a25      	ldr	r2, [pc, #148]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b23      	ldr	r3, [pc, #140]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a1e      	ldr	r2, [pc, #120]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b1c      	ldr	r3, [pc, #112]	@ (80006bc <MX_GPIO_Init+0xd0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_GPIO_Init+0xd0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a17      	ldr	r2, [pc, #92]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2120      	movs	r1, #32
 8000676:	4812      	ldr	r0, [pc, #72]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000678:	f000 fdd8 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000682:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <MX_GPIO_Init+0xd8>)
 8000694:	f000 fc46 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000698:	2320      	movs	r3, #32
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 80006b0:	f000 fc38 	bl	8000f24 <HAL_GPIO_Init>

}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	@ 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020800 	.word	0x40020800

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 fa74 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f80c 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f7ff ff8a 	bl	80005ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d8:	f000 f9ca 	bl	8000a70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006dc:	f002 fdb2 	bl	8003244 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80006e0:	f7ff ff14 	bl	800050c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006e4:	f002 fdd2 	bl	800328c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <main+0x20>

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	@ 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	@ 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 fd24 	bl	8006148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <SystemClock_Config+0xd0>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a28      	ldr	r2, [pc, #160]	@ (80007bc <SystemClock_Config+0xd0>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <SystemClock_Config+0xd0>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b23      	ldr	r3, [pc, #140]	@ (80007c0 <SystemClock_Config+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <SystemClock_Config+0xd4>)
 800073a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <SystemClock_Config+0xd4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000760:	2310      	movs	r3, #16
 8000762:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000764:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000768:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800076a:	2304      	movs	r3, #4
 800076c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800076e:	2307      	movs	r3, #7
 8000770:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fd8c 	bl	8001294 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000782:	f000 f82e 	bl	80007e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000796:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2102      	movs	r1, #2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 ffee 	bl	8001784 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ae:	f000 f818 	bl	80007e2 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	@ 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007d4:	d101      	bne.n	80007da <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007d6:	f000 fa11 	bl	8000bfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e6:	b672      	cpsid	i
}
 80007e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ea:	bf00      	nop
 80007ec:	e7fd      	b.n	80007ea <Error_Handler+0x8>

080007ee <RingBuffer_Init>:
#include "ring_buffer.h"

void RingBuffer_Init(RingBuffer* rb) {
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
    rb->head = 0;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2200      	movs	r2, #0
 80007fa:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    rb->tail = 0;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2200      	movs	r2, #0
 8000802:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <RingBuffer_Put>:

bool RingBuffer_Put(RingBuffer* rb, uint8_t data) {
 8000812:	b480      	push	{r7}
 8000814:	b085      	sub	sp, #20
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (rb->head + 1) & (RING_BUFFER_SIZE-1);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8000824:	b29b      	uxth	r3, r3
 8000826:	3301      	adds	r3, #1
 8000828:	b29b      	uxth	r3, r3
 800082a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800082e:	81fb      	strh	r3, [r7, #14]
    if (next == rb->tail) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8000836:	b29b      	uxth	r3, r3
 8000838:	89fa      	ldrh	r2, [r7, #14]
 800083a:	429a      	cmp	r2, r3
 800083c:	d101      	bne.n	8000842 <RingBuffer_Put+0x30>
        return false;  // buffer full
 800083e:	2300      	movs	r3, #0
 8000840:	e00c      	b.n	800085c <RingBuffer_Put+0x4a>
    }
    rb->buffer[rb->head] = data;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8000848:	b29b      	uxth	r3, r3
 800084a:	4619      	mov	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	78fa      	ldrb	r2, [r7, #3]
 8000850:	545a      	strb	r2, [r3, r1]
    rb->head = next;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	89fa      	ldrh	r2, [r7, #14]
 8000856:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    return true;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <HAL_MspInit+0x54>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000876:	4a11      	ldr	r2, [pc, #68]	@ (80008bc <HAL_MspInit+0x54>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087c:	6453      	str	r3, [r2, #68]	@ 0x44
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_MspInit+0x54>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <HAL_MspInit+0x54>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <HAL_MspInit+0x54>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	@ 0x40
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <HAL_MspInit+0x54>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	210f      	movs	r1, #15
 80008aa:	f06f 0001 	mvn.w	r0, #1
 80008ae:	f000 fa7d 	bl	8000dac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08e      	sub	sp, #56	@ 0x38
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	4b34      	ldr	r3, [pc, #208]	@ (80009a8 <HAL_InitTick+0xe8>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d8:	4a33      	ldr	r2, [pc, #204]	@ (80009a8 <HAL_InitTick+0xe8>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e0:	4b31      	ldr	r3, [pc, #196]	@ (80009a8 <HAL_InitTick+0xe8>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ec:	f107 0210 	add.w	r2, r7, #16
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 f964 	bl	8001bc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000902:	2b00      	cmp	r3, #0
 8000904:	d103      	bne.n	800090e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000906:	f001 f935 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 800090a:	6378      	str	r0, [r7, #52]	@ 0x34
 800090c:	e004      	b.n	8000918 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800090e:	f001 f931 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8000912:	4603      	mov	r3, r0
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800091a:	4a24      	ldr	r2, [pc, #144]	@ (80009ac <HAL_InitTick+0xec>)
 800091c:	fba2 2303 	umull	r2, r3, r2, r3
 8000920:	0c9b      	lsrs	r3, r3, #18
 8000922:	3b01      	subs	r3, #1
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000926:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <HAL_InitTick+0xf0>)
 8000928:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800092c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800092e:	4b20      	ldr	r3, [pc, #128]	@ (80009b0 <HAL_InitTick+0xf0>)
 8000930:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000934:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000936:	4a1e      	ldr	r2, [pc, #120]	@ (80009b0 <HAL_InitTick+0xf0>)
 8000938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800093a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800093c:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <HAL_InitTick+0xf0>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000942:	4b1b      	ldr	r3, [pc, #108]	@ (80009b0 <HAL_InitTick+0xf0>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000948:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <HAL_InitTick+0xf0>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800094e:	4818      	ldr	r0, [pc, #96]	@ (80009b0 <HAL_InitTick+0xf0>)
 8000950:	f001 f96a 	bl	8001c28 <HAL_TIM_Base_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800095a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800095e:	2b00      	cmp	r3, #0
 8000960:	d11b      	bne.n	800099a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000962:	4813      	ldr	r0, [pc, #76]	@ (80009b0 <HAL_InitTick+0xf0>)
 8000964:	f001 f9ba 	bl	8001cdc <HAL_TIM_Base_Start_IT>
 8000968:	4603      	mov	r3, r0
 800096a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800096e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000972:	2b00      	cmp	r3, #0
 8000974:	d111      	bne.n	800099a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000976:	201c      	movs	r0, #28
 8000978:	f000 fa34 	bl	8000de4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b0f      	cmp	r3, #15
 8000980:	d808      	bhi.n	8000994 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000982:	2200      	movs	r2, #0
 8000984:	6879      	ldr	r1, [r7, #4]
 8000986:	201c      	movs	r0, #28
 8000988:	f000 fa10 	bl	8000dac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098c:	4a09      	ldr	r2, [pc, #36]	@ (80009b4 <HAL_InitTick+0xf4>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e002      	b.n	800099a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800099a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3738      	adds	r7, #56	@ 0x38
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	431bde83 	.word	0x431bde83
 80009b0:	200000bc 	.word	0x200000bc
 80009b4:	20000004 	.word	0x20000004

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <NMI_Handler+0x4>

080009c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <MemManage_Handler+0x4>

080009d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <UsageFault_Handler+0x4>

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009f4:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <TIM2_IRQHandler+0x10>)
 80009f6:	f001 f9d3 	bl	8001da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000bc 	.word	0x200000bc

08000a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a08:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <USART2_IRQHandler+0x10>)
 8000a0a:	f001 fc81 	bl	8002310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000104 	.word	0x20000104

08000a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <SystemInit+0x20>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a22:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <SystemInit+0x20>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <TaskCreateSafe>:
#include "task_utils.h"
#include "cmsis_os.h"
#include "main.h"

void TaskCreateSafe(osThreadFunc_t func, void *arg, const osThreadAttr_t *attr, osThreadId_t *outHandle) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]
    *outHandle = osThreadNew(func, arg, attr);
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f002 fc42 	bl	80032d8 <osThreadNew>
 8000a54:	4602      	mov	r2, r0
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	601a      	str	r2, [r3, #0]

    if (*outHandle == NULL) {
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <TaskCreateSafe+0x2a>
       Error_Handler();
 8000a62:	f7ff febe 	bl	80007e2 <Error_Handler>
 
    }
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	@ (8000ac0 <MX_USART2_UART_Init+0x50>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_USART2_UART_Init+0x4c>)
 8000aa8:	f001 fb32 	bl	8002110 <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ab2:	f7ff fe96 	bl	80007e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000104 	.word	0x20000104
 8000ac0:	40004400 	.word	0x40004400

08000ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b58 <HAL_UART_MspInit+0x94>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d133      	bne.n	8000b4e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <HAL_UART_MspInit+0x98>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	4a1b      	ldr	r2, [pc, #108]	@ (8000b5c <HAL_UART_MspInit+0x98>)
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <HAL_UART_MspInit+0x98>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_UART_MspInit+0x98>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a14      	ldr	r2, [pc, #80]	@ (8000b5c <HAL_UART_MspInit+0x98>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_UART_MspInit+0x98>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b1e:	230c      	movs	r3, #12
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <HAL_UART_MspInit+0x9c>)
 8000b3a:	f000 f9f3 	bl	8000f24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2105      	movs	r1, #5
 8000b42:	2026      	movs	r0, #38	@ 0x26
 8000b44:	f000 f932 	bl	8000dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b48:	2026      	movs	r0, #38	@ 0x26
 8000b4a:	f000 f94b 	bl	8000de4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	@ 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000

08000b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b68:	f7ff ff56 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	@ (8000ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b92:	f005 fae1 	bl	8006158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b96:	f7ff fd97 	bl	80006c8 <main>
  bx  lr    
 8000b9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ba8:	08006248 	.word	0x08006248
  ldr r2, =_sbss
 8000bac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bb0:	20004aa0 	.word	0x20004aa0

08000bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <HAL_Init+0x40>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <HAL_Init+0x40>)
 8000bce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <HAL_Init+0x40>)
 8000bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f8d8 	bl	8000d96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f7ff fe6a 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff fe3c 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023c00 	.word	0x40023c00

08000bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_IncTick+0x20>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_IncTick+0x24>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <HAL_IncTick+0x24>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	2000014c 	.word	0x2000014c

08000c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b03      	ldr	r3, [pc, #12]	@ (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	2000014c 	.word	0x2000014c

08000c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6e:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	db0b      	blt.n	8000cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f003 021f 	and.w	r2, r3, #31
 8000cb8:	4907      	ldr	r1, [pc, #28]	@ (8000cd8 <__NVIC_EnableIRQ+0x38>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	095b      	lsrs	r3, r3, #5
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100

08000cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db0a      	blt.n	8000d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	490c      	ldr	r1, [pc, #48]	@ (8000d28 <__NVIC_SetPriority+0x4c>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d04:	e00a      	b.n	8000d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4908      	ldr	r1, [pc, #32]	@ (8000d2c <__NVIC_SetPriority+0x50>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	3b04      	subs	r3, #4
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	440b      	add	r3, r1
 8000d1a:	761a      	strb	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	@ 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1c3 0307 	rsb	r3, r3, #7
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	bf28      	it	cs
 8000d4e:	2304      	movcs	r3, #4
 8000d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3304      	adds	r3, #4
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d902      	bls.n	8000d60 <NVIC_EncodePriority+0x30>
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	e000      	b.n	8000d62 <NVIC_EncodePriority+0x32>
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	4313      	orrs	r3, r2
         );
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3724      	adds	r7, #36	@ 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ff4c 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbe:	f7ff ff61 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000dc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	68b9      	ldr	r1, [r7, #8]
 8000dc8:	6978      	ldr	r0, [r7, #20]
 8000dca:	f7ff ffb1 	bl	8000d30 <NVIC_EncodePriority>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff80 	bl	8000cdc <__NVIC_SetPriority>
}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff54 	bl	8000ca0 <__NVIC_EnableIRQ>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e0e:	f7ff ff09 	bl	8000c24 <HAL_GetTick>
 8000e12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d008      	beq.n	8000e32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2280      	movs	r2, #128	@ 0x80
 8000e24:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e052      	b.n	8000ed8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0216 	bic.w	r2, r2, #22
 8000e40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	695a      	ldr	r2, [r3, #20]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d103      	bne.n	8000e62 <HAL_DMA_Abort+0x62>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d007      	beq.n	8000e72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0208 	bic.w	r2, r2, #8
 8000e70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0201 	bic.w	r2, r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e82:	e013      	b.n	8000eac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e84:	f7ff fece 	bl	8000c24 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b05      	cmp	r3, #5
 8000e90:	d90c      	bls.n	8000eac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2220      	movs	r2, #32
 8000e96:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e015      	b.n	8000ed8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1e4      	bne.n	8000e84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ebe:	223f      	movs	r2, #63	@ 0x3f
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d004      	beq.n	8000efe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2280      	movs	r2, #128	@ 0x80
 8000ef8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00c      	b.n	8000f18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2205      	movs	r2, #5
 8000f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0201 	bic.w	r2, r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	@ 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
 8000f3e:	e159      	b.n	80011f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	f040 8148 	bne.w	80011ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d005      	beq.n	8000f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d130      	bne.n	8000fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f003 0201 	and.w	r2, r3, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d017      	beq.n	8001014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d123      	bne.n	8001068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	691a      	ldr	r2, [r3, #16]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	69b9      	ldr	r1, [r7, #24]
 8001064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0203 	and.w	r2, r3, #3
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 80a2 	beq.w	80011ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b57      	ldr	r3, [pc, #348]	@ (800120c <HAL_GPIO_Init+0x2e8>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	4a56      	ldr	r2, [pc, #344]	@ (800120c <HAL_GPIO_Init+0x2e8>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ba:	4b54      	ldr	r3, [pc, #336]	@ (800120c <HAL_GPIO_Init+0x2e8>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c6:	4a52      	ldr	r2, [pc, #328]	@ (8001210 <HAL_GPIO_Init+0x2ec>)
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	3302      	adds	r3, #2
 80010ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a49      	ldr	r2, [pc, #292]	@ (8001214 <HAL_GPIO_Init+0x2f0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d019      	beq.n	8001126 <HAL_GPIO_Init+0x202>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a48      	ldr	r2, [pc, #288]	@ (8001218 <HAL_GPIO_Init+0x2f4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0x1fe>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a47      	ldr	r2, [pc, #284]	@ (800121c <HAL_GPIO_Init+0x2f8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x1fa>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a46      	ldr	r2, [pc, #280]	@ (8001220 <HAL_GPIO_Init+0x2fc>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x1f6>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a45      	ldr	r2, [pc, #276]	@ (8001224 <HAL_GPIO_Init+0x300>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x1f2>
 8001112:	2304      	movs	r3, #4
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x204>
 8001116:	2307      	movs	r3, #7
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x204>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x204>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x204>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x204>
 8001126:	2300      	movs	r3, #0
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001138:	4935      	ldr	r1, [pc, #212]	@ (8001210 <HAL_GPIO_Init+0x2ec>)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001146:	4b38      	ldr	r3, [pc, #224]	@ (8001228 <HAL_GPIO_Init+0x304>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116a:	4a2f      	ldr	r2, [pc, #188]	@ (8001228 <HAL_GPIO_Init+0x304>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001170:	4b2d      	ldr	r3, [pc, #180]	@ (8001228 <HAL_GPIO_Init+0x304>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001194:	4a24      	ldr	r2, [pc, #144]	@ (8001228 <HAL_GPIO_Init+0x304>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119a:	4b23      	ldr	r3, [pc, #140]	@ (8001228 <HAL_GPIO_Init+0x304>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011be:	4a1a      	ldr	r2, [pc, #104]	@ (8001228 <HAL_GPIO_Init+0x304>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c4:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <HAL_GPIO_Init+0x304>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <HAL_GPIO_Init+0x304>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	f67f aea2 	bls.w	8000f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3724      	adds	r7, #36	@ 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40013800 	.word	0x40013800
 8001214:	40020000 	.word	0x40020000
 8001218:	40020400 	.word	0x40020400
 800121c:	40020800 	.word	0x40020800
 8001220:	40020c00 	.word	0x40020c00
 8001224:	40021000 	.word	0x40021000
 8001228:	40013c00 	.word	0x40013c00

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001248:	e003      	b.n	8001252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	041a      	lsls	r2, r3, #16
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800125e:	b480      	push	{r7}
 8001260:	b085      	sub	sp, #20
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001270:	887a      	ldrh	r2, [r7, #2]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4013      	ands	r3, r2
 8001276:	041a      	lsls	r2, r3, #16
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43d9      	mvns	r1, r3
 800127c:	887b      	ldrh	r3, [r7, #2]
 800127e:	400b      	ands	r3, r1
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e267      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d075      	beq.n	800139e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012b2:	4b88      	ldr	r3, [pc, #544]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d00c      	beq.n	80012d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012be:	4b85      	ldr	r3, [pc, #532]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d112      	bne.n	80012f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ca:	4b82      	ldr	r3, [pc, #520]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012d6:	d10b      	bne.n	80012f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	4b7e      	ldr	r3, [pc, #504]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d05b      	beq.n	800139c <HAL_RCC_OscConfig+0x108>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d157      	bne.n	800139c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e242      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f8:	d106      	bne.n	8001308 <HAL_RCC_OscConfig+0x74>
 80012fa:	4b76      	ldr	r3, [pc, #472]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a75      	ldr	r2, [pc, #468]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e01d      	b.n	8001344 <HAL_RCC_OscConfig+0xb0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x98>
 8001312:	4b70      	ldr	r3, [pc, #448]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6f      	ldr	r2, [pc, #444]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b6d      	ldr	r3, [pc, #436]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a6c      	ldr	r2, [pc, #432]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e00b      	b.n	8001344 <HAL_RCC_OscConfig+0xb0>
 800132c:	4b69      	ldr	r3, [pc, #420]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a68      	ldr	r2, [pc, #416]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b66      	ldr	r3, [pc, #408]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a65      	ldr	r2, [pc, #404]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 800133e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d013      	beq.n	8001374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fc6a 	bl	8000c24 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fc66 	bl	8000c24 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	@ 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e207      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	4b5b      	ldr	r3, [pc, #364]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0xc0>
 8001372:	e014      	b.n	800139e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fc56 	bl	8000c24 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fc52 	bl	8000c24 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	@ 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e1f3      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	4b51      	ldr	r3, [pc, #324]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0xe8>
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d063      	beq.n	8001472 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013aa:	4b4a      	ldr	r3, [pc, #296]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00b      	beq.n	80013ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b6:	4b47      	ldr	r3, [pc, #284]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d11c      	bne.n	80013fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c2:	4b44      	ldr	r3, [pc, #272]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d116      	bne.n	80013fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	4b41      	ldr	r3, [pc, #260]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <HAL_RCC_OscConfig+0x152>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e1c7      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e6:	4b3b      	ldr	r3, [pc, #236]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4937      	ldr	r1, [pc, #220]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	e03a      	b.n	8001472 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d020      	beq.n	8001446 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001404:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <HAL_RCC_OscConfig+0x244>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140a:	f7ff fc0b 	bl	8000c24 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001412:	f7ff fc07 	bl	8000c24 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e1a8      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001430:	4b28      	ldr	r3, [pc, #160]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4925      	ldr	r1, [pc, #148]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
 8001444:	e015      	b.n	8001472 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001446:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <HAL_RCC_OscConfig+0x244>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fbea 	bl	8000c24 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001454:	f7ff fbe6 	bl	8000c24 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e187      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d036      	beq.n	80014ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d016      	beq.n	80014b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <HAL_RCC_OscConfig+0x248>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148c:	f7ff fbca 	bl	8000c24 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff fbc6 	bl	8000c24 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e167      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <HAL_RCC_OscConfig+0x240>)
 80014a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x200>
 80014b2:	e01b      	b.n	80014ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_RCC_OscConfig+0x248>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fbb3 	bl	8000c24 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c0:	e00e      	b.n	80014e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c2:	f7ff fbaf 	bl	8000c24 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d907      	bls.n	80014e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e150      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
 80014d4:	40023800 	.word	0x40023800
 80014d8:	42470000 	.word	0x42470000
 80014dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	4b88      	ldr	r3, [pc, #544]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80014e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1ea      	bne.n	80014c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8097 	beq.w	8001628 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fe:	4b81      	ldr	r3, [pc, #516]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10f      	bne.n	800152a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b7d      	ldr	r3, [pc, #500]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a7c      	ldr	r2, [pc, #496]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b7a      	ldr	r3, [pc, #488]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4b77      	ldr	r3, [pc, #476]	@ (8001708 <HAL_RCC_OscConfig+0x474>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d118      	bne.n	8001568 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001536:	4b74      	ldr	r3, [pc, #464]	@ (8001708 <HAL_RCC_OscConfig+0x474>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a73      	ldr	r2, [pc, #460]	@ (8001708 <HAL_RCC_OscConfig+0x474>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001542:	f7ff fb6f 	bl	8000c24 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154a:	f7ff fb6b 	bl	8000c24 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e10c      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	4b6a      	ldr	r3, [pc, #424]	@ (8001708 <HAL_RCC_OscConfig+0x474>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x2ea>
 8001570:	4b64      	ldr	r3, [pc, #400]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001574:	4a63      	ldr	r2, [pc, #396]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6713      	str	r3, [r2, #112]	@ 0x70
 800157c:	e01c      	b.n	80015b8 <HAL_RCC_OscConfig+0x324>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b05      	cmp	r3, #5
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x30c>
 8001586:	4b5f      	ldr	r3, [pc, #380]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158a:	4a5e      	ldr	r2, [pc, #376]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6713      	str	r3, [r2, #112]	@ 0x70
 8001592:	4b5c      	ldr	r3, [pc, #368]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001596:	4a5b      	ldr	r2, [pc, #364]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6713      	str	r3, [r2, #112]	@ 0x70
 800159e:	e00b      	b.n	80015b8 <HAL_RCC_OscConfig+0x324>
 80015a0:	4b58      	ldr	r3, [pc, #352]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a4:	4a57      	ldr	r2, [pc, #348]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ac:	4b55      	ldr	r3, [pc, #340]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b0:	4a54      	ldr	r2, [pc, #336]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80015b2:	f023 0304 	bic.w	r3, r3, #4
 80015b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d015      	beq.n	80015ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c0:	f7ff fb30 	bl	8000c24 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c6:	e00a      	b.n	80015de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c8:	f7ff fb2c 	bl	8000c24 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e0cb      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015de:	4b49      	ldr	r3, [pc, #292]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0ee      	beq.n	80015c8 <HAL_RCC_OscConfig+0x334>
 80015ea:	e014      	b.n	8001616 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ec:	f7ff fb1a 	bl	8000c24 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f2:	e00a      	b.n	800160a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7ff fb16 	bl	8000c24 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e0b5      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160a:	4b3e      	ldr	r3, [pc, #248]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1ee      	bne.n	80015f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161c:	4b39      	ldr	r3, [pc, #228]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	4a38      	ldr	r2, [pc, #224]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001622:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001626:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80a1 	beq.w	8001774 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001632:	4b34      	ldr	r3, [pc, #208]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b08      	cmp	r3, #8
 800163c:	d05c      	beq.n	80016f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d141      	bne.n	80016ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001646:	4b31      	ldr	r3, [pc, #196]	@ (800170c <HAL_RCC_OscConfig+0x478>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff faea 	bl	8000c24 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff fae6 	bl	8000c24 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e087      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001666:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69da      	ldr	r2, [r3, #28]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001680:	019b      	lsls	r3, r3, #6
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001688:	085b      	lsrs	r3, r3, #1
 800168a:	3b01      	subs	r3, #1
 800168c:	041b      	lsls	r3, r3, #16
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001694:	061b      	lsls	r3, r3, #24
 8001696:	491b      	ldr	r1, [pc, #108]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_RCC_OscConfig+0x478>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fabf 	bl	8000c24 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff fabb 	bl	8000c24 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e05c      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x416>
 80016c8:	e054      	b.n	8001774 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <HAL_RCC_OscConfig+0x478>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff faa8 	bl	8000c24 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff faa4 	bl	8000c24 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e045      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_RCC_OscConfig+0x470>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x444>
 80016f6:	e03d      	b.n	8001774 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e038      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
 8001704:	40023800 	.word	0x40023800
 8001708:	40007000 	.word	0x40007000
 800170c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <HAL_RCC_OscConfig+0x4ec>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d028      	beq.n	8001770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d121      	bne.n	8001770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	429a      	cmp	r2, r3
 8001738:	d11a      	bne.n	8001770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001740:	4013      	ands	r3, r2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001746:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001748:	4293      	cmp	r3, r2
 800174a:	d111      	bne.n	8001770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001756:	085b      	lsrs	r3, r3, #1
 8001758:	3b01      	subs	r3, #1
 800175a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d107      	bne.n	8001770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d001      	beq.n	8001774 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0cc      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b68      	ldr	r3, [pc, #416]	@ (800193c <HAL_RCC_ClockConfig+0x1b8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d90c      	bls.n	80017c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b65      	ldr	r3, [pc, #404]	@ (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b63      	ldr	r3, [pc, #396]	@ (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0b8      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d020      	beq.n	800180e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d8:	4b59      	ldr	r3, [pc, #356]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a58      	ldr	r2, [pc, #352]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f0:	4b53      	ldr	r3, [pc, #332]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4a52      	ldr	r2, [pc, #328]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fc:	4b50      	ldr	r3, [pc, #320]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	494d      	ldr	r1, [pc, #308]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d044      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	4b47      	ldr	r3, [pc, #284]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d119      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e07f      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d003      	beq.n	8001842 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183e:	2b03      	cmp	r3, #3
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b3f      	ldr	r3, [pc, #252]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e06f      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b3b      	ldr	r3, [pc, #236]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e067      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001862:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f023 0203 	bic.w	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4934      	ldr	r1, [pc, #208]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	4313      	orrs	r3, r2
 8001872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001874:	f7ff f9d6 	bl	8000c24 <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	e00a      	b.n	8001892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187c:	f7ff f9d2 	bl	8000c24 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e04f      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b2b      	ldr	r3, [pc, #172]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 020c 	and.w	r2, r3, #12
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1eb      	bne.n	800187c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b25      	ldr	r3, [pc, #148]	@ (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d20c      	bcs.n	80018cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b22      	ldr	r3, [pc, #136]	@ (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	4b20      	ldr	r3, [pc, #128]	@ (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e032      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d8:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4916      	ldr	r1, [pc, #88]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d009      	beq.n	800190a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f6:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	490e      	ldr	r1, [pc, #56]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800190a:	f000 f821 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 800190e:	4602      	mov	r2, r0
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	490a      	ldr	r1, [pc, #40]	@ (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	5ccb      	ldrb	r3, [r1, r3]
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	4a09      	ldr	r2, [pc, #36]	@ (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <HAL_RCC_ClockConfig+0x1c8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe ffc8 	bl	80008c0 <HAL_InitTick>

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023c00 	.word	0x40023c00
 8001940:	40023800 	.word	0x40023800
 8001944:	08006220 	.word	0x08006220
 8001948:	20000000 	.word	0x20000000
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001954:	b094      	sub	sp, #80	@ 0x50
 8001956:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001968:	4b79      	ldr	r3, [pc, #484]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x200>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 030c 	and.w	r3, r3, #12
 8001970:	2b08      	cmp	r3, #8
 8001972:	d00d      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x40>
 8001974:	2b08      	cmp	r3, #8
 8001976:	f200 80e1 	bhi.w	8001b3c <HAL_RCC_GetSysClockFreq+0x1ec>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x34>
 800197e:	2b04      	cmp	r3, #4
 8001980:	d003      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0x3a>
 8001982:	e0db      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001984:	4b73      	ldr	r3, [pc, #460]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x204>)
 8001986:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001988:	e0db      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800198a:	4b73      	ldr	r3, [pc, #460]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x208>)
 800198c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800198e:	e0d8      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001990:	4b6f      	ldr	r3, [pc, #444]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001998:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800199a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x200>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d063      	beq.n	8001a6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	099b      	lsrs	r3, r3, #6
 80019ac:	2200      	movs	r2, #0
 80019ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80019ba:	2300      	movs	r3, #0
 80019bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80019be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019c2:	4622      	mov	r2, r4
 80019c4:	462b      	mov	r3, r5
 80019c6:	f04f 0000 	mov.w	r0, #0
 80019ca:	f04f 0100 	mov.w	r1, #0
 80019ce:	0159      	lsls	r1, r3, #5
 80019d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d4:	0150      	lsls	r0, r2, #5
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4621      	mov	r1, r4
 80019dc:	1a51      	subs	r1, r2, r1
 80019de:	6139      	str	r1, [r7, #16]
 80019e0:	4629      	mov	r1, r5
 80019e2:	eb63 0301 	sbc.w	r3, r3, r1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019f4:	4659      	mov	r1, fp
 80019f6:	018b      	lsls	r3, r1, #6
 80019f8:	4651      	mov	r1, sl
 80019fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019fe:	4651      	mov	r1, sl
 8001a00:	018a      	lsls	r2, r1, #6
 8001a02:	4651      	mov	r1, sl
 8001a04:	ebb2 0801 	subs.w	r8, r2, r1
 8001a08:	4659      	mov	r1, fp
 8001a0a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a22:	4690      	mov	r8, r2
 8001a24:	4699      	mov	r9, r3
 8001a26:	4623      	mov	r3, r4
 8001a28:	eb18 0303 	adds.w	r3, r8, r3
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	462b      	mov	r3, r5
 8001a30:	eb49 0303 	adc.w	r3, r9, r3
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a42:	4629      	mov	r1, r5
 8001a44:	024b      	lsls	r3, r1, #9
 8001a46:	4621      	mov	r1, r4
 8001a48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	024a      	lsls	r2, r1, #9
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a56:	2200      	movs	r2, #0
 8001a58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a60:	f7fe fbbe 	bl	80001e0 <__aeabi_uldivmod>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a6c:	e058      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6e:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	099b      	lsrs	r3, r3, #6
 8001a74:	2200      	movs	r2, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	4611      	mov	r1, r2
 8001a7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a7e:	623b      	str	r3, [r7, #32]
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a88:	4642      	mov	r2, r8
 8001a8a:	464b      	mov	r3, r9
 8001a8c:	f04f 0000 	mov.w	r0, #0
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	0159      	lsls	r1, r3, #5
 8001a96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a9a:	0150      	lsls	r0, r2, #5
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4641      	mov	r1, r8
 8001aa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aa6:	4649      	mov	r1, r9
 8001aa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ab8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001abc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ac0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ac4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	00eb      	lsls	r3, r5, #3
 8001ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ad6:	00e2      	lsls	r2, r4, #3
 8001ad8:	4614      	mov	r4, r2
 8001ada:	461d      	mov	r5, r3
 8001adc:	4643      	mov	r3, r8
 8001ade:	18e3      	adds	r3, r4, r3
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	eb45 0303 	adc.w	r3, r5, r3
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001af6:	4629      	mov	r1, r5
 8001af8:	028b      	lsls	r3, r1, #10
 8001afa:	4621      	mov	r1, r4
 8001afc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b00:	4621      	mov	r1, r4
 8001b02:	028a      	lsls	r2, r1, #10
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	61fa      	str	r2, [r7, #28]
 8001b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b14:	f7fe fb64 	bl	80001e0 <__aeabi_uldivmod>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	0c1b      	lsrs	r3, r3, #16
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b3a:	e002      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3750      	adds	r7, #80	@ 0x50
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	00f42400 	.word	0x00f42400
 8001b58:	007a1200 	.word	0x007a1200

08001b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b60:	4b03      	ldr	r3, [pc, #12]	@ (8001b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000000 	.word	0x20000000

08001b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b78:	f7ff fff0 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0a9b      	lsrs	r3, r3, #10
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4903      	ldr	r1, [pc, #12]	@ (8001b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	08006230 	.word	0x08006230

08001b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ba0:	f7ff ffdc 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0b5b      	lsrs	r3, r3, #13
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	@ (8001bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	08006230 	.word	0x08006230

08001bc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001be0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	08db      	lsrs	r3, r3, #3
 8001bfe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <HAL_RCC_GetClockConfig+0x60>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0207 	and.w	r2, r3, #7
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e041      	b.n	8001cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f839 	bl	8001cc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3304      	adds	r3, #4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f000 f9b2 	bl	8001fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d001      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e044      	b.n	8001d7e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1e      	ldr	r2, [pc, #120]	@ (8001d8c <HAL_TIM_Base_Start_IT+0xb0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d018      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0x6c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d1e:	d013      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0x6c>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1a      	ldr	r2, [pc, #104]	@ (8001d90 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00e      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0x6c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a19      	ldr	r2, [pc, #100]	@ (8001d94 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d009      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0x6c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a17      	ldr	r2, [pc, #92]	@ (8001d98 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d004      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0x6c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a16      	ldr	r2, [pc, #88]	@ (8001d9c <HAL_TIM_Base_Start_IT+0xc0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d111      	bne.n	8001d6c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d010      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6a:	e007      	b.n	8001d7c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	40000400 	.word	0x40000400
 8001d94:	40000800 	.word	0x40000800
 8001d98:	40000c00 	.word	0x40000c00
 8001d9c:	40014000 	.word	0x40014000

08001da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d020      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01b      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0202 	mvn.w	r2, #2
 8001dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8d2 	bl	8001f94 <HAL_TIM_IC_CaptureCallback>
 8001df0:	e005      	b.n	8001dfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f8c4 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f8d5 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d020      	beq.n	8001e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01b      	beq.n	8001e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0204 	mvn.w	r2, #4
 8001e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2202      	movs	r2, #2
 8001e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8ac 	bl	8001f94 <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f89e 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f8af 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d020      	beq.n	8001e9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0208 	mvn.w	r2, #8
 8001e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2204      	movs	r2, #4
 8001e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f886 	bl	8001f94 <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f878 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f889 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d020      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0210 	mvn.w	r2, #16
 8001eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f860 	bl	8001f94 <HAL_TIM_IC_CaptureCallback>
 8001ed4:	e005      	b.n	8001ee2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f852 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f863 	bl	8001fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00c      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0201 	mvn.w	r2, #1
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe fc5c 	bl	80007c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00c      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8e6 	bl	80020fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00c      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f834 	bl	8001fbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00c      	beq.n	8001f78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d007      	beq.n	8001f78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0220 	mvn.w	r2, #32
 8001f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8b8 	bl	80020e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3a      	ldr	r2, [pc, #232]	@ (80020cc <TIM_Base_SetConfig+0xfc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00f      	beq.n	8002008 <TIM_Base_SetConfig+0x38>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fee:	d00b      	beq.n	8002008 <TIM_Base_SetConfig+0x38>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a37      	ldr	r2, [pc, #220]	@ (80020d0 <TIM_Base_SetConfig+0x100>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d007      	beq.n	8002008 <TIM_Base_SetConfig+0x38>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a36      	ldr	r2, [pc, #216]	@ (80020d4 <TIM_Base_SetConfig+0x104>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d003      	beq.n	8002008 <TIM_Base_SetConfig+0x38>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a35      	ldr	r2, [pc, #212]	@ (80020d8 <TIM_Base_SetConfig+0x108>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d108      	bne.n	800201a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800200e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2b      	ldr	r2, [pc, #172]	@ (80020cc <TIM_Base_SetConfig+0xfc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01b      	beq.n	800205a <TIM_Base_SetConfig+0x8a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002028:	d017      	beq.n	800205a <TIM_Base_SetConfig+0x8a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a28      	ldr	r2, [pc, #160]	@ (80020d0 <TIM_Base_SetConfig+0x100>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <TIM_Base_SetConfig+0x8a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a27      	ldr	r2, [pc, #156]	@ (80020d4 <TIM_Base_SetConfig+0x104>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00f      	beq.n	800205a <TIM_Base_SetConfig+0x8a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a26      	ldr	r2, [pc, #152]	@ (80020d8 <TIM_Base_SetConfig+0x108>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00b      	beq.n	800205a <TIM_Base_SetConfig+0x8a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a25      	ldr	r2, [pc, #148]	@ (80020dc <TIM_Base_SetConfig+0x10c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <TIM_Base_SetConfig+0x8a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a24      	ldr	r2, [pc, #144]	@ (80020e0 <TIM_Base_SetConfig+0x110>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d003      	beq.n	800205a <TIM_Base_SetConfig+0x8a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a23      	ldr	r2, [pc, #140]	@ (80020e4 <TIM_Base_SetConfig+0x114>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d108      	bne.n	800206c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a0e      	ldr	r2, [pc, #56]	@ (80020cc <TIM_Base_SetConfig+0xfc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d103      	bne.n	80020a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f023 0201 	bic.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	611a      	str	r2, [r3, #16]
  }
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40014000 	.word	0x40014000
 80020e0:	40014400 	.word	0x40014400
 80020e4:	40014800 	.word	0x40014800

080020e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e042      	b.n	80021a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe fcc4 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2224      	movs	r2, #36	@ 0x24
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fdbd 	bl	8002cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	@ 0x28
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	d175      	bne.n	80022bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_UART_Transmit+0x2c>
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e06e      	b.n	80022be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2221      	movs	r2, #33	@ 0x21
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ee:	f7fe fd19 	bl	8000c24 <HAL_GetTick>
 80021f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002208:	d108      	bne.n	800221c <HAL_UART_Transmit+0x6c>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	e003      	b.n	8002224 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002224:	e02e      	b.n	8002284 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2200      	movs	r2, #0
 800222e:	2180      	movs	r1, #128	@ 0x80
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fb1f 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e03a      	b.n	80022be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10b      	bne.n	8002266 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800225c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	3302      	adds	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	e007      	b.n	8002276 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	3301      	adds	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1cb      	bne.n	8002226 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2200      	movs	r2, #0
 8002296:	2140      	movs	r1, #64	@ 0x40
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 faeb 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e006      	b.n	80022be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	4613      	mov	r3, r2
 80022d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d112      	bne.n	8002306 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_UART_Receive_IT+0x26>
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e00b      	b.n	8002308 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	461a      	mov	r2, r3
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fb12 	bl	8002926 <UART_Start_Receive_IT>
 8002302:	4603      	mov	r3, r0
 8002304:	e000      	b.n	8002308 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
  }
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b0ba      	sub	sp, #232	@ 0xe8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800234e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10f      	bne.n	8002376 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_UART_IRQHandler+0x66>
 8002362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fbf2 	bl	8002b58 <UART_Receive_IT>
      return;
 8002374:	e25b      	b.n	800282e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80de 	beq.w	800253c <HAL_UART_IRQHandler+0x22c>
 8002380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d106      	bne.n	800239a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800238c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002390:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80d1 	beq.w	800253c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800239a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_UART_IRQHandler+0xae>
 80023a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <HAL_UART_IRQHandler+0xd2>
 80023ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	f043 0202 	orr.w	r2, r3, #2
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_UART_IRQHandler+0xf6>
 80023ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	f043 0204 	orr.w	r2, r3, #4
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d011      	beq.n	8002436 <HAL_UART_IRQHandler+0x126>
 8002412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d105      	bne.n	800242a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800241e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242e:	f043 0208 	orr.w	r2, r3, #8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 81f2 	beq.w	8002824 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_UART_IRQHandler+0x14e>
 800244c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fb7d 	bl	8002b58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002468:	2b40      	cmp	r3, #64	@ 0x40
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <HAL_UART_IRQHandler+0x17a>
 8002482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d04f      	beq.n	800252a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fa85 	bl	800299a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800249a:	2b40      	cmp	r3, #64	@ 0x40
 800249c:	d141      	bne.n	8002522 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3314      	adds	r3, #20
 80024a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024ac:	e853 3f00 	ldrex	r3, [r3]
 80024b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80024b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3314      	adds	r3, #20
 80024c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80024ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80024ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80024d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80024da:	e841 2300 	strex	r3, r2, [r1]
 80024de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80024e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1d9      	bne.n	800249e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d013      	beq.n	800251a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f6:	4a7e      	ldr	r2, [pc, #504]	@ (80026f0 <HAL_UART_IRQHandler+0x3e0>)
 80024f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fcee 	bl	8000ee0 <HAL_DMA_Abort_IT>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d016      	beq.n	8002538 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002514:	4610      	mov	r0, r2
 8002516:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002518:	e00e      	b.n	8002538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f994 	bl	8002848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002520:	e00a      	b.n	8002538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f990 	bl	8002848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002528:	e006      	b.n	8002538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f98c 	bl	8002848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002536:	e175      	b.n	8002824 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002538:	bf00      	nop
    return;
 800253a:	e173      	b.n	8002824 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	2b01      	cmp	r3, #1
 8002542:	f040 814f 	bne.w	80027e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 8148 	beq.w	80027e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8141 	beq.w	80027e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002582:	2b40      	cmp	r3, #64	@ 0x40
 8002584:	f040 80b6 	bne.w	80026f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002594:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8145 	beq.w	8002828 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80025a6:	429a      	cmp	r2, r3
 80025a8:	f080 813e 	bcs.w	8002828 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80025b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025be:	f000 8088 	beq.w	80026d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	330c      	adds	r3, #12
 80025c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025d0:	e853 3f00 	ldrex	r3, [r3]
 80025d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80025d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330c      	adds	r3, #12
 80025ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80025ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80025fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80025fe:	e841 2300 	strex	r3, r2, [r1]
 8002602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1d9      	bne.n	80025c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3314      	adds	r3, #20
 8002614:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002618:	e853 3f00 	ldrex	r3, [r3]
 800261c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800261e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3314      	adds	r3, #20
 800262e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002632:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002636:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002638:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800263a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800263e:	e841 2300 	strex	r3, r2, [r1]
 8002642:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1e1      	bne.n	800260e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3314      	adds	r3, #20
 8002650:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002654:	e853 3f00 	ldrex	r3, [r3]
 8002658:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800265a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800265c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3314      	adds	r3, #20
 800266a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800266e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002670:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002672:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002674:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002676:	e841 2300 	strex	r3, r2, [r1]
 800267a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800267c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1e3      	bne.n	800264a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	330c      	adds	r3, #12
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800269a:	e853 3f00 	ldrex	r3, [r3]
 800269e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80026a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026a2:	f023 0310 	bic.w	r3, r3, #16
 80026a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	330c      	adds	r3, #12
 80026b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80026b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80026b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026bc:	e841 2300 	strex	r3, r2, [r1]
 80026c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80026c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1e3      	bne.n	8002690 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fb97 	bl	8000e00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f8b7 	bl	800285c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026ee:	e09b      	b.n	8002828 <HAL_UART_IRQHandler+0x518>
 80026f0:	08002a61 	.word	0x08002a61
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 808e 	beq.w	800282c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8089 	beq.w	800282c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	330c      	adds	r3, #12
 8002720:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002724:	e853 3f00 	ldrex	r3, [r3]
 8002728:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800272a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002730:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	330c      	adds	r3, #12
 800273a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800273e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002740:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002742:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002744:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002746:	e841 2300 	strex	r3, r2, [r1]
 800274a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800274c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1e3      	bne.n	800271a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3314      	adds	r3, #20
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275c:	e853 3f00 	ldrex	r3, [r3]
 8002760:	623b      	str	r3, [r7, #32]
   return(result);
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3314      	adds	r3, #20
 8002772:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002776:	633a      	str	r2, [r7, #48]	@ 0x30
 8002778:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800277c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800277e:	e841 2300 	strex	r3, r2, [r1]
 8002782:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1e3      	bne.n	8002752 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	330c      	adds	r3, #12
 800279e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	e853 3f00 	ldrex	r3, [r3]
 80027a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0310 	bic.w	r3, r3, #16
 80027ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	330c      	adds	r3, #12
 80027b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80027bc:	61fa      	str	r2, [r7, #28]
 80027be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c0:	69b9      	ldr	r1, [r7, #24]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	e841 2300 	strex	r3, r2, [r1]
 80027c8:	617b      	str	r3, [r7, #20]
   return(result);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e3      	bne.n	8002798 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80027da:	4619      	mov	r1, r3
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f83d 	bl	800285c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027e2:	e023      	b.n	800282c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d009      	beq.n	8002804 <HAL_UART_IRQHandler+0x4f4>
 80027f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f943 	bl	8002a88 <UART_Transmit_IT>
    return;
 8002802:	e014      	b.n	800282e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00e      	beq.n	800282e <HAL_UART_IRQHandler+0x51e>
 8002810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f983 	bl	8002b28 <UART_EndTransmit_IT>
    return;
 8002822:	e004      	b.n	800282e <HAL_UART_IRQHandler+0x51e>
    return;
 8002824:	bf00      	nop
 8002826:	e002      	b.n	800282e <HAL_UART_IRQHandler+0x51e>
      return;
 8002828:	bf00      	nop
 800282a:	e000      	b.n	800282e <HAL_UART_IRQHandler+0x51e>
      return;
 800282c:	bf00      	nop
  }
}
 800282e:	37e8      	adds	r7, #232	@ 0xe8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002884:	e03b      	b.n	80028fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d037      	beq.n	80028fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288e:	f7fe f9c9 	bl	8000c24 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	6a3a      	ldr	r2, [r7, #32]
 800289a:	429a      	cmp	r2, r3
 800289c:	d302      	bcc.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e03a      	b.n	800291e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d023      	beq.n	80028fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b80      	cmp	r3, #128	@ 0x80
 80028ba:	d020      	beq.n	80028fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b40      	cmp	r3, #64	@ 0x40
 80028c0:	d01d      	beq.n	80028fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d116      	bne.n	80028fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f857 	bl	800299a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2208      	movs	r2, #8
 80028f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00f      	b.n	800291e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4013      	ands	r3, r2
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	429a      	cmp	r2, r3
 800290c:	bf0c      	ite	eq
 800290e:	2301      	moveq	r3, #1
 8002910:	2300      	movne	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	429a      	cmp	r2, r3
 800291a:	d0b4      	beq.n	8002886 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	4613      	mov	r3, r2
 8002932:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	88fa      	ldrh	r2, [r7, #6]
 800293e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	88fa      	ldrh	r2, [r7, #6]
 8002944:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2222      	movs	r2, #34	@ 0x22
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800296a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0220 	orr.w	r2, r2, #32
 800298a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800299a:	b480      	push	{r7}
 800299c:	b095      	sub	sp, #84	@ 0x54
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	330c      	adds	r3, #12
 80029a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ac:	e853 3f00 	ldrex	r3, [r3]
 80029b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80029c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029ca:	e841 2300 	strex	r3, r2, [r1]
 80029ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1e5      	bne.n	80029a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	3314      	adds	r3, #20
 80029dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	e853 3f00 	ldrex	r3, [r3]
 80029e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3314      	adds	r3, #20
 80029f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029fe:	e841 2300 	strex	r3, r2, [r1]
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1e5      	bne.n	80029d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d119      	bne.n	8002a46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	330c      	adds	r3, #12
 8002a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	e853 3f00 	ldrex	r3, [r3]
 8002a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f023 0310 	bic.w	r3, r3, #16
 8002a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a32:	61ba      	str	r2, [r7, #24]
 8002a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a36:	6979      	ldr	r1, [r7, #20]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	e841 2300 	strex	r3, r2, [r1]
 8002a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1e5      	bne.n	8002a12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a54:	bf00      	nop
 8002a56:	3754      	adds	r7, #84	@ 0x54
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f7ff fee4 	bl	8002848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b21      	cmp	r3, #33	@ 0x21
 8002a9a:	d13e      	bne.n	8002b1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa4:	d114      	bne.n	8002ad0 <UART_Transmit_IT+0x48>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d110      	bne.n	8002ad0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	1c9a      	adds	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	621a      	str	r2, [r3, #32]
 8002ace:	e008      	b.n	8002ae2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	1c59      	adds	r1, r3, #1
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6211      	str	r1, [r2, #32]
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4619      	mov	r1, r3
 8002af0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff fe73 	bl	8002834 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08c      	sub	sp, #48	@ 0x30
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b22      	cmp	r3, #34	@ 0x22
 8002b6a:	f040 80ae 	bne.w	8002cca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b76:	d117      	bne.n	8002ba8 <UART_Receive_IT+0x50>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d113      	bne.n	8002ba8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba0:	1c9a      	adds	r2, r3, #2
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ba6:	e026      	b.n	8002bf6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bba:	d007      	beq.n	8002bcc <UART_Receive_IT+0x74>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <UART_Receive_IT+0x82>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d106      	bne.n	8002bda <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e008      	b.n	8002bec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4619      	mov	r1, r3
 8002c04:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d15d      	bne.n	8002cc6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0220 	bic.w	r2, r2, #32
 8002c18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0201 	bic.w	r2, r2, #1
 8002c38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d135      	bne.n	8002cbc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	330c      	adds	r3, #12
 8002c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	613b      	str	r3, [r7, #16]
   return(result);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f023 0310 	bic.w	r3, r3, #16
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c76:	623a      	str	r2, [r7, #32]
 8002c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	69f9      	ldr	r1, [r7, #28]
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1e5      	bne.n	8002c56 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d10a      	bne.n	8002cae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff fdd1 	bl	800285c <HAL_UARTEx_RxEventCallback>
 8002cba:	e002      	b.n	8002cc2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7fd fc5b 	bl	8000578 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e002      	b.n	8002ccc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3730      	adds	r7, #48	@ 0x30
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd8:	b0c0      	sub	sp, #256	@ 0x100
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf0:	68d9      	ldr	r1, [r3, #12]
 8002cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	ea40 0301 	orr.w	r3, r0, r1
 8002cfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002d2c:	f021 010c 	bic.w	r1, r1, #12
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4e:	6999      	ldr	r1, [r3, #24]
 8002d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	ea40 0301 	orr.w	r3, r0, r1
 8002d5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4b8f      	ldr	r3, [pc, #572]	@ (8002fa0 <UART_SetConfig+0x2cc>)
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d005      	beq.n	8002d74 <UART_SetConfig+0xa0>
 8002d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4b8d      	ldr	r3, [pc, #564]	@ (8002fa4 <UART_SetConfig+0x2d0>)
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d104      	bne.n	8002d7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d74:	f7fe ff12 	bl	8001b9c <HAL_RCC_GetPCLK2Freq>
 8002d78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d7c:	e003      	b.n	8002d86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d7e:	f7fe fef9 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8002d82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d90:	f040 810c 	bne.w	8002fac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002da2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002da6:	4622      	mov	r2, r4
 8002da8:	462b      	mov	r3, r5
 8002daa:	1891      	adds	r1, r2, r2
 8002dac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002dae:	415b      	adcs	r3, r3
 8002db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002db2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002db6:	4621      	mov	r1, r4
 8002db8:	eb12 0801 	adds.w	r8, r2, r1
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	eb43 0901 	adc.w	r9, r3, r1
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dd6:	4690      	mov	r8, r2
 8002dd8:	4699      	mov	r9, r3
 8002dda:	4623      	mov	r3, r4
 8002ddc:	eb18 0303 	adds.w	r3, r8, r3
 8002de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002de4:	462b      	mov	r3, r5
 8002de6:	eb49 0303 	adc.w	r3, r9, r3
 8002dea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002dfa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002dfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e02:	460b      	mov	r3, r1
 8002e04:	18db      	adds	r3, r3, r3
 8002e06:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e08:	4613      	mov	r3, r2
 8002e0a:	eb42 0303 	adc.w	r3, r2, r3
 8002e0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e18:	f7fd f9e2 	bl	80001e0 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4b61      	ldr	r3, [pc, #388]	@ (8002fa8 <UART_SetConfig+0x2d4>)
 8002e22:	fba3 2302 	umull	r2, r3, r3, r2
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	011c      	lsls	r4, r3, #4
 8002e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002e38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002e3c:	4642      	mov	r2, r8
 8002e3e:	464b      	mov	r3, r9
 8002e40:	1891      	adds	r1, r2, r2
 8002e42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e44:	415b      	adcs	r3, r3
 8002e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e4c:	4641      	mov	r1, r8
 8002e4e:	eb12 0a01 	adds.w	sl, r2, r1
 8002e52:	4649      	mov	r1, r9
 8002e54:	eb43 0b01 	adc.w	fp, r3, r1
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e6c:	4692      	mov	sl, r2
 8002e6e:	469b      	mov	fp, r3
 8002e70:	4643      	mov	r3, r8
 8002e72:	eb1a 0303 	adds.w	r3, sl, r3
 8002e76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e7a:	464b      	mov	r3, r9
 8002e7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	18db      	adds	r3, r3, r3
 8002e9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	eb42 0303 	adc.w	r3, r2, r3
 8002ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ea6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002eaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002eae:	f7fd f997 	bl	80001e0 <__aeabi_uldivmod>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa8 <UART_SetConfig+0x2d4>)
 8002eba:	fba3 2301 	umull	r2, r3, r3, r1
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	2264      	movs	r2, #100	@ 0x64
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	1acb      	subs	r3, r1, r3
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ece:	4b36      	ldr	r3, [pc, #216]	@ (8002fa8 <UART_SetConfig+0x2d4>)
 8002ed0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002edc:	441c      	add	r4, r3
 8002ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ee8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002eec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ef0:	4642      	mov	r2, r8
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	1891      	adds	r1, r2, r2
 8002ef6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ef8:	415b      	adcs	r3, r3
 8002efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002efc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f00:	4641      	mov	r1, r8
 8002f02:	1851      	adds	r1, r2, r1
 8002f04:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f06:	4649      	mov	r1, r9
 8002f08:	414b      	adcs	r3, r1
 8002f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f18:	4659      	mov	r1, fp
 8002f1a:	00cb      	lsls	r3, r1, #3
 8002f1c:	4651      	mov	r1, sl
 8002f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f22:	4651      	mov	r1, sl
 8002f24:	00ca      	lsls	r2, r1, #3
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4642      	mov	r2, r8
 8002f2e:	189b      	adds	r3, r3, r2
 8002f30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f34:	464b      	mov	r3, r9
 8002f36:	460a      	mov	r2, r1
 8002f38:	eb42 0303 	adc.w	r3, r2, r3
 8002f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f54:	460b      	mov	r3, r1
 8002f56:	18db      	adds	r3, r3, r3
 8002f58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	eb42 0303 	adc.w	r3, r2, r3
 8002f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f6a:	f7fd f939 	bl	80001e0 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa8 <UART_SetConfig+0x2d4>)
 8002f74:	fba3 1302 	umull	r1, r3, r3, r2
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	2164      	movs	r1, #100	@ 0x64
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	3332      	adds	r3, #50	@ 0x32
 8002f86:	4a08      	ldr	r2, [pc, #32]	@ (8002fa8 <UART_SetConfig+0x2d4>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	f003 0207 	and.w	r2, r3, #7
 8002f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4422      	add	r2, r4
 8002f9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f9c:	e106      	b.n	80031ac <UART_SetConfig+0x4d8>
 8002f9e:	bf00      	nop
 8002fa0:	40011000 	.word	0x40011000
 8002fa4:	40011400 	.word	0x40011400
 8002fa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002fb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002fba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002fbe:	4642      	mov	r2, r8
 8002fc0:	464b      	mov	r3, r9
 8002fc2:	1891      	adds	r1, r2, r2
 8002fc4:	6239      	str	r1, [r7, #32]
 8002fc6:	415b      	adcs	r3, r3
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fce:	4641      	mov	r1, r8
 8002fd0:	1854      	adds	r4, r2, r1
 8002fd2:	4649      	mov	r1, r9
 8002fd4:	eb43 0501 	adc.w	r5, r3, r1
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	00eb      	lsls	r3, r5, #3
 8002fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fe6:	00e2      	lsls	r2, r4, #3
 8002fe8:	4614      	mov	r4, r2
 8002fea:	461d      	mov	r5, r3
 8002fec:	4643      	mov	r3, r8
 8002fee:	18e3      	adds	r3, r4, r3
 8002ff0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ff4:	464b      	mov	r3, r9
 8002ff6:	eb45 0303 	adc.w	r3, r5, r3
 8002ffa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800300a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800301a:	4629      	mov	r1, r5
 800301c:	008b      	lsls	r3, r1, #2
 800301e:	4621      	mov	r1, r4
 8003020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003024:	4621      	mov	r1, r4
 8003026:	008a      	lsls	r2, r1, #2
 8003028:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800302c:	f7fd f8d8 	bl	80001e0 <__aeabi_uldivmod>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4b60      	ldr	r3, [pc, #384]	@ (80031b8 <UART_SetConfig+0x4e4>)
 8003036:	fba3 2302 	umull	r2, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	011c      	lsls	r4, r3, #4
 800303e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003042:	2200      	movs	r2, #0
 8003044:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003048:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800304c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003050:	4642      	mov	r2, r8
 8003052:	464b      	mov	r3, r9
 8003054:	1891      	adds	r1, r2, r2
 8003056:	61b9      	str	r1, [r7, #24]
 8003058:	415b      	adcs	r3, r3
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003060:	4641      	mov	r1, r8
 8003062:	1851      	adds	r1, r2, r1
 8003064:	6139      	str	r1, [r7, #16]
 8003066:	4649      	mov	r1, r9
 8003068:	414b      	adcs	r3, r1
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003078:	4659      	mov	r1, fp
 800307a:	00cb      	lsls	r3, r1, #3
 800307c:	4651      	mov	r1, sl
 800307e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003082:	4651      	mov	r1, sl
 8003084:	00ca      	lsls	r2, r1, #3
 8003086:	4610      	mov	r0, r2
 8003088:	4619      	mov	r1, r3
 800308a:	4603      	mov	r3, r0
 800308c:	4642      	mov	r2, r8
 800308e:	189b      	adds	r3, r3, r2
 8003090:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003094:	464b      	mov	r3, r9
 8003096:	460a      	mov	r2, r1
 8003098:	eb42 0303 	adc.w	r3, r2, r3
 800309c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80030a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80030b8:	4649      	mov	r1, r9
 80030ba:	008b      	lsls	r3, r1, #2
 80030bc:	4641      	mov	r1, r8
 80030be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030c2:	4641      	mov	r1, r8
 80030c4:	008a      	lsls	r2, r1, #2
 80030c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80030ca:	f7fd f889 	bl	80001e0 <__aeabi_uldivmod>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4611      	mov	r1, r2
 80030d4:	4b38      	ldr	r3, [pc, #224]	@ (80031b8 <UART_SetConfig+0x4e4>)
 80030d6:	fba3 2301 	umull	r2, r3, r3, r1
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2264      	movs	r2, #100	@ 0x64
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	1acb      	subs	r3, r1, r3
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	3332      	adds	r3, #50	@ 0x32
 80030e8:	4a33      	ldr	r2, [pc, #204]	@ (80031b8 <UART_SetConfig+0x4e4>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030f4:	441c      	add	r4, r3
 80030f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030fa:	2200      	movs	r2, #0
 80030fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80030fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003100:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003104:	4642      	mov	r2, r8
 8003106:	464b      	mov	r3, r9
 8003108:	1891      	adds	r1, r2, r2
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	415b      	adcs	r3, r3
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003114:	4641      	mov	r1, r8
 8003116:	1851      	adds	r1, r2, r1
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	4649      	mov	r1, r9
 800311c:	414b      	adcs	r3, r1
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800312c:	4659      	mov	r1, fp
 800312e:	00cb      	lsls	r3, r1, #3
 8003130:	4651      	mov	r1, sl
 8003132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003136:	4651      	mov	r1, sl
 8003138:	00ca      	lsls	r2, r1, #3
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	4603      	mov	r3, r0
 8003140:	4642      	mov	r2, r8
 8003142:	189b      	adds	r3, r3, r2
 8003144:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003146:	464b      	mov	r3, r9
 8003148:	460a      	mov	r2, r1
 800314a:	eb42 0303 	adc.w	r3, r2, r3
 800314e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	663b      	str	r3, [r7, #96]	@ 0x60
 800315a:	667a      	str	r2, [r7, #100]	@ 0x64
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003168:	4649      	mov	r1, r9
 800316a:	008b      	lsls	r3, r1, #2
 800316c:	4641      	mov	r1, r8
 800316e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003172:	4641      	mov	r1, r8
 8003174:	008a      	lsls	r2, r1, #2
 8003176:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800317a:	f7fd f831 	bl	80001e0 <__aeabi_uldivmod>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4b0d      	ldr	r3, [pc, #52]	@ (80031b8 <UART_SetConfig+0x4e4>)
 8003184:	fba3 1302 	umull	r1, r3, r3, r2
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	2164      	movs	r1, #100	@ 0x64
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	3332      	adds	r3, #50	@ 0x32
 8003196:	4a08      	ldr	r2, [pc, #32]	@ (80031b8 <UART_SetConfig+0x4e4>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	f003 020f 	and.w	r2, r3, #15
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4422      	add	r2, r4
 80031aa:	609a      	str	r2, [r3, #8]
}
 80031ac:	bf00      	nop
 80031ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80031b2:	46bd      	mov	sp, r7
 80031b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031b8:	51eb851f 	.word	0x51eb851f

080031bc <__NVIC_SetPriority>:
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	6039      	str	r1, [r7, #0]
 80031c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	db0a      	blt.n	80031e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	490c      	ldr	r1, [pc, #48]	@ (8003208 <__NVIC_SetPriority+0x4c>)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	0112      	lsls	r2, r2, #4
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	440b      	add	r3, r1
 80031e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80031e4:	e00a      	b.n	80031fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4908      	ldr	r1, [pc, #32]	@ (800320c <__NVIC_SetPriority+0x50>)
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	3b04      	subs	r3, #4
 80031f4:	0112      	lsls	r2, r2, #4
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	440b      	add	r3, r1
 80031fa:	761a      	strb	r2, [r3, #24]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000e100 	.word	0xe000e100
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003214:	4b05      	ldr	r3, [pc, #20]	@ (800322c <SysTick_Handler+0x1c>)
 8003216:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003218:	f001 fefc 	bl	8005014 <xTaskGetSchedulerState>
 800321c:	4603      	mov	r3, r0
 800321e:	2b01      	cmp	r3, #1
 8003220:	d001      	beq.n	8003226 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003222:	f002 fd11 	bl	8005c48 <xPortSysTickHandler>
  }
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	e000e010 	.word	0xe000e010

08003230 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003234:	2100      	movs	r1, #0
 8003236:	f06f 0004 	mvn.w	r0, #4
 800323a:	f7ff ffbf 	bl	80031bc <__NVIC_SetPriority>
#endif
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800324a:	f3ef 8305 	mrs	r3, IPSR
 800324e:	603b      	str	r3, [r7, #0]
  return(result);
 8003250:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003256:	f06f 0305 	mvn.w	r3, #5
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	e00c      	b.n	8003278 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800325e:	4b0a      	ldr	r3, [pc, #40]	@ (8003288 <osKernelInitialize+0x44>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d105      	bne.n	8003272 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003266:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <osKernelInitialize+0x44>)
 8003268:	2201      	movs	r2, #1
 800326a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800326c:	2300      	movs	r3, #0
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	e002      	b.n	8003278 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295
 8003276:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003278:	687b      	ldr	r3, [r7, #4]
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000150 	.word	0x20000150

0800328c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003292:	f3ef 8305 	mrs	r3, IPSR
 8003296:	603b      	str	r3, [r7, #0]
  return(result);
 8003298:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800329e:	f06f 0305 	mvn.w	r3, #5
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	e010      	b.n	80032c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80032a6:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <osKernelStart+0x48>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d109      	bne.n	80032c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80032ae:	f7ff ffbf 	bl	8003230 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80032b2:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <osKernelStart+0x48>)
 80032b4:	2202      	movs	r2, #2
 80032b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80032b8:	f001 f9fa 	bl	80046b0 <vTaskStartScheduler>
      stat = osOK;
 80032bc:	2300      	movs	r3, #0
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	e002      	b.n	80032c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295
 80032c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80032c8:	687b      	ldr	r3, [r7, #4]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000150 	.word	0x20000150

080032d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08e      	sub	sp, #56	@ 0x38
 80032dc:	af04      	add	r7, sp, #16
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032e8:	f3ef 8305 	mrs	r3, IPSR
 80032ec:	617b      	str	r3, [r7, #20]
  return(result);
 80032ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d17e      	bne.n	80033f2 <osThreadNew+0x11a>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d07b      	beq.n	80033f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80032fa:	2380      	movs	r3, #128	@ 0x80
 80032fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80032fe:	2318      	movs	r3, #24
 8003300:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003302:	2300      	movs	r3, #0
 8003304:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003306:	f04f 33ff 	mov.w	r3, #4294967295
 800330a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d045      	beq.n	800339e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <osThreadNew+0x48>
        name = attr->name;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <osThreadNew+0x6e>
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b38      	cmp	r3, #56	@ 0x38
 8003338:	d805      	bhi.n	8003346 <osThreadNew+0x6e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <osThreadNew+0x72>
        return (NULL);
 8003346:	2300      	movs	r3, #0
 8003348:	e054      	b.n	80033f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00e      	beq.n	8003380 <osThreadNew+0xa8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b5b      	cmp	r3, #91	@ 0x5b
 8003368:	d90a      	bls.n	8003380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <osThreadNew+0xa8>
        mem = 1;
 800337a:	2301      	movs	r3, #1
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	e010      	b.n	80033a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10c      	bne.n	80033a2 <osThreadNew+0xca>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d108      	bne.n	80033a2 <osThreadNew+0xca>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d104      	bne.n	80033a2 <osThreadNew+0xca>
          mem = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	e001      	b.n	80033a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d110      	bne.n	80033ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033b0:	9202      	str	r2, [sp, #8]
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6a3a      	ldr	r2, [r7, #32]
 80033bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 ff9a 	bl	80042f8 <xTaskCreateStatic>
 80033c4:	4603      	mov	r3, r0
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	e013      	b.n	80033f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d110      	bne.n	80033f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 ffe8 	bl	80043b8 <xTaskCreate>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <osThreadNew+0x11a>
            hTask = NULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80033f2:	693b      	ldr	r3, [r7, #16]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3728      	adds	r7, #40	@ 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003404:	f3ef 8305 	mrs	r3, IPSR
 8003408:	60bb      	str	r3, [r7, #8]
  return(result);
 800340a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <osDelay+0x1c>
    stat = osErrorISR;
 8003410:	f06f 0305 	mvn.w	r3, #5
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e007      	b.n	8003428 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f001 f90e 	bl	8004644 <vTaskDelay>
    }
  }

  return (stat);
 8003428:	68fb      	ldr	r3, [r7, #12]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003432:	b580      	push	{r7, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800343e:	f3ef 8305 	mrs	r3, IPSR
 8003442:	60fb      	str	r3, [r7, #12]
  return(result);
 8003444:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8003446:	2b00      	cmp	r3, #0
 8003448:	d12d      	bne.n	80034a6 <osEventFlagsNew+0x74>
    mem = -1;
 800344a:	f04f 33ff 	mov.w	r3, #4294967295
 800344e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d015      	beq.n	8003482 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d006      	beq.n	800346c <osEventFlagsNew+0x3a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b1f      	cmp	r3, #31
 8003464:	d902      	bls.n	800346c <osEventFlagsNew+0x3a>
        mem = 1;
 8003466:	2301      	movs	r3, #1
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	e00c      	b.n	8003486 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d108      	bne.n	8003486 <osEventFlagsNew+0x54>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <osEventFlagsNew+0x54>
          mem = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	e001      	b.n	8003486 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d106      	bne.n	800349a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f883 	bl	800359c <xEventGroupCreateStatic>
 8003496:	6178      	str	r0, [r7, #20]
 8003498:	e005      	b.n	80034a6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80034a0:	f000 f8b5 	bl	800360e <xEventGroupCreate>
 80034a4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80034a6:	697b      	ldr	r3, [r7, #20]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <osEventFlagsSet+0x1c>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034ca:	d303      	bcc.n	80034d4 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 80034cc:	f06f 0303 	mvn.w	r3, #3
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e028      	b.n	8003526 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d4:	f3ef 8305 	mrs	r3, IPSR
 80034d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80034da:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01d      	beq.n	800351c <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80034e4:	f107 0308 	add.w	r3, r7, #8
 80034e8:	461a      	mov	r2, r3
 80034ea:	6839      	ldr	r1, [r7, #0]
 80034ec:	6938      	ldr	r0, [r7, #16]
 80034ee:	f000 f941 	bl	8003774 <xEventGroupSetBitsFromISR>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d103      	bne.n	8003500 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 80034f8:	f06f 0302 	mvn.w	r3, #2
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	e012      	b.n	8003526 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00d      	beq.n	8003526 <osEventFlagsSet+0x76>
 800350a:	4b09      	ldr	r3, [pc, #36]	@ (8003530 <osEventFlagsSet+0x80>)
 800350c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	e004      	b.n	8003526 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800351c:	6839      	ldr	r1, [r7, #0]
 800351e:	6938      	ldr	r0, [r7, #16]
 8003520:	f000 f88f 	bl	8003642 <xEventGroupSetBits>
 8003524:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8003526:	697b      	ldr	r3, [r7, #20]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	e000ed04 	.word	0xe000ed04

08003534 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a07      	ldr	r2, [pc, #28]	@ (8003560 <vApplicationGetIdleTaskMemory+0x2c>)
 8003544:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4a06      	ldr	r2, [pc, #24]	@ (8003564 <vApplicationGetIdleTaskMemory+0x30>)
 800354a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2280      	movs	r2, #128	@ 0x80
 8003550:	601a      	str	r2, [r3, #0]
}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000154 	.word	0x20000154
 8003564:	200001b0 	.word	0x200001b0

08003568 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a07      	ldr	r2, [pc, #28]	@ (8003594 <vApplicationGetTimerTaskMemory+0x2c>)
 8003578:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4a06      	ldr	r2, [pc, #24]	@ (8003598 <vApplicationGetTimerTaskMemory+0x30>)
 800357e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003586:	601a      	str	r2, [r3, #0]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	200003b0 	.word	0x200003b0
 8003598:	2000040c 	.word	0x2000040c

0800359c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10b      	bne.n	80035c2 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	e7fd      	b.n	80035be <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80035c2:	2320      	movs	r3, #32
 80035c4:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d00b      	beq.n	80035e4 <xEventGroupCreateStatic+0x48>
	__asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	60fb      	str	r3, [r7, #12]
}
 80035de:	bf00      	nop
 80035e0:	bf00      	nop
 80035e2:	e7fd      	b.n	80035e0 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	3304      	adds	r3, #4
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 f8cf 	bl	800379c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2201      	movs	r2, #1
 8003602:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8003604:	697b      	ldr	r3, [r7, #20]
	}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003614:	2020      	movs	r0, #32
 8003616:	f002 fba9 	bl	8005d6c <pvPortMalloc>
 800361a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	4618      	mov	r0, r3
 800362e:	f000 f8b5 	bl	800379c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003638:	687b      	ldr	r3, [r7, #4]
	}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b08e      	sub	sp, #56	@ 0x38
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800364c:	2300      	movs	r3, #0
 800364e:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8003654:	2300      	movs	r3, #0
 8003656:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10b      	bne.n	8003676 <xEventGroupSetBits+0x34>
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	613b      	str	r3, [r7, #16]
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	e7fd      	b.n	8003672 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800367c:	d30b      	bcc.n	8003696 <xEventGroupSetBits+0x54>
	__asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	60fb      	str	r3, [r7, #12]
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	e7fd      	b.n	8003692 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003698:	3304      	adds	r3, #4
 800369a:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	3308      	adds	r3, #8
 80036a0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80036a2:	f001 f86d 	bl	8004780 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80036ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80036b8:	e03c      	b.n	8003734 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80036ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80036c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80036d0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036d8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d108      	bne.n	80036f6 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80036e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00b      	beq.n	8003708 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 80036f0:	2301      	movs	r3, #1
 80036f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036f4:	e008      	b.n	8003708 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80036f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	429a      	cmp	r2, r3
 8003702:	d101      	bne.n	8003708 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003704:	2301      	movs	r3, #1
 8003706:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d010      	beq.n	8003730 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	4313      	orrs	r3, r2
 800371e:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003728:	4619      	mov	r1, r3
 800372a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800372c:	f001 fab2 	bl	8004c94 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8003734:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	429a      	cmp	r2, r3
 800373a:	d1be      	bne.n	80036ba <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800373c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003742:	43db      	mvns	r3, r3
 8003744:	401a      	ands	r2, r3
 8003746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003748:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800374a:	f001 f827 	bl	800479c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800374e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003750:	681b      	ldr	r3, [r3, #0]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3738      	adds	r7, #56	@ 0x38
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8003764:	6839      	ldr	r1, [r7, #0]
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ff6b 	bl	8003642 <xEventGroupSetBits>
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	68f9      	ldr	r1, [r7, #12]
 8003786:	4804      	ldr	r0, [pc, #16]	@ (8003798 <xEventGroupSetBitsFromISR+0x24>)
 8003788:	f002 f880 	bl	800588c <xTimerPendFunctionCallFromISR>
 800378c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800378e:	697b      	ldr	r3, [r7, #20]
	}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	0800375b 	.word	0x0800375b

0800379c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f103 0208 	add.w	r2, r3, #8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f04f 32ff 	mov.w	r2, #4294967295
 80037b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f103 0208 	add.w	r2, r3, #8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f103 0208 	add.w	r2, r3, #8
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	601a      	str	r2, [r3, #0]
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800383e:	b480      	push	{r7}
 8003840:	b085      	sub	sp, #20
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d103      	bne.n	800385e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e00c      	b.n	8003878 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3308      	adds	r3, #8
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e002      	b.n	800386c <vListInsert+0x2e>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	429a      	cmp	r2, r3
 8003876:	d2f6      	bcs.n	8003866 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	601a      	str	r2, [r3, #0]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6892      	ldr	r2, [r2, #8]
 80038c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6852      	ldr	r2, [r2, #4]
 80038d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d103      	bne.n	80038e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	1e5a      	subs	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <xQueueGenericReset+0x2c>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	60bb      	str	r3, [r7, #8]
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	e7fd      	b.n	800392c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003930:	f002 f8fa 	bl	8005b28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800393c:	68f9      	ldr	r1, [r7, #12]
 800393e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	441a      	add	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003960:	3b01      	subs	r3, #1
 8003962:	68f9      	ldr	r1, [r7, #12]
 8003964:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	441a      	add	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	22ff      	movs	r2, #255	@ 0xff
 8003974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	22ff      	movs	r2, #255	@ 0xff
 800397c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d114      	bne.n	80039b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01a      	beq.n	80039c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3310      	adds	r3, #16
 8003992:	4618      	mov	r0, r3
 8003994:	f001 f91a 	bl	8004bcc <xTaskRemoveFromEventList>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d012      	beq.n	80039c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800399e:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <xQueueGenericReset+0xd0>)
 80039a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	e009      	b.n	80039c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3310      	adds	r3, #16
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fef1 	bl	800379c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3324      	adds	r3, #36	@ 0x24
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff feec 	bl	800379c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039c4:	f002 f8e2 	bl	8005b8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039c8:	2301      	movs	r3, #1
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	e000ed04 	.word	0xe000ed04

080039d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08e      	sub	sp, #56	@ 0x38
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80039ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f0:	f383 8811 	msr	BASEPRI, r3
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80039fe:	bf00      	nop
 8003a00:	bf00      	nop
 8003a02:	e7fd      	b.n	8003a00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10b      	bne.n	8003a22 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	e7fd      	b.n	8003a1e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <xQueueGenericCreateStatic+0x56>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <xQueueGenericCreateStatic+0x5a>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <xQueueGenericCreateStatic+0x5c>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	623b      	str	r3, [r7, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	bf00      	nop
 8003a4e:	e7fd      	b.n	8003a4c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <xQueueGenericCreateStatic+0x84>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <xQueueGenericCreateStatic+0x88>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <xQueueGenericCreateStatic+0x8a>
 8003a60:	2300      	movs	r3, #0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10b      	bne.n	8003a7e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	61fb      	str	r3, [r7, #28]
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	e7fd      	b.n	8003a7a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a7e:	2350      	movs	r3, #80	@ 0x50
 8003a80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b50      	cmp	r3, #80	@ 0x50
 8003a86:	d00b      	beq.n	8003aa0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	61bb      	str	r3, [r7, #24]
}
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
 8003a9e:	e7fd      	b.n	8003a9c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003aa0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ab4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f805 	bl	8003ad2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3730      	adds	r7, #48	@ 0x30
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e002      	b.n	8003af4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b00:	2101      	movs	r1, #1
 8003b02:	69b8      	ldr	r0, [r7, #24]
 8003b04:	f7ff fefe 	bl	8003904 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08e      	sub	sp, #56	@ 0x38
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b26:	2300      	movs	r3, #0
 8003b28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10b      	bne.n	8003b4c <xQueueGenericSend+0x34>
	__asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b46:	bf00      	nop
 8003b48:	bf00      	nop
 8003b4a:	e7fd      	b.n	8003b48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <xQueueGenericSend+0x42>
 8003b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <xQueueGenericSend+0x46>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <xQueueGenericSend+0x48>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <xQueueGenericSend+0x64>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d103      	bne.n	8003b8a <xQueueGenericSend+0x72>
 8003b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <xQueueGenericSend+0x76>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <xQueueGenericSend+0x78>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <xQueueGenericSend+0x94>
	__asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	623b      	str	r3, [r7, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	bf00      	nop
 8003baa:	e7fd      	b.n	8003ba8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bac:	f001 fa32 	bl	8005014 <xTaskGetSchedulerState>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d102      	bne.n	8003bbc <xQueueGenericSend+0xa4>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <xQueueGenericSend+0xa8>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <xQueueGenericSend+0xaa>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10b      	bne.n	8003bde <xQueueGenericSend+0xc6>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	61fb      	str	r3, [r7, #28]
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	e7fd      	b.n	8003bda <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bde:	f001 ffa3 	bl	8005b28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <xQueueGenericSend+0xdc>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d129      	bne.n	8003c48 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	68b9      	ldr	r1, [r7, #8]
 8003bf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bfa:	f000 fa0f 	bl	800401c <prvCopyDataToQueue>
 8003bfe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d010      	beq.n	8003c2a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0a:	3324      	adds	r3, #36	@ 0x24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 ffdd 	bl	8004bcc <xTaskRemoveFromEventList>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c18:	4b3f      	ldr	r3, [pc, #252]	@ (8003d18 <xQueueGenericSend+0x200>)
 8003c1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	e00a      	b.n	8003c40 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c30:	4b39      	ldr	r3, [pc, #228]	@ (8003d18 <xQueueGenericSend+0x200>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c40:	f001 ffa4 	bl	8005b8c <vPortExitCritical>
				return pdPASS;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e063      	b.n	8003d10 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c4e:	f001 ff9d 	bl	8005b8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e05c      	b.n	8003d10 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d106      	bne.n	8003c6a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c5c:	f107 0314 	add.w	r3, r7, #20
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 f87b 	bl	8004d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c6a:	f001 ff8f 	bl	8005b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c6e:	f000 fd87 	bl	8004780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c72:	f001 ff59 	bl	8005b28 <vPortEnterCritical>
 8003c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c7c:	b25b      	sxtb	r3, r3
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d103      	bne.n	8003c8c <xQueueGenericSend+0x174>
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d103      	bne.n	8003ca2 <xQueueGenericSend+0x18a>
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ca2:	f001 ff73 	bl	8005b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ca6:	1d3a      	adds	r2, r7, #4
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	4611      	mov	r1, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f001 f86a 	bl	8004d88 <xTaskCheckForTimeOut>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d124      	bne.n	8003d04 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cbc:	f000 faa6 	bl	800420c <prvIsQueueFull>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d018      	beq.n	8003cf8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc8:	3310      	adds	r3, #16
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4611      	mov	r1, r2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 ff2a 	bl	8004b28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cd6:	f000 fa31 	bl	800413c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cda:	f000 fd5f 	bl	800479c <xTaskResumeAll>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f47f af7c 	bne.w	8003bde <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d18 <xQueueGenericSend+0x200>)
 8003ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	e772      	b.n	8003bde <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cfa:	f000 fa1f 	bl	800413c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cfe:	f000 fd4d 	bl	800479c <xTaskResumeAll>
 8003d02:	e76c      	b.n	8003bde <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d06:	f000 fa19 	bl	800413c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d0a:	f000 fd47 	bl	800479c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3738      	adds	r7, #56	@ 0x38
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b090      	sub	sp, #64	@ 0x40
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10b      	bne.n	8003d4c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d46:	bf00      	nop
 8003d48:	bf00      	nop
 8003d4a:	e7fd      	b.n	8003d48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d103      	bne.n	8003d5a <xQueueGenericSendFromISR+0x3e>
 8003d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <xQueueGenericSendFromISR+0x42>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <xQueueGenericSendFromISR+0x44>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10b      	bne.n	8003d7c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d76:	bf00      	nop
 8003d78:	bf00      	nop
 8003d7a:	e7fd      	b.n	8003d78 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d103      	bne.n	8003d8a <xQueueGenericSendFromISR+0x6e>
 8003d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <xQueueGenericSendFromISR+0x72>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <xQueueGenericSendFromISR+0x74>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	623b      	str	r3, [r7, #32]
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	e7fd      	b.n	8003da8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dac:	f001 ff9c 	bl	8005ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003db0:	f3ef 8211 	mrs	r2, BASEPRI
 8003db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	61fa      	str	r2, [r7, #28]
 8003dc6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d302      	bcc.n	8003dde <xQueueGenericSendFromISR+0xc2>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d12f      	bne.n	8003e3e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003de4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003df4:	f000 f912 	bl	800401c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003df8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d112      	bne.n	8003e28 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0c:	3324      	adds	r3, #36	@ 0x24
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fedc 	bl	8004bcc <xTaskRemoveFromEventList>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00e      	beq.n	8003e38 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00b      	beq.n	8003e38 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e007      	b.n	8003e38 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	b25a      	sxtb	r2, r3
 8003e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003e3c:	e001      	b.n	8003e42 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e44:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3740      	adds	r7, #64	@ 0x40
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	@ 0x30
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e64:	2300      	movs	r3, #0
 8003e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <xQueueReceive+0x32>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	623b      	str	r3, [r7, #32]
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	e7fd      	b.n	8003e86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <xQueueReceive+0x40>
 8003e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <xQueueReceive+0x44>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <xQueueReceive+0x46>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <xQueueReceive+0x62>
	__asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	61fb      	str	r3, [r7, #28]
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	e7fd      	b.n	8003eb6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eba:	f001 f8ab 	bl	8005014 <xTaskGetSchedulerState>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <xQueueReceive+0x72>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <xQueueReceive+0x76>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <xQueueReceive+0x78>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <xQueueReceive+0x94>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	61bb      	str	r3, [r7, #24]
}
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003eec:	f001 fe1c 	bl	8005b28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01f      	beq.n	8003f3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f00:	f000 f8f6 	bl	80040f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	1e5a      	subs	r2, r3, #1
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00f      	beq.n	8003f34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f16:	3310      	adds	r3, #16
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fe57 	bl	8004bcc <xTaskRemoveFromEventList>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d007      	beq.n	8003f34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f24:	4b3c      	ldr	r3, [pc, #240]	@ (8004018 <xQueueReceive+0x1c0>)
 8003f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f34:	f001 fe2a 	bl	8005b8c <vPortExitCritical>
				return pdPASS;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e069      	b.n	8004010 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d103      	bne.n	8003f4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f42:	f001 fe23 	bl	8005b8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e062      	b.n	8004010 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f50:	f107 0310 	add.w	r3, r7, #16
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 ff01 	bl	8004d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f5e:	f001 fe15 	bl	8005b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f62:	f000 fc0d 	bl	8004780 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f66:	f001 fddf 	bl	8005b28 <vPortEnterCritical>
 8003f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f70:	b25b      	sxtb	r3, r3
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f76:	d103      	bne.n	8003f80 <xQueueReceive+0x128>
 8003f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f86:	b25b      	sxtb	r3, r3
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d103      	bne.n	8003f96 <xQueueReceive+0x13e>
 8003f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f96:	f001 fdf9 	bl	8005b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f9a:	1d3a      	adds	r2, r7, #4
 8003f9c:	f107 0310 	add.w	r3, r7, #16
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fef0 	bl	8004d88 <xTaskCheckForTimeOut>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d123      	bne.n	8003ff6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fb0:	f000 f916 	bl	80041e0 <prvIsQueueEmpty>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d017      	beq.n	8003fea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	3324      	adds	r3, #36	@ 0x24
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fdb0 	bl	8004b28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fca:	f000 f8b7 	bl	800413c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fce:	f000 fbe5 	bl	800479c <xTaskResumeAll>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d189      	bne.n	8003eec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8004018 <xQueueReceive+0x1c0>)
 8003fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	e780      	b.n	8003eec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fec:	f000 f8a6 	bl	800413c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ff0:	f000 fbd4 	bl	800479c <xTaskResumeAll>
 8003ff4:	e77a      	b.n	8003eec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ff8:	f000 f8a0 	bl	800413c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ffc:	f000 fbce 	bl	800479c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004000:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004002:	f000 f8ed 	bl	80041e0 <prvIsQueueEmpty>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	f43f af6f 	beq.w	8003eec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800400e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004010:	4618      	mov	r0, r3
 8004012:	3730      	adds	r7, #48	@ 0x30
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10d      	bne.n	8004056 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d14d      	bne.n	80040de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	4618      	mov	r0, r3
 8004048:	f001 f802 	bl	8005050 <xTaskPriorityDisinherit>
 800404c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	e043      	b.n	80040de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d119      	bne.n	8004090 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6858      	ldr	r0, [r3, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004064:	461a      	mov	r2, r3
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	f002 f89a 	bl	80061a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	441a      	add	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	429a      	cmp	r2, r3
 8004084:	d32b      	bcc.n	80040de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	e026      	b.n	80040de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68d8      	ldr	r0, [r3, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	461a      	mov	r2, r3
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	f002 f880 	bl	80061a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	425b      	negs	r3, r3
 80040aa:	441a      	add	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d207      	bcs.n	80040cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	425b      	negs	r3, r3
 80040c6:	441a      	add	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d105      	bne.n	80040de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	3b01      	subs	r3, #1
 80040dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80040e6:	697b      	ldr	r3, [r7, #20]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d018      	beq.n	8004134 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	441a      	add	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	429a      	cmp	r2, r3
 800411a:	d303      	bcc.n	8004124 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68d9      	ldr	r1, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	461a      	mov	r2, r3
 800412e:	6838      	ldr	r0, [r7, #0]
 8004130:	f002 f836 	bl	80061a0 <memcpy>
	}
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004144:	f001 fcf0 	bl	8005b28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800414e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004150:	e011      	b.n	8004176 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	2b00      	cmp	r3, #0
 8004158:	d012      	beq.n	8004180 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3324      	adds	r3, #36	@ 0x24
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fd34 	bl	8004bcc <xTaskRemoveFromEventList>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800416a:	f000 fe71 	bl	8004e50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	3b01      	subs	r3, #1
 8004172:	b2db      	uxtb	r3, r3
 8004174:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417a:	2b00      	cmp	r3, #0
 800417c:	dce9      	bgt.n	8004152 <prvUnlockQueue+0x16>
 800417e:	e000      	b.n	8004182 <prvUnlockQueue+0x46>
					break;
 8004180:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	22ff      	movs	r2, #255	@ 0xff
 8004186:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800418a:	f001 fcff 	bl	8005b8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800418e:	f001 fccb 	bl	8005b28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004198:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800419a:	e011      	b.n	80041c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d012      	beq.n	80041ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3310      	adds	r3, #16
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fd0f 	bl	8004bcc <xTaskRemoveFromEventList>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041b4:	f000 fe4c 	bl	8004e50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041b8:	7bbb      	ldrb	r3, [r7, #14]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	dce9      	bgt.n	800419c <prvUnlockQueue+0x60>
 80041c8:	e000      	b.n	80041cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	22ff      	movs	r2, #255	@ 0xff
 80041d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80041d4:	f001 fcda 	bl	8005b8c <vPortExitCritical>
}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041e8:	f001 fc9e 	bl	8005b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e001      	b.n	80041fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041fe:	f001 fcc5 	bl	8005b8c <vPortExitCritical>

	return xReturn;
 8004202:	68fb      	ldr	r3, [r7, #12]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004214:	f001 fc88 	bl	8005b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004220:	429a      	cmp	r2, r3
 8004222:	d102      	bne.n	800422a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004224:	2301      	movs	r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	e001      	b.n	800422e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800422e:	f001 fcad 	bl	8005b8c <vPortExitCritical>

	return xReturn;
 8004232:	68fb      	ldr	r3, [r7, #12]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	e014      	b.n	8004276 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800424c:	4a0f      	ldr	r2, [pc, #60]	@ (800428c <vQueueAddToRegistry+0x50>)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10b      	bne.n	8004270 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004258:	490c      	ldr	r1, [pc, #48]	@ (800428c <vQueueAddToRegistry+0x50>)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004262:	4a0a      	ldr	r2, [pc, #40]	@ (800428c <vQueueAddToRegistry+0x50>)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800426e:	e006      	b.n	800427e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3301      	adds	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b07      	cmp	r3, #7
 800427a:	d9e7      	bls.n	800424c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	2000080c 	.word	0x2000080c

08004290 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042a0:	f001 fc42 	bl	8005b28 <vPortEnterCritical>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042aa:	b25b      	sxtb	r3, r3
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d103      	bne.n	80042ba <vQueueWaitForMessageRestricted+0x2a>
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042c0:	b25b      	sxtb	r3, r3
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d103      	bne.n	80042d0 <vQueueWaitForMessageRestricted+0x40>
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042d0:	f001 fc5c 	bl	8005b8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d106      	bne.n	80042ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	3324      	adds	r3, #36	@ 0x24
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fc45 	bl	8004b74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042ea:	6978      	ldr	r0, [r7, #20]
 80042ec:	f7ff ff26 	bl	800413c <prvUnlockQueue>
	}
 80042f0:	bf00      	nop
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08e      	sub	sp, #56	@ 0x38
 80042fc:	af04      	add	r7, sp, #16
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10b      	bne.n	8004324 <xTaskCreateStatic+0x2c>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	623b      	str	r3, [r7, #32]
}
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	e7fd      	b.n	8004320 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <xTaskCreateStatic+0x4a>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	61fb      	str	r3, [r7, #28]
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004342:	235c      	movs	r3, #92	@ 0x5c
 8004344:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b5c      	cmp	r3, #92	@ 0x5c
 800434a:	d00b      	beq.n	8004364 <xTaskCreateStatic+0x6c>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	61bb      	str	r3, [r7, #24]
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	e7fd      	b.n	8004360 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004364:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01e      	beq.n	80043aa <xTaskCreateStatic+0xb2>
 800436c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436e:	2b00      	cmp	r3, #0
 8004370:	d01b      	beq.n	80043aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004374:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004384:	2300      	movs	r3, #0
 8004386:	9303      	str	r3, [sp, #12]
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	9302      	str	r3, [sp, #8]
 800438c:	f107 0314 	add.w	r3, r7, #20
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f850 	bl	8004442 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043a4:	f000 f8de 	bl	8004564 <prvAddNewTaskToReadyList>
 80043a8:	e001      	b.n	80043ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043ae:	697b      	ldr	r3, [r7, #20]
	}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3728      	adds	r7, #40	@ 0x28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08c      	sub	sp, #48	@ 0x30
 80043bc:	af04      	add	r7, sp, #16
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	4613      	mov	r3, r2
 80043c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 fccd 	bl	8005d6c <pvPortMalloc>
 80043d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00e      	beq.n	80043f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043da:	205c      	movs	r0, #92	@ 0x5c
 80043dc:	f001 fcc6 	bl	8005d6c <pvPortMalloc>
 80043e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80043ee:	e005      	b.n	80043fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043f0:	6978      	ldr	r0, [r7, #20]
 80043f2:	f001 fd89 	bl	8005f08 <vPortFree>
 80043f6:	e001      	b.n	80043fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d017      	beq.n	8004432 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	2300      	movs	r3, #0
 800440e:	9303      	str	r3, [sp, #12]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	9302      	str	r3, [sp, #8]
 8004414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f80e 	bl	8004442 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004426:	69f8      	ldr	r0, [r7, #28]
 8004428:	f000 f89c 	bl	8004564 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800442c:	2301      	movs	r3, #1
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	e002      	b.n	8004438 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
 8004436:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004438:	69bb      	ldr	r3, [r7, #24]
	}
 800443a:	4618      	mov	r0, r3
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b088      	sub	sp, #32
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004452:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	461a      	mov	r2, r3
 800445a:	21a5      	movs	r1, #165	@ 0xa5
 800445c:	f001 fe74 	bl	8006148 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800446a:	3b01      	subs	r3, #1
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	f023 0307 	bic.w	r3, r3, #7
 8004478:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	617b      	str	r3, [r7, #20]
}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	e7fd      	b.n	8004498 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01f      	beq.n	80044e2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	e012      	b.n	80044ce <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	7819      	ldrb	r1, [r3, #0]
 80044b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	4413      	add	r3, r2
 80044b6:	3334      	adds	r3, #52	@ 0x34
 80044b8:	460a      	mov	r2, r1
 80044ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d006      	beq.n	80044d6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	3301      	adds	r3, #1
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	2b0f      	cmp	r3, #15
 80044d2:	d9e9      	bls.n	80044a8 <prvInitialiseNewTask+0x66>
 80044d4:	e000      	b.n	80044d8 <prvInitialiseNewTask+0x96>
			{
				break;
 80044d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044e0:	e003      	b.n	80044ea <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ec:	2b37      	cmp	r3, #55	@ 0x37
 80044ee:	d901      	bls.n	80044f4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044f0:	2337      	movs	r3, #55	@ 0x37
 80044f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	2200      	movs	r2, #0
 8004504:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	3304      	adds	r3, #4
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff f966 	bl	80037dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004512:	3318      	adds	r3, #24
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff f961 	bl	80037dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800451e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800452e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004532:	2200      	movs	r2, #0
 8004534:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	68f9      	ldr	r1, [r7, #12]
 8004542:	69b8      	ldr	r0, [r7, #24]
 8004544:	f001 f9c2 	bl	80058cc <pxPortInitialiseStack>
 8004548:	4602      	mov	r2, r0
 800454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800454e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004558:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800455a:	bf00      	nop
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800456c:	f001 fadc 	bl	8005b28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004570:	4b2d      	ldr	r3, [pc, #180]	@ (8004628 <prvAddNewTaskToReadyList+0xc4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3301      	adds	r3, #1
 8004576:	4a2c      	ldr	r2, [pc, #176]	@ (8004628 <prvAddNewTaskToReadyList+0xc4>)
 8004578:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800457a:	4b2c      	ldr	r3, [pc, #176]	@ (800462c <prvAddNewTaskToReadyList+0xc8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004582:	4a2a      	ldr	r2, [pc, #168]	@ (800462c <prvAddNewTaskToReadyList+0xc8>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004588:	4b27      	ldr	r3, [pc, #156]	@ (8004628 <prvAddNewTaskToReadyList+0xc4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d110      	bne.n	80045b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004590:	f000 fc82 	bl	8004e98 <prvInitialiseTaskLists>
 8004594:	e00d      	b.n	80045b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004596:	4b26      	ldr	r3, [pc, #152]	@ (8004630 <prvAddNewTaskToReadyList+0xcc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800459e:	4b23      	ldr	r3, [pc, #140]	@ (800462c <prvAddNewTaskToReadyList+0xc8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d802      	bhi.n	80045b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045ac:	4a1f      	ldr	r2, [pc, #124]	@ (800462c <prvAddNewTaskToReadyList+0xc8>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045b2:	4b20      	ldr	r3, [pc, #128]	@ (8004634 <prvAddNewTaskToReadyList+0xd0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3301      	adds	r3, #1
 80045b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004634 <prvAddNewTaskToReadyList+0xd0>)
 80045ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004634 <prvAddNewTaskToReadyList+0xd0>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004638 <prvAddNewTaskToReadyList+0xd4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d903      	bls.n	80045d8 <prvAddNewTaskToReadyList+0x74>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	4a18      	ldr	r2, [pc, #96]	@ (8004638 <prvAddNewTaskToReadyList+0xd4>)
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4a15      	ldr	r2, [pc, #84]	@ (800463c <prvAddNewTaskToReadyList+0xd8>)
 80045e6:	441a      	add	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f7ff f901 	bl	80037f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045f4:	f001 faca 	bl	8005b8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004630 <prvAddNewTaskToReadyList+0xcc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00e      	beq.n	800461e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004600:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <prvAddNewTaskToReadyList+0xc8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	429a      	cmp	r2, r3
 800460c:	d207      	bcs.n	800461e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800460e:	4b0c      	ldr	r3, [pc, #48]	@ (8004640 <prvAddNewTaskToReadyList+0xdc>)
 8004610:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000d20 	.word	0x20000d20
 800462c:	2000084c 	.word	0x2000084c
 8004630:	20000d2c 	.word	0x20000d2c
 8004634:	20000d3c 	.word	0x20000d3c
 8004638:	20000d28 	.word	0x20000d28
 800463c:	20000850 	.word	0x20000850
 8004640:	e000ed04 	.word	0xe000ed04

08004644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d018      	beq.n	8004688 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004656:	4b14      	ldr	r3, [pc, #80]	@ (80046a8 <vTaskDelay+0x64>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00b      	beq.n	8004676 <vTaskDelay+0x32>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	60bb      	str	r3, [r7, #8]
}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	e7fd      	b.n	8004672 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004676:	f000 f883 	bl	8004780 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800467a:	2100      	movs	r1, #0
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fd57 	bl	8005130 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004682:	f000 f88b 	bl	800479c <xTaskResumeAll>
 8004686:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d107      	bne.n	800469e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800468e:	4b07      	ldr	r3, [pc, #28]	@ (80046ac <vTaskDelay+0x68>)
 8004690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800469e:	bf00      	nop
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000d48 	.word	0x20000d48
 80046ac:	e000ed04 	.word	0xe000ed04

080046b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08a      	sub	sp, #40	@ 0x28
 80046b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046be:	463a      	mov	r2, r7
 80046c0:	1d39      	adds	r1, r7, #4
 80046c2:	f107 0308 	add.w	r3, r7, #8
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe ff34 	bl	8003534 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	9202      	str	r2, [sp, #8]
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	2300      	movs	r3, #0
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	2300      	movs	r3, #0
 80046dc:	460a      	mov	r2, r1
 80046de:	4922      	ldr	r1, [pc, #136]	@ (8004768 <vTaskStartScheduler+0xb8>)
 80046e0:	4822      	ldr	r0, [pc, #136]	@ (800476c <vTaskStartScheduler+0xbc>)
 80046e2:	f7ff fe09 	bl	80042f8 <xTaskCreateStatic>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4a21      	ldr	r2, [pc, #132]	@ (8004770 <vTaskStartScheduler+0xc0>)
 80046ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046ec:	4b20      	ldr	r3, [pc, #128]	@ (8004770 <vTaskStartScheduler+0xc0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046f4:	2301      	movs	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e001      	b.n	80046fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d102      	bne.n	800470a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004704:	f000 fd68 	bl	80051d8 <xTimerCreateTimerTask>
 8004708:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d116      	bne.n	800473e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	613b      	str	r3, [r7, #16]
}
 8004722:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004724:	4b13      	ldr	r3, [pc, #76]	@ (8004774 <vTaskStartScheduler+0xc4>)
 8004726:	f04f 32ff 	mov.w	r2, #4294967295
 800472a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800472c:	4b12      	ldr	r3, [pc, #72]	@ (8004778 <vTaskStartScheduler+0xc8>)
 800472e:	2201      	movs	r2, #1
 8004730:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004732:	4b12      	ldr	r3, [pc, #72]	@ (800477c <vTaskStartScheduler+0xcc>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004738:	f001 f952 	bl	80059e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800473c:	e00f      	b.n	800475e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d10b      	bne.n	800475e <vTaskStartScheduler+0xae>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	60fb      	str	r3, [r7, #12]
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	e7fd      	b.n	800475a <vTaskStartScheduler+0xaa>
}
 800475e:	bf00      	nop
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	080061e4 	.word	0x080061e4
 800476c:	08004e69 	.word	0x08004e69
 8004770:	20000d44 	.word	0x20000d44
 8004774:	20000d40 	.word	0x20000d40
 8004778:	20000d2c 	.word	0x20000d2c
 800477c:	20000d24 	.word	0x20000d24

08004780 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004784:	4b04      	ldr	r3, [pc, #16]	@ (8004798 <vTaskSuspendAll+0x18>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	4a03      	ldr	r2, [pc, #12]	@ (8004798 <vTaskSuspendAll+0x18>)
 800478c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800478e:	bf00      	nop
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	20000d48 	.word	0x20000d48

0800479c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047aa:	4b42      	ldr	r3, [pc, #264]	@ (80048b4 <xTaskResumeAll+0x118>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10b      	bne.n	80047ca <xTaskResumeAll+0x2e>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	603b      	str	r3, [r7, #0]
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	e7fd      	b.n	80047c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047ca:	f001 f9ad 	bl	8005b28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047ce:	4b39      	ldr	r3, [pc, #228]	@ (80048b4 <xTaskResumeAll+0x118>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	4a37      	ldr	r2, [pc, #220]	@ (80048b4 <xTaskResumeAll+0x118>)
 80047d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047d8:	4b36      	ldr	r3, [pc, #216]	@ (80048b4 <xTaskResumeAll+0x118>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d162      	bne.n	80048a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047e0:	4b35      	ldr	r3, [pc, #212]	@ (80048b8 <xTaskResumeAll+0x11c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d05e      	beq.n	80048a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047e8:	e02f      	b.n	800484a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ea:	4b34      	ldr	r3, [pc, #208]	@ (80048bc <xTaskResumeAll+0x120>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3318      	adds	r3, #24
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff f85a 	bl	80038b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3304      	adds	r3, #4
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff f855 	bl	80038b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800480a:	4b2d      	ldr	r3, [pc, #180]	@ (80048c0 <xTaskResumeAll+0x124>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d903      	bls.n	800481a <xTaskResumeAll+0x7e>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	4a2a      	ldr	r2, [pc, #168]	@ (80048c0 <xTaskResumeAll+0x124>)
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4a27      	ldr	r2, [pc, #156]	@ (80048c4 <xTaskResumeAll+0x128>)
 8004828:	441a      	add	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3304      	adds	r3, #4
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f7fe ffe0 	bl	80037f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800483a:	4b23      	ldr	r3, [pc, #140]	@ (80048c8 <xTaskResumeAll+0x12c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	429a      	cmp	r2, r3
 8004842:	d302      	bcc.n	800484a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004844:	4b21      	ldr	r3, [pc, #132]	@ (80048cc <xTaskResumeAll+0x130>)
 8004846:	2201      	movs	r2, #1
 8004848:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800484a:	4b1c      	ldr	r3, [pc, #112]	@ (80048bc <xTaskResumeAll+0x120>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1cb      	bne.n	80047ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004858:	f000 fbbc 	bl	8004fd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800485c:	4b1c      	ldr	r3, [pc, #112]	@ (80048d0 <xTaskResumeAll+0x134>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d010      	beq.n	800488a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004868:	f000 f846 	bl	80048f8 <xTaskIncrementTick>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004872:	4b16      	ldr	r3, [pc, #88]	@ (80048cc <xTaskResumeAll+0x130>)
 8004874:	2201      	movs	r2, #1
 8004876:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3b01      	subs	r3, #1
 800487c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f1      	bne.n	8004868 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004884:	4b12      	ldr	r3, [pc, #72]	@ (80048d0 <xTaskResumeAll+0x134>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800488a:	4b10      	ldr	r3, [pc, #64]	@ (80048cc <xTaskResumeAll+0x130>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004892:	2301      	movs	r3, #1
 8004894:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004896:	4b0f      	ldr	r3, [pc, #60]	@ (80048d4 <xTaskResumeAll+0x138>)
 8004898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048a6:	f001 f971 	bl	8005b8c <vPortExitCritical>

	return xAlreadyYielded;
 80048aa:	68bb      	ldr	r3, [r7, #8]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000d48 	.word	0x20000d48
 80048b8:	20000d20 	.word	0x20000d20
 80048bc:	20000ce0 	.word	0x20000ce0
 80048c0:	20000d28 	.word	0x20000d28
 80048c4:	20000850 	.word	0x20000850
 80048c8:	2000084c 	.word	0x2000084c
 80048cc:	20000d34 	.word	0x20000d34
 80048d0:	20000d30 	.word	0x20000d30
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048de:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <xTaskGetTickCount+0x1c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048e4:	687b      	ldr	r3, [r7, #4]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000d24 	.word	0x20000d24

080048f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004902:	4b4f      	ldr	r3, [pc, #316]	@ (8004a40 <xTaskIncrementTick+0x148>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f040 8090 	bne.w	8004a2c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800490c:	4b4d      	ldr	r3, [pc, #308]	@ (8004a44 <xTaskIncrementTick+0x14c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004914:	4a4b      	ldr	r2, [pc, #300]	@ (8004a44 <xTaskIncrementTick+0x14c>)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d121      	bne.n	8004964 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004920:	4b49      	ldr	r3, [pc, #292]	@ (8004a48 <xTaskIncrementTick+0x150>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <xTaskIncrementTick+0x4a>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	603b      	str	r3, [r7, #0]
}
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	e7fd      	b.n	800493e <xTaskIncrementTick+0x46>
 8004942:	4b41      	ldr	r3, [pc, #260]	@ (8004a48 <xTaskIncrementTick+0x150>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	4b40      	ldr	r3, [pc, #256]	@ (8004a4c <xTaskIncrementTick+0x154>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a3e      	ldr	r2, [pc, #248]	@ (8004a48 <xTaskIncrementTick+0x150>)
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4a3e      	ldr	r2, [pc, #248]	@ (8004a4c <xTaskIncrementTick+0x154>)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	4b3e      	ldr	r3, [pc, #248]	@ (8004a50 <xTaskIncrementTick+0x158>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3301      	adds	r3, #1
 800495c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a50 <xTaskIncrementTick+0x158>)
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	f000 fb38 	bl	8004fd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004964:	4b3b      	ldr	r3, [pc, #236]	@ (8004a54 <xTaskIncrementTick+0x15c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	429a      	cmp	r2, r3
 800496c:	d349      	bcc.n	8004a02 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496e:	4b36      	ldr	r3, [pc, #216]	@ (8004a48 <xTaskIncrementTick+0x150>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d104      	bne.n	8004982 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004978:	4b36      	ldr	r3, [pc, #216]	@ (8004a54 <xTaskIncrementTick+0x15c>)
 800497a:	f04f 32ff 	mov.w	r2, #4294967295
 800497e:	601a      	str	r2, [r3, #0]
					break;
 8004980:	e03f      	b.n	8004a02 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004982:	4b31      	ldr	r3, [pc, #196]	@ (8004a48 <xTaskIncrementTick+0x150>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d203      	bcs.n	80049a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800499a:	4a2e      	ldr	r2, [pc, #184]	@ (8004a54 <xTaskIncrementTick+0x15c>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049a0:	e02f      	b.n	8004a02 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe ff82 	bl	80038b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	3318      	adds	r3, #24
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe ff79 	bl	80038b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c2:	4b25      	ldr	r3, [pc, #148]	@ (8004a58 <xTaskIncrementTick+0x160>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d903      	bls.n	80049d2 <xTaskIncrementTick+0xda>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ce:	4a22      	ldr	r2, [pc, #136]	@ (8004a58 <xTaskIncrementTick+0x160>)
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4a1f      	ldr	r2, [pc, #124]	@ (8004a5c <xTaskIncrementTick+0x164>)
 80049e0:	441a      	add	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f7fe ff04 	bl	80037f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a60 <xTaskIncrementTick+0x168>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d3b8      	bcc.n	800496e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80049fc:	2301      	movs	r3, #1
 80049fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a00:	e7b5      	b.n	800496e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a02:	4b17      	ldr	r3, [pc, #92]	@ (8004a60 <xTaskIncrementTick+0x168>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a08:	4914      	ldr	r1, [pc, #80]	@ (8004a5c <xTaskIncrementTick+0x164>)
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d901      	bls.n	8004a1e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a1e:	4b11      	ldr	r3, [pc, #68]	@ (8004a64 <xTaskIncrementTick+0x16c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004a26:	2301      	movs	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e004      	b.n	8004a36 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <xTaskIncrementTick+0x170>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	4a0d      	ldr	r2, [pc, #52]	@ (8004a68 <xTaskIncrementTick+0x170>)
 8004a34:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a36:	697b      	ldr	r3, [r7, #20]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	20000d48 	.word	0x20000d48
 8004a44:	20000d24 	.word	0x20000d24
 8004a48:	20000cd8 	.word	0x20000cd8
 8004a4c:	20000cdc 	.word	0x20000cdc
 8004a50:	20000d38 	.word	0x20000d38
 8004a54:	20000d40 	.word	0x20000d40
 8004a58:	20000d28 	.word	0x20000d28
 8004a5c:	20000850 	.word	0x20000850
 8004a60:	2000084c 	.word	0x2000084c
 8004a64:	20000d34 	.word	0x20000d34
 8004a68:	20000d30 	.word	0x20000d30

08004a6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a72:	4b28      	ldr	r3, [pc, #160]	@ (8004b14 <vTaskSwitchContext+0xa8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a7a:	4b27      	ldr	r3, [pc, #156]	@ (8004b18 <vTaskSwitchContext+0xac>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a80:	e042      	b.n	8004b08 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004a82:	4b25      	ldr	r3, [pc, #148]	@ (8004b18 <vTaskSwitchContext+0xac>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a88:	4b24      	ldr	r3, [pc, #144]	@ (8004b1c <vTaskSwitchContext+0xb0>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	e011      	b.n	8004ab4 <vTaskSwitchContext+0x48>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <vTaskSwitchContext+0x42>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	607b      	str	r3, [r7, #4]
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	e7fd      	b.n	8004aaa <vTaskSwitchContext+0x3e>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	491a      	ldr	r1, [pc, #104]	@ (8004b20 <vTaskSwitchContext+0xb4>)
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0e3      	beq.n	8004a90 <vTaskSwitchContext+0x24>
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4a13      	ldr	r2, [pc, #76]	@ (8004b20 <vTaskSwitchContext+0xb4>)
 8004ad4:	4413      	add	r3, r2
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d104      	bne.n	8004af8 <vTaskSwitchContext+0x8c>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	605a      	str	r2, [r3, #4]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	4a09      	ldr	r2, [pc, #36]	@ (8004b24 <vTaskSwitchContext+0xb8>)
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	4a06      	ldr	r2, [pc, #24]	@ (8004b1c <vTaskSwitchContext+0xb0>)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6013      	str	r3, [r2, #0]
}
 8004b08:	bf00      	nop
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	20000d48 	.word	0x20000d48
 8004b18:	20000d34 	.word	0x20000d34
 8004b1c:	20000d28 	.word	0x20000d28
 8004b20:	20000850 	.word	0x20000850
 8004b24:	2000084c 	.word	0x2000084c

08004b28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10b      	bne.n	8004b50 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	60fb      	str	r3, [r7, #12]
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	e7fd      	b.n	8004b4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b50:	4b07      	ldr	r3, [pc, #28]	@ (8004b70 <vTaskPlaceOnEventList+0x48>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3318      	adds	r3, #24
 8004b56:	4619      	mov	r1, r3
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fe fe70 	bl	800383e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b5e:	2101      	movs	r1, #1
 8004b60:	6838      	ldr	r0, [r7, #0]
 8004b62:	f000 fae5 	bl	8005130 <prvAddCurrentTaskToDelayedList>
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	2000084c 	.word	0x2000084c

08004b74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10b      	bne.n	8004b9e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	617b      	str	r3, [r7, #20]
}
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop
 8004b9c:	e7fd      	b.n	8004b9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3318      	adds	r3, #24
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7fe fe25 	bl	80037f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	68b8      	ldr	r0, [r7, #8]
 8004bbc:	f000 fab8 	bl	8005130 <prvAddCurrentTaskToDelayedList>
	}
 8004bc0:	bf00      	nop
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	2000084c 	.word	0x2000084c

08004bcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10b      	bne.n	8004bfa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	60fb      	str	r3, [r7, #12]
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop
 8004bf8:	e7fd      	b.n	8004bf6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	3318      	adds	r3, #24
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe fe56 	bl	80038b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c04:	4b1d      	ldr	r3, [pc, #116]	@ (8004c7c <xTaskRemoveFromEventList+0xb0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d11d      	bne.n	8004c48 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fe fe4d 	bl	80038b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1a:	4b19      	ldr	r3, [pc, #100]	@ (8004c80 <xTaskRemoveFromEventList+0xb4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d903      	bls.n	8004c2a <xTaskRemoveFromEventList+0x5e>
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	4a16      	ldr	r2, [pc, #88]	@ (8004c80 <xTaskRemoveFromEventList+0xb4>)
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4a13      	ldr	r2, [pc, #76]	@ (8004c84 <xTaskRemoveFromEventList+0xb8>)
 8004c38:	441a      	add	r2, r3
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f7fe fdd8 	bl	80037f6 <vListInsertEnd>
 8004c46:	e005      	b.n	8004c54 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	3318      	adds	r3, #24
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	480e      	ldr	r0, [pc, #56]	@ (8004c88 <xTaskRemoveFromEventList+0xbc>)
 8004c50:	f7fe fdd1 	bl	80037f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c58:	4b0c      	ldr	r3, [pc, #48]	@ (8004c8c <xTaskRemoveFromEventList+0xc0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d905      	bls.n	8004c6e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c62:	2301      	movs	r3, #1
 8004c64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c66:	4b0a      	ldr	r3, [pc, #40]	@ (8004c90 <xTaskRemoveFromEventList+0xc4>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	e001      	b.n	8004c72 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c72:	697b      	ldr	r3, [r7, #20]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000d48 	.word	0x20000d48
 8004c80:	20000d28 	.word	0x20000d28
 8004c84:	20000850 	.word	0x20000850
 8004c88:	20000ce0 	.word	0x20000ce0
 8004c8c:	2000084c 	.word	0x2000084c
 8004c90:	20000d34 	.word	0x20000d34

08004c94 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004d48 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	613b      	str	r3, [r7, #16]
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	60fb      	str	r3, [r7, #12]
}
 8004ce6:	bf00      	nop
 8004ce8:	bf00      	nop
 8004cea:	e7fd      	b.n	8004ce8 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7fe fddf 	bl	80038b0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe fdda 	bl	80038b0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d00:	4b12      	ldr	r3, [pc, #72]	@ (8004d4c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d903      	bls.n	8004d10 <vTaskRemoveFromUnorderedEventList+0x7c>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8004d4c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004d50 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004d1e:	441a      	add	r2, r3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f7fe fd65 	bl	80037f6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d30:	4b08      	ldr	r3, [pc, #32]	@ (8004d54 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d902      	bls.n	8004d40 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004d3a:	4b07      	ldr	r3, [pc, #28]	@ (8004d58 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
	}
}
 8004d40:	bf00      	nop
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20000d48 	.word	0x20000d48
 8004d4c:	20000d28 	.word	0x20000d28
 8004d50:	20000850 	.word	0x20000850
 8004d54:	2000084c 	.word	0x2000084c
 8004d58:	20000d34 	.word	0x20000d34

08004d5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d64:	4b06      	ldr	r3, [pc, #24]	@ (8004d80 <vTaskInternalSetTimeOutState+0x24>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d6c:	4b05      	ldr	r3, [pc, #20]	@ (8004d84 <vTaskInternalSetTimeOutState+0x28>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	605a      	str	r2, [r3, #4]
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000d38 	.word	0x20000d38
 8004d84:	20000d24 	.word	0x20000d24

08004d88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10b      	bne.n	8004db0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	613b      	str	r3, [r7, #16]
}
 8004daa:	bf00      	nop
 8004dac:	bf00      	nop
 8004dae:	e7fd      	b.n	8004dac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10b      	bne.n	8004dce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	60fb      	str	r3, [r7, #12]
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	e7fd      	b.n	8004dca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004dce:	f000 feab 	bl	8005b28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e48 <xTaskCheckForTimeOut+0xc0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d102      	bne.n	8004df2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61fb      	str	r3, [r7, #28]
 8004df0:	e023      	b.n	8004e3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4b15      	ldr	r3, [pc, #84]	@ (8004e4c <xTaskCheckForTimeOut+0xc4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d007      	beq.n	8004e0e <xTaskCheckForTimeOut+0x86>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d302      	bcc.n	8004e0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	e015      	b.n	8004e3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d20b      	bcs.n	8004e30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	1ad2      	subs	r2, r2, r3
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ff99 	bl	8004d5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	e004      	b.n	8004e3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e3a:	f000 fea7 	bl	8005b8c <vPortExitCritical>

	return xReturn;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3720      	adds	r7, #32
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000d24 	.word	0x20000d24
 8004e4c:	20000d38 	.word	0x20000d38

08004e50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e54:	4b03      	ldr	r3, [pc, #12]	@ (8004e64 <vTaskMissedYield+0x14>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	20000d34 	.word	0x20000d34

08004e68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e70:	f000 f852 	bl	8004f18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e74:	4b06      	ldr	r3, [pc, #24]	@ (8004e90 <prvIdleTask+0x28>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d9f9      	bls.n	8004e70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e7c:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <prvIdleTask+0x2c>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e8c:	e7f0      	b.n	8004e70 <prvIdleTask+0x8>
 8004e8e:	bf00      	nop
 8004e90:	20000850 	.word	0x20000850
 8004e94:	e000ed04 	.word	0xe000ed04

08004e98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	e00c      	b.n	8004ebe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4a12      	ldr	r2, [pc, #72]	@ (8004ef8 <prvInitialiseTaskLists+0x60>)
 8004eb0:	4413      	add	r3, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe fc72 	bl	800379c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	607b      	str	r3, [r7, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b37      	cmp	r3, #55	@ 0x37
 8004ec2:	d9ef      	bls.n	8004ea4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ec4:	480d      	ldr	r0, [pc, #52]	@ (8004efc <prvInitialiseTaskLists+0x64>)
 8004ec6:	f7fe fc69 	bl	800379c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004eca:	480d      	ldr	r0, [pc, #52]	@ (8004f00 <prvInitialiseTaskLists+0x68>)
 8004ecc:	f7fe fc66 	bl	800379c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ed0:	480c      	ldr	r0, [pc, #48]	@ (8004f04 <prvInitialiseTaskLists+0x6c>)
 8004ed2:	f7fe fc63 	bl	800379c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ed6:	480c      	ldr	r0, [pc, #48]	@ (8004f08 <prvInitialiseTaskLists+0x70>)
 8004ed8:	f7fe fc60 	bl	800379c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004edc:	480b      	ldr	r0, [pc, #44]	@ (8004f0c <prvInitialiseTaskLists+0x74>)
 8004ede:	f7fe fc5d 	bl	800379c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <prvInitialiseTaskLists+0x78>)
 8004ee4:	4a05      	ldr	r2, [pc, #20]	@ (8004efc <prvInitialiseTaskLists+0x64>)
 8004ee6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f14 <prvInitialiseTaskLists+0x7c>)
 8004eea:	4a05      	ldr	r2, [pc, #20]	@ (8004f00 <prvInitialiseTaskLists+0x68>)
 8004eec:	601a      	str	r2, [r3, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000850 	.word	0x20000850
 8004efc:	20000cb0 	.word	0x20000cb0
 8004f00:	20000cc4 	.word	0x20000cc4
 8004f04:	20000ce0 	.word	0x20000ce0
 8004f08:	20000cf4 	.word	0x20000cf4
 8004f0c:	20000d0c 	.word	0x20000d0c
 8004f10:	20000cd8 	.word	0x20000cd8
 8004f14:	20000cdc 	.word	0x20000cdc

08004f18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f1e:	e019      	b.n	8004f54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f20:	f000 fe02 	bl	8005b28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f24:	4b10      	ldr	r3, [pc, #64]	@ (8004f68 <prvCheckTasksWaitingTermination+0x50>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fe fcbd 	bl	80038b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <prvCheckTasksWaitingTermination+0x54>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8004f6c <prvCheckTasksWaitingTermination+0x54>)
 8004f3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f40:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <prvCheckTasksWaitingTermination+0x58>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	4a0a      	ldr	r2, [pc, #40]	@ (8004f70 <prvCheckTasksWaitingTermination+0x58>)
 8004f48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f4a:	f000 fe1f 	bl	8005b8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f810 	bl	8004f74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f54:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <prvCheckTasksWaitingTermination+0x58>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e1      	bne.n	8004f20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000cf4 	.word	0x20000cf4
 8004f6c:	20000d20 	.word	0x20000d20
 8004f70:	20000d08 	.word	0x20000d08

08004f74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d108      	bne.n	8004f98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 ffbc 	bl	8005f08 <vPortFree>
				vPortFree( pxTCB );
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 ffb9 	bl	8005f08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f96:	e019      	b.n	8004fcc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d103      	bne.n	8004faa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 ffb0 	bl	8005f08 <vPortFree>
	}
 8004fa8:	e010      	b.n	8004fcc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d00b      	beq.n	8004fcc <prvDeleteTCB+0x58>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	60fb      	str	r3, [r7, #12]
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	e7fd      	b.n	8004fc8 <prvDeleteTCB+0x54>
	}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fda:	4b0c      	ldr	r3, [pc, #48]	@ (800500c <prvResetNextTaskUnblockTime+0x38>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d104      	bne.n	8004fee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8005010 <prvResetNextTaskUnblockTime+0x3c>)
 8004fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fec:	e008      	b.n	8005000 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fee:	4b07      	ldr	r3, [pc, #28]	@ (800500c <prvResetNextTaskUnblockTime+0x38>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4a04      	ldr	r2, [pc, #16]	@ (8005010 <prvResetNextTaskUnblockTime+0x3c>)
 8004ffe:	6013      	str	r3, [r2, #0]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	20000cd8 	.word	0x20000cd8
 8005010:	20000d40 	.word	0x20000d40

08005014 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800501a:	4b0b      	ldr	r3, [pc, #44]	@ (8005048 <xTaskGetSchedulerState+0x34>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005022:	2301      	movs	r3, #1
 8005024:	607b      	str	r3, [r7, #4]
 8005026:	e008      	b.n	800503a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005028:	4b08      	ldr	r3, [pc, #32]	@ (800504c <xTaskGetSchedulerState+0x38>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005030:	2302      	movs	r3, #2
 8005032:	607b      	str	r3, [r7, #4]
 8005034:	e001      	b.n	800503a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005036:	2300      	movs	r3, #0
 8005038:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800503a:	687b      	ldr	r3, [r7, #4]
	}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	20000d2c 	.word	0x20000d2c
 800504c:	20000d48 	.word	0x20000d48

08005050 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d058      	beq.n	8005118 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005066:	4b2f      	ldr	r3, [pc, #188]	@ (8005124 <xTaskPriorityDisinherit+0xd4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	429a      	cmp	r2, r3
 800506e:	d00b      	beq.n	8005088 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	60fb      	str	r3, [r7, #12]
}
 8005082:	bf00      	nop
 8005084:	bf00      	nop
 8005086:	e7fd      	b.n	8005084 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10b      	bne.n	80050a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	60bb      	str	r3, [r7, #8]
}
 80050a2:	bf00      	nop
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ac:	1e5a      	subs	r2, r3, #1
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d02c      	beq.n	8005118 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d128      	bne.n	8005118 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fbf0 	bl	80038b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005128 <xTaskPriorityDisinherit+0xd8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d903      	bls.n	80050f8 <xTaskPriorityDisinherit+0xa8>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005128 <xTaskPriorityDisinherit+0xd8>)
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4a09      	ldr	r2, [pc, #36]	@ (800512c <xTaskPriorityDisinherit+0xdc>)
 8005106:	441a      	add	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f7fe fb71 	bl	80037f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005114:	2301      	movs	r3, #1
 8005116:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005118:	697b      	ldr	r3, [r7, #20]
	}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	2000084c 	.word	0x2000084c
 8005128:	20000d28 	.word	0x20000d28
 800512c:	20000850 	.word	0x20000850

08005130 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800513a:	4b21      	ldr	r3, [pc, #132]	@ (80051c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005140:	4b20      	ldr	r3, [pc, #128]	@ (80051c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3304      	adds	r3, #4
 8005146:	4618      	mov	r0, r3
 8005148:	f7fe fbb2 	bl	80038b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005152:	d10a      	bne.n	800516a <prvAddCurrentTaskToDelayedList+0x3a>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800515a:	4b1a      	ldr	r3, [pc, #104]	@ (80051c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3304      	adds	r3, #4
 8005160:	4619      	mov	r1, r3
 8005162:	4819      	ldr	r0, [pc, #100]	@ (80051c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005164:	f7fe fb47 	bl	80037f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005168:	e026      	b.n	80051b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4413      	add	r3, r2
 8005170:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005172:	4b14      	ldr	r3, [pc, #80]	@ (80051c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	429a      	cmp	r2, r3
 8005180:	d209      	bcs.n	8005196 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005182:	4b12      	ldr	r3, [pc, #72]	@ (80051cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4b0f      	ldr	r3, [pc, #60]	@ (80051c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7fe fb55 	bl	800383e <vListInsert>
}
 8005194:	e010      	b.n	80051b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005196:	4b0e      	ldr	r3, [pc, #56]	@ (80051d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f7fe fb4b 	bl	800383e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051a8:	4b0a      	ldr	r3, [pc, #40]	@ (80051d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d202      	bcs.n	80051b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051b2:	4a08      	ldr	r2, [pc, #32]	@ (80051d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6013      	str	r3, [r2, #0]
}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20000d24 	.word	0x20000d24
 80051c4:	2000084c 	.word	0x2000084c
 80051c8:	20000d0c 	.word	0x20000d0c
 80051cc:	20000cdc 	.word	0x20000cdc
 80051d0:	20000cd8 	.word	0x20000cd8
 80051d4:	20000d40 	.word	0x20000d40

080051d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	@ 0x28
 80051dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051e2:	f000 fb13 	bl	800580c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051e6:	4b1d      	ldr	r3, [pc, #116]	@ (800525c <xTimerCreateTimerTask+0x84>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d021      	beq.n	8005232 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051f6:	1d3a      	adds	r2, r7, #4
 80051f8:	f107 0108 	add.w	r1, r7, #8
 80051fc:	f107 030c 	add.w	r3, r7, #12
 8005200:	4618      	mov	r0, r3
 8005202:	f7fe f9b1 	bl	8003568 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	9202      	str	r2, [sp, #8]
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	2302      	movs	r3, #2
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	2300      	movs	r3, #0
 8005216:	460a      	mov	r2, r1
 8005218:	4911      	ldr	r1, [pc, #68]	@ (8005260 <xTimerCreateTimerTask+0x88>)
 800521a:	4812      	ldr	r0, [pc, #72]	@ (8005264 <xTimerCreateTimerTask+0x8c>)
 800521c:	f7ff f86c 	bl	80042f8 <xTaskCreateStatic>
 8005220:	4603      	mov	r3, r0
 8005222:	4a11      	ldr	r2, [pc, #68]	@ (8005268 <xTimerCreateTimerTask+0x90>)
 8005224:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005226:	4b10      	ldr	r3, [pc, #64]	@ (8005268 <xTimerCreateTimerTask+0x90>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800522e:	2301      	movs	r3, #1
 8005230:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10b      	bne.n	8005250 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	613b      	str	r3, [r7, #16]
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	e7fd      	b.n	800524c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005250:	697b      	ldr	r3, [r7, #20]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000d7c 	.word	0x20000d7c
 8005260:	080061ec 	.word	0x080061ec
 8005264:	080053a5 	.word	0x080053a5
 8005268:	20000d80 	.word	0x20000d80

0800526c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	@ 0x28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800527a:	2300      	movs	r3, #0
 800527c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <xTimerGenericCommand+0x30>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	623b      	str	r3, [r7, #32]
}
 8005296:	bf00      	nop
 8005298:	bf00      	nop
 800529a:	e7fd      	b.n	8005298 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800529c:	4b19      	ldr	r3, [pc, #100]	@ (8005304 <xTimerGenericCommand+0x98>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d02a      	beq.n	80052fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b05      	cmp	r3, #5
 80052b4:	dc18      	bgt.n	80052e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052b6:	f7ff fead 	bl	8005014 <xTaskGetSchedulerState>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d109      	bne.n	80052d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052c0:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <xTimerGenericCommand+0x98>)
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	f107 0110 	add.w	r1, r7, #16
 80052c8:	2300      	movs	r3, #0
 80052ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052cc:	f7fe fc24 	bl	8003b18 <xQueueGenericSend>
 80052d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80052d2:	e012      	b.n	80052fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <xTimerGenericCommand+0x98>)
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	f107 0110 	add.w	r1, r7, #16
 80052dc:	2300      	movs	r3, #0
 80052de:	2200      	movs	r2, #0
 80052e0:	f7fe fc1a 	bl	8003b18 <xQueueGenericSend>
 80052e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80052e6:	e008      	b.n	80052fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052e8:	4b06      	ldr	r3, [pc, #24]	@ (8005304 <xTimerGenericCommand+0x98>)
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	f107 0110 	add.w	r1, r7, #16
 80052f0:	2300      	movs	r3, #0
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	f7fe fd12 	bl	8003d1c <xQueueGenericSendFromISR>
 80052f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3728      	adds	r7, #40	@ 0x28
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000d7c 	.word	0x20000d7c

08005308 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af02      	add	r7, sp, #8
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005312:	4b23      	ldr	r3, [pc, #140]	@ (80053a0 <prvProcessExpiredTimer+0x98>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	3304      	adds	r3, #4
 8005320:	4618      	mov	r0, r3
 8005322:	f7fe fac5 	bl	80038b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d023      	beq.n	800537c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	699a      	ldr	r2, [r3, #24]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	18d1      	adds	r1, r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	6978      	ldr	r0, [r7, #20]
 8005342:	f000 f8d5 	bl	80054f0 <prvInsertTimerInActiveList>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d020      	beq.n	800538e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800534c:	2300      	movs	r3, #0
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	2300      	movs	r3, #0
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	2100      	movs	r1, #0
 8005356:	6978      	ldr	r0, [r7, #20]
 8005358:	f7ff ff88 	bl	800526c <xTimerGenericCommand>
 800535c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d114      	bne.n	800538e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	60fb      	str	r3, [r7, #12]
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005382:	f023 0301 	bic.w	r3, r3, #1
 8005386:	b2da      	uxtb	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	6978      	ldr	r0, [r7, #20]
 8005394:	4798      	blx	r3
}
 8005396:	bf00      	nop
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000d74 	.word	0x20000d74

080053a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053ac:	f107 0308 	add.w	r3, r7, #8
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 f859 	bl	8005468 <prvGetNextExpireTime>
 80053b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4619      	mov	r1, r3
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f805 	bl	80053cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80053c2:	f000 f8d7 	bl	8005574 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053c6:	bf00      	nop
 80053c8:	e7f0      	b.n	80053ac <prvTimerTask+0x8>
	...

080053cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053d6:	f7ff f9d3 	bl	8004780 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053da:	f107 0308 	add.w	r3, r7, #8
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f866 	bl	80054b0 <prvSampleTimeNow>
 80053e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d130      	bne.n	800544e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <prvProcessTimerOrBlockTask+0x3c>
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d806      	bhi.n	8005408 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053fa:	f7ff f9cf 	bl	800479c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff ff81 	bl	8005308 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005406:	e024      	b.n	8005452 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800540e:	4b13      	ldr	r3, [pc, #76]	@ (800545c <prvProcessTimerOrBlockTask+0x90>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <prvProcessTimerOrBlockTask+0x50>
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <prvProcessTimerOrBlockTask+0x52>
 800541c:	2300      	movs	r3, #0
 800541e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005420:	4b0f      	ldr	r3, [pc, #60]	@ (8005460 <prvProcessTimerOrBlockTask+0x94>)
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	4619      	mov	r1, r3
 800542e:	f7fe ff2f 	bl	8004290 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005432:	f7ff f9b3 	bl	800479c <xTaskResumeAll>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800543c:	4b09      	ldr	r3, [pc, #36]	@ (8005464 <prvProcessTimerOrBlockTask+0x98>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	f3bf 8f6f 	isb	sy
}
 800544c:	e001      	b.n	8005452 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800544e:	f7ff f9a5 	bl	800479c <xTaskResumeAll>
}
 8005452:	bf00      	nop
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000d78 	.word	0x20000d78
 8005460:	20000d7c 	.word	0x20000d7c
 8005464:	e000ed04 	.word	0xe000ed04

08005468 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005470:	4b0e      	ldr	r3, [pc, #56]	@ (80054ac <prvGetNextExpireTime+0x44>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <prvGetNextExpireTime+0x16>
 800547a:	2201      	movs	r2, #1
 800547c:	e000      	b.n	8005480 <prvGetNextExpireTime+0x18>
 800547e:	2200      	movs	r2, #0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800548c:	4b07      	ldr	r3, [pc, #28]	@ (80054ac <prvGetNextExpireTime+0x44>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	e001      	b.n	800549c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800549c:	68fb      	ldr	r3, [r7, #12]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	20000d74 	.word	0x20000d74

080054b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80054b8:	f7ff fa0e 	bl	80048d8 <xTaskGetTickCount>
 80054bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80054be:	4b0b      	ldr	r3, [pc, #44]	@ (80054ec <prvSampleTimeNow+0x3c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d205      	bcs.n	80054d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054c8:	f000 f93a 	bl	8005740 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	e002      	b.n	80054da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054da:	4a04      	ldr	r2, [pc, #16]	@ (80054ec <prvSampleTimeNow+0x3c>)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054e0:	68fb      	ldr	r3, [r7, #12]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20000d84 	.word	0x20000d84

080054f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	429a      	cmp	r2, r3
 8005514:	d812      	bhi.n	800553c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	1ad2      	subs	r2, r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	429a      	cmp	r2, r3
 8005522:	d302      	bcc.n	800552a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005524:	2301      	movs	r3, #1
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e01b      	b.n	8005562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800552a:	4b10      	ldr	r3, [pc, #64]	@ (800556c <prvInsertTimerInActiveList+0x7c>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3304      	adds	r3, #4
 8005532:	4619      	mov	r1, r3
 8005534:	4610      	mov	r0, r2
 8005536:	f7fe f982 	bl	800383e <vListInsert>
 800553a:	e012      	b.n	8005562 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d206      	bcs.n	8005552 <prvInsertTimerInActiveList+0x62>
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d302      	bcc.n	8005552 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800554c:	2301      	movs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	e007      	b.n	8005562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005552:	4b07      	ldr	r3, [pc, #28]	@ (8005570 <prvInsertTimerInActiveList+0x80>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3304      	adds	r3, #4
 800555a:	4619      	mov	r1, r3
 800555c:	4610      	mov	r0, r2
 800555e:	f7fe f96e 	bl	800383e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005562:	697b      	ldr	r3, [r7, #20]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20000d78 	.word	0x20000d78
 8005570:	20000d74 	.word	0x20000d74

08005574 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08e      	sub	sp, #56	@ 0x38
 8005578:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800557a:	e0ce      	b.n	800571a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	da19      	bge.n	80055b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005582:	1d3b      	adds	r3, r7, #4
 8005584:	3304      	adds	r3, #4
 8005586:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	61fb      	str	r3, [r7, #28]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80055a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ac:	6850      	ldr	r0, [r2, #4]
 80055ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055b0:	6892      	ldr	r2, [r2, #8]
 80055b2:	4611      	mov	r1, r2
 80055b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f2c0 80ae 	blt.w	800571a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d004      	beq.n	80055d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055cc:	3304      	adds	r3, #4
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fe f96e 	bl	80038b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055d4:	463b      	mov	r3, r7
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff ff6a 	bl	80054b0 <prvSampleTimeNow>
 80055dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b09      	cmp	r3, #9
 80055e2:	f200 8097 	bhi.w	8005714 <prvProcessReceivedCommands+0x1a0>
 80055e6:	a201      	add	r2, pc, #4	@ (adr r2, 80055ec <prvProcessReceivedCommands+0x78>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005615 	.word	0x08005615
 80055f0:	08005615 	.word	0x08005615
 80055f4:	08005615 	.word	0x08005615
 80055f8:	0800568b 	.word	0x0800568b
 80055fc:	0800569f 	.word	0x0800569f
 8005600:	080056eb 	.word	0x080056eb
 8005604:	08005615 	.word	0x08005615
 8005608:	08005615 	.word	0x08005615
 800560c:	0800568b 	.word	0x0800568b
 8005610:	0800569f 	.word	0x0800569f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005616:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	b2da      	uxtb	r2, r3
 8005620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005622:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	18d1      	adds	r1, r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005634:	f7ff ff5c 	bl	80054f0 <prvInsertTimerInActiveList>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d06c      	beq.n	8005718 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800563e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005644:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d061      	beq.n	8005718 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	441a      	add	r2, r3
 800565c:	2300      	movs	r3, #0
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2300      	movs	r3, #0
 8005662:	2100      	movs	r1, #0
 8005664:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005666:	f7ff fe01 	bl	800526c <xTimerGenericCommand>
 800566a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d152      	bne.n	8005718 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	61bb      	str	r3, [r7, #24]
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	e7fd      	b.n	8005686 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800568a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	b2da      	uxtb	r2, r3
 8005696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005698:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800569c:	e03d      	b.n	800571a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800569e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80056b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10b      	bne.n	80056d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	617b      	str	r3, [r7, #20]
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	e7fd      	b.n	80056d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80056d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	18d1      	adds	r1, r2, r3
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056e4:	f7ff ff04 	bl	80054f0 <prvInsertTimerInActiveList>
					break;
 80056e8:	e017      	b.n	800571a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d103      	bne.n	8005700 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80056f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056fa:	f000 fc05 	bl	8005f08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80056fe:	e00c      	b.n	800571a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005702:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	b2da      	uxtb	r2, r3
 800570c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005712:	e002      	b.n	800571a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005714:	bf00      	nop
 8005716:	e000      	b.n	800571a <prvProcessReceivedCommands+0x1a6>
					break;
 8005718:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800571a:	4b08      	ldr	r3, [pc, #32]	@ (800573c <prvProcessReceivedCommands+0x1c8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	1d39      	adds	r1, r7, #4
 8005720:	2200      	movs	r2, #0
 8005722:	4618      	mov	r0, r3
 8005724:	f7fe fb98 	bl	8003e58 <xQueueReceive>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	f47f af26 	bne.w	800557c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	3730      	adds	r7, #48	@ 0x30
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000d7c 	.word	0x20000d7c

08005740 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005746:	e049      	b.n	80057dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005748:	4b2e      	ldr	r3, [pc, #184]	@ (8005804 <prvSwitchTimerLists+0xc4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005752:	4b2c      	ldr	r3, [pc, #176]	@ (8005804 <prvSwitchTimerLists+0xc4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3304      	adds	r3, #4
 8005760:	4618      	mov	r0, r3
 8005762:	f7fe f8a5 	bl	80038b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d02f      	beq.n	80057dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4413      	add	r3, r2
 8005784:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	429a      	cmp	r2, r3
 800578c:	d90e      	bls.n	80057ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800579a:	4b1a      	ldr	r3, [pc, #104]	@ (8005804 <prvSwitchTimerLists+0xc4>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3304      	adds	r3, #4
 80057a2:	4619      	mov	r1, r3
 80057a4:	4610      	mov	r0, r2
 80057a6:	f7fe f84a 	bl	800383e <vListInsert>
 80057aa:	e017      	b.n	80057dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057ac:	2300      	movs	r3, #0
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	2300      	movs	r3, #0
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	2100      	movs	r1, #0
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7ff fd58 	bl	800526c <xTimerGenericCommand>
 80057bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10b      	bne.n	80057dc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	603b      	str	r3, [r7, #0]
}
 80057d6:	bf00      	nop
 80057d8:	bf00      	nop
 80057da:	e7fd      	b.n	80057d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057dc:	4b09      	ldr	r3, [pc, #36]	@ (8005804 <prvSwitchTimerLists+0xc4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1b0      	bne.n	8005748 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80057e6:	4b07      	ldr	r3, [pc, #28]	@ (8005804 <prvSwitchTimerLists+0xc4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80057ec:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <prvSwitchTimerLists+0xc8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a04      	ldr	r2, [pc, #16]	@ (8005804 <prvSwitchTimerLists+0xc4>)
 80057f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057f4:	4a04      	ldr	r2, [pc, #16]	@ (8005808 <prvSwitchTimerLists+0xc8>)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	6013      	str	r3, [r2, #0]
}
 80057fa:	bf00      	nop
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000d74 	.word	0x20000d74
 8005808:	20000d78 	.word	0x20000d78

0800580c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005812:	f000 f989 	bl	8005b28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005816:	4b15      	ldr	r3, [pc, #84]	@ (800586c <prvCheckForValidListAndQueue+0x60>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d120      	bne.n	8005860 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800581e:	4814      	ldr	r0, [pc, #80]	@ (8005870 <prvCheckForValidListAndQueue+0x64>)
 8005820:	f7fd ffbc 	bl	800379c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005824:	4813      	ldr	r0, [pc, #76]	@ (8005874 <prvCheckForValidListAndQueue+0x68>)
 8005826:	f7fd ffb9 	bl	800379c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800582a:	4b13      	ldr	r3, [pc, #76]	@ (8005878 <prvCheckForValidListAndQueue+0x6c>)
 800582c:	4a10      	ldr	r2, [pc, #64]	@ (8005870 <prvCheckForValidListAndQueue+0x64>)
 800582e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005830:	4b12      	ldr	r3, [pc, #72]	@ (800587c <prvCheckForValidListAndQueue+0x70>)
 8005832:	4a10      	ldr	r2, [pc, #64]	@ (8005874 <prvCheckForValidListAndQueue+0x68>)
 8005834:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005836:	2300      	movs	r3, #0
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	4b11      	ldr	r3, [pc, #68]	@ (8005880 <prvCheckForValidListAndQueue+0x74>)
 800583c:	4a11      	ldr	r2, [pc, #68]	@ (8005884 <prvCheckForValidListAndQueue+0x78>)
 800583e:	2110      	movs	r1, #16
 8005840:	200a      	movs	r0, #10
 8005842:	f7fe f8c9 	bl	80039d8 <xQueueGenericCreateStatic>
 8005846:	4603      	mov	r3, r0
 8005848:	4a08      	ldr	r2, [pc, #32]	@ (800586c <prvCheckForValidListAndQueue+0x60>)
 800584a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800584c:	4b07      	ldr	r3, [pc, #28]	@ (800586c <prvCheckForValidListAndQueue+0x60>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005854:	4b05      	ldr	r3, [pc, #20]	@ (800586c <prvCheckForValidListAndQueue+0x60>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	490b      	ldr	r1, [pc, #44]	@ (8005888 <prvCheckForValidListAndQueue+0x7c>)
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe fcee 	bl	800423c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005860:	f000 f994 	bl	8005b8c <vPortExitCritical>
}
 8005864:	bf00      	nop
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000d7c 	.word	0x20000d7c
 8005870:	20000d4c 	.word	0x20000d4c
 8005874:	20000d60 	.word	0x20000d60
 8005878:	20000d74 	.word	0x20000d74
 800587c:	20000d78 	.word	0x20000d78
 8005880:	20000e28 	.word	0x20000e28
 8005884:	20000d88 	.word	0x20000d88
 8005888:	080061f4 	.word	0x080061f4

0800588c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08a      	sub	sp, #40	@ 0x28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800589a:	f06f 0301 	mvn.w	r3, #1
 800589e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058ac:	4b06      	ldr	r3, [pc, #24]	@ (80058c8 <xTimerPendFunctionCallFromISR+0x3c>)
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	f107 0114 	add.w	r1, r7, #20
 80058b4:	2300      	movs	r3, #0
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	f7fe fa30 	bl	8003d1c <xQueueGenericSendFromISR>
 80058bc:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3728      	adds	r7, #40	@ 0x28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	20000d7c 	.word	0x20000d7c

080058cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3b04      	subs	r3, #4
 80058dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80058e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3b04      	subs	r3, #4
 80058ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f023 0201 	bic.w	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3b04      	subs	r3, #4
 80058fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005930 <pxPortInitialiseStack+0x64>)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3b14      	subs	r3, #20
 8005906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3b04      	subs	r3, #4
 8005912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f06f 0202 	mvn.w	r2, #2
 800591a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3b20      	subs	r3, #32
 8005920:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005922:	68fb      	ldr	r3, [r7, #12]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	08005935 	.word	0x08005935

08005934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800593e:	4b13      	ldr	r3, [pc, #76]	@ (800598c <prvTaskExitError+0x58>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d00b      	beq.n	8005960 <prvTaskExitError+0x2c>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	60fb      	str	r3, [r7, #12]
}
 800595a:	bf00      	nop
 800595c:	bf00      	nop
 800595e:	e7fd      	b.n	800595c <prvTaskExitError+0x28>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	60bb      	str	r3, [r7, #8]
}
 8005972:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005974:	bf00      	nop
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0fc      	beq.n	8005976 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800597c:	bf00      	nop
 800597e:	bf00      	nop
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	2000000c 	.word	0x2000000c

08005990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005990:	4b07      	ldr	r3, [pc, #28]	@ (80059b0 <pxCurrentTCBConst2>)
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	6808      	ldr	r0, [r1, #0]
 8005996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599a:	f380 8809 	msr	PSP, r0
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f380 8811 	msr	BASEPRI, r0
 80059aa:	4770      	bx	lr
 80059ac:	f3af 8000 	nop.w

080059b0 <pxCurrentTCBConst2>:
 80059b0:	2000084c 	.word	0x2000084c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop

080059b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059b8:	4808      	ldr	r0, [pc, #32]	@ (80059dc <prvPortStartFirstTask+0x24>)
 80059ba:	6800      	ldr	r0, [r0, #0]
 80059bc:	6800      	ldr	r0, [r0, #0]
 80059be:	f380 8808 	msr	MSP, r0
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f380 8814 	msr	CONTROL, r0
 80059ca:	b662      	cpsie	i
 80059cc:	b661      	cpsie	f
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	df00      	svc	0
 80059d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059da:	bf00      	nop
 80059dc:	e000ed08 	.word	0xe000ed08

080059e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059e6:	4b47      	ldr	r3, [pc, #284]	@ (8005b04 <xPortStartScheduler+0x124>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a47      	ldr	r2, [pc, #284]	@ (8005b08 <xPortStartScheduler+0x128>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10b      	bne.n	8005a08 <xPortStartScheduler+0x28>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	60fb      	str	r3, [r7, #12]
}
 8005a02:	bf00      	nop
 8005a04:	bf00      	nop
 8005a06:	e7fd      	b.n	8005a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a08:	4b3e      	ldr	r3, [pc, #248]	@ (8005b04 <xPortStartScheduler+0x124>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a3f      	ldr	r2, [pc, #252]	@ (8005b0c <xPortStartScheduler+0x12c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d10b      	bne.n	8005a2a <xPortStartScheduler+0x4a>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	613b      	str	r3, [r7, #16]
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop
 8005a28:	e7fd      	b.n	8005a26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a2a:	4b39      	ldr	r3, [pc, #228]	@ (8005b10 <xPortStartScheduler+0x130>)
 8005a2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	22ff      	movs	r2, #255	@ 0xff
 8005a3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	4b31      	ldr	r3, [pc, #196]	@ (8005b14 <xPortStartScheduler+0x134>)
 8005a50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a52:	4b31      	ldr	r3, [pc, #196]	@ (8005b18 <xPortStartScheduler+0x138>)
 8005a54:	2207      	movs	r2, #7
 8005a56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a58:	e009      	b.n	8005a6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b18 <xPortStartScheduler+0x138>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	4a2d      	ldr	r2, [pc, #180]	@ (8005b18 <xPortStartScheduler+0x138>)
 8005a62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a76:	2b80      	cmp	r3, #128	@ 0x80
 8005a78:	d0ef      	beq.n	8005a5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a7a:	4b27      	ldr	r3, [pc, #156]	@ (8005b18 <xPortStartScheduler+0x138>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f1c3 0307 	rsb	r3, r3, #7
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d00b      	beq.n	8005a9e <xPortStartScheduler+0xbe>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	60bb      	str	r3, [r7, #8]
}
 8005a98:	bf00      	nop
 8005a9a:	bf00      	nop
 8005a9c:	e7fd      	b.n	8005a9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005b18 <xPortStartScheduler+0x138>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b18 <xPortStartScheduler+0x138>)
 8005aa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b18 <xPortStartScheduler+0x138>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ab0:	4a19      	ldr	r2, [pc, #100]	@ (8005b18 <xPortStartScheduler+0x138>)
 8005ab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005abc:	4b17      	ldr	r3, [pc, #92]	@ (8005b1c <xPortStartScheduler+0x13c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a16      	ldr	r2, [pc, #88]	@ (8005b1c <xPortStartScheduler+0x13c>)
 8005ac2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ac8:	4b14      	ldr	r3, [pc, #80]	@ (8005b1c <xPortStartScheduler+0x13c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a13      	ldr	r2, [pc, #76]	@ (8005b1c <xPortStartScheduler+0x13c>)
 8005ace:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ad2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ad4:	f000 f8da 	bl	8005c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ad8:	4b11      	ldr	r3, [pc, #68]	@ (8005b20 <xPortStartScheduler+0x140>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ade:	f000 f8f9 	bl	8005cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ae2:	4b10      	ldr	r3, [pc, #64]	@ (8005b24 <xPortStartScheduler+0x144>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8005b24 <xPortStartScheduler+0x144>)
 8005ae8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005aec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005aee:	f7ff ff63 	bl	80059b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005af2:	f7fe ffbb 	bl	8004a6c <vTaskSwitchContext>
	prvTaskExitError();
 8005af6:	f7ff ff1d 	bl	8005934 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	e000ed00 	.word	0xe000ed00
 8005b08:	410fc271 	.word	0x410fc271
 8005b0c:	410fc270 	.word	0x410fc270
 8005b10:	e000e400 	.word	0xe000e400
 8005b14:	20000e78 	.word	0x20000e78
 8005b18:	20000e7c 	.word	0x20000e7c
 8005b1c:	e000ed20 	.word	0xe000ed20
 8005b20:	2000000c 	.word	0x2000000c
 8005b24:	e000ef34 	.word	0xe000ef34

08005b28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	607b      	str	r3, [r7, #4]
}
 8005b40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b42:	4b10      	ldr	r3, [pc, #64]	@ (8005b84 <vPortEnterCritical+0x5c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3301      	adds	r3, #1
 8005b48:	4a0e      	ldr	r2, [pc, #56]	@ (8005b84 <vPortEnterCritical+0x5c>)
 8005b4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b84 <vPortEnterCritical+0x5c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d110      	bne.n	8005b76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b54:	4b0c      	ldr	r3, [pc, #48]	@ (8005b88 <vPortEnterCritical+0x60>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <vPortEnterCritical+0x4e>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	603b      	str	r3, [r7, #0]
}
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	e7fd      	b.n	8005b72 <vPortEnterCritical+0x4a>
	}
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	2000000c 	.word	0x2000000c
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b92:	4b12      	ldr	r3, [pc, #72]	@ (8005bdc <vPortExitCritical+0x50>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10b      	bne.n	8005bb2 <vPortExitCritical+0x26>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	607b      	str	r3, [r7, #4]
}
 8005bac:	bf00      	nop
 8005bae:	bf00      	nop
 8005bb0:	e7fd      	b.n	8005bae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bdc <vPortExitCritical+0x50>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	4a08      	ldr	r2, [pc, #32]	@ (8005bdc <vPortExitCritical+0x50>)
 8005bba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bbc:	4b07      	ldr	r3, [pc, #28]	@ (8005bdc <vPortExitCritical+0x50>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d105      	bne.n	8005bd0 <vPortExitCritical+0x44>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	f383 8811 	msr	BASEPRI, r3
}
 8005bce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	2000000c 	.word	0x2000000c

08005be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005be0:	f3ef 8009 	mrs	r0, PSP
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	4b15      	ldr	r3, [pc, #84]	@ (8005c40 <pxCurrentTCBConst>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	f01e 0f10 	tst.w	lr, #16
 8005bf0:	bf08      	it	eq
 8005bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfa:	6010      	str	r0, [r2, #0]
 8005bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005c04:	f380 8811 	msr	BASEPRI, r0
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f7fe ff2c 	bl	8004a6c <vTaskSwitchContext>
 8005c14:	f04f 0000 	mov.w	r0, #0
 8005c18:	f380 8811 	msr	BASEPRI, r0
 8005c1c:	bc09      	pop	{r0, r3}
 8005c1e:	6819      	ldr	r1, [r3, #0]
 8005c20:	6808      	ldr	r0, [r1, #0]
 8005c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c26:	f01e 0f10 	tst.w	lr, #16
 8005c2a:	bf08      	it	eq
 8005c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c30:	f380 8809 	msr	PSP, r0
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	f3af 8000 	nop.w

08005c40 <pxCurrentTCBConst>:
 8005c40:	2000084c 	.word	0x2000084c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop

08005c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	607b      	str	r3, [r7, #4]
}
 8005c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c62:	f7fe fe49 	bl	80048f8 <xTaskIncrementTick>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c6c:	4b06      	ldr	r3, [pc, #24]	@ (8005c88 <xPortSysTickHandler+0x40>)
 8005c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	2300      	movs	r3, #0
 8005c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f383 8811 	msr	BASEPRI, r3
}
 8005c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c90:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc0 <vPortSetupTimerInterrupt+0x34>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c96:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc4 <vPortSetupTimerInterrupt+0x38>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc8 <vPortSetupTimerInterrupt+0x3c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8005ccc <vPortSetupTimerInterrupt+0x40>)
 8005ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	4a09      	ldr	r2, [pc, #36]	@ (8005cd0 <vPortSetupTimerInterrupt+0x44>)
 8005caa:	3b01      	subs	r3, #1
 8005cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cae:	4b04      	ldr	r3, [pc, #16]	@ (8005cc0 <vPortSetupTimerInterrupt+0x34>)
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	e000e010 	.word	0xe000e010
 8005cc4:	e000e018 	.word	0xe000e018
 8005cc8:	20000000 	.word	0x20000000
 8005ccc:	10624dd3 	.word	0x10624dd3
 8005cd0:	e000e014 	.word	0xe000e014

08005cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005ce4 <vPortEnableVFP+0x10>
 8005cd8:	6801      	ldr	r1, [r0, #0]
 8005cda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005cde:	6001      	str	r1, [r0, #0]
 8005ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ce2:	bf00      	nop
 8005ce4:	e000ed88 	.word	0xe000ed88

08005ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005cee:	f3ef 8305 	mrs	r3, IPSR
 8005cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b0f      	cmp	r3, #15
 8005cf8:	d915      	bls.n	8005d26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005cfa:	4a18      	ldr	r2, [pc, #96]	@ (8005d5c <vPortValidateInterruptPriority+0x74>)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d04:	4b16      	ldr	r3, [pc, #88]	@ (8005d60 <vPortValidateInterruptPriority+0x78>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	7afa      	ldrb	r2, [r7, #11]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d20b      	bcs.n	8005d26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	607b      	str	r3, [r7, #4]
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	e7fd      	b.n	8005d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d26:	4b0f      	ldr	r3, [pc, #60]	@ (8005d64 <vPortValidateInterruptPriority+0x7c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d68 <vPortValidateInterruptPriority+0x80>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d90b      	bls.n	8005d4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	603b      	str	r3, [r7, #0]
}
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
 8005d4c:	e7fd      	b.n	8005d4a <vPortValidateInterruptPriority+0x62>
	}
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	e000e3f0 	.word	0xe000e3f0
 8005d60:	20000e78 	.word	0x20000e78
 8005d64:	e000ed0c 	.word	0xe000ed0c
 8005d68:	20000e7c 	.word	0x20000e7c

08005d6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	@ 0x28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d78:	f7fe fd02 	bl	8004780 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d7c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ef0 <pvPortMalloc+0x184>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d84:	f000 f924 	bl	8005fd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d88:	4b5a      	ldr	r3, [pc, #360]	@ (8005ef4 <pvPortMalloc+0x188>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f040 8095 	bne.w	8005ec0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01e      	beq.n	8005dda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4413      	add	r3, r2
 8005da2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d015      	beq.n	8005dda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f023 0307 	bic.w	r3, r3, #7
 8005db4:	3308      	adds	r3, #8
 8005db6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <pvPortMalloc+0x6e>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	617b      	str	r3, [r7, #20]
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	e7fd      	b.n	8005dd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d06f      	beq.n	8005ec0 <pvPortMalloc+0x154>
 8005de0:	4b45      	ldr	r3, [pc, #276]	@ (8005ef8 <pvPortMalloc+0x18c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d86a      	bhi.n	8005ec0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005dea:	4b44      	ldr	r3, [pc, #272]	@ (8005efc <pvPortMalloc+0x190>)
 8005dec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005dee:	4b43      	ldr	r3, [pc, #268]	@ (8005efc <pvPortMalloc+0x190>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005df4:	e004      	b.n	8005e00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d903      	bls.n	8005e12 <pvPortMalloc+0xa6>
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f1      	bne.n	8005df6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e12:	4b37      	ldr	r3, [pc, #220]	@ (8005ef0 <pvPortMalloc+0x184>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d051      	beq.n	8005ec0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2208      	movs	r2, #8
 8005e22:	4413      	add	r3, r2
 8005e24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	1ad2      	subs	r2, r2, r3
 8005e36:	2308      	movs	r3, #8
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d920      	bls.n	8005e80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4413      	add	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00b      	beq.n	8005e68 <pvPortMalloc+0xfc>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	613b      	str	r3, [r7, #16]
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	e7fd      	b.n	8005e64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	1ad2      	subs	r2, r2, r3
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e7a:	69b8      	ldr	r0, [r7, #24]
 8005e7c:	f000 f90a 	bl	8006094 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e80:	4b1d      	ldr	r3, [pc, #116]	@ (8005ef8 <pvPortMalloc+0x18c>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef8 <pvPortMalloc+0x18c>)
 8005e8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ef8 <pvPortMalloc+0x18c>)
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b1b      	ldr	r3, [pc, #108]	@ (8005f00 <pvPortMalloc+0x194>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d203      	bcs.n	8005ea2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e9a:	4b17      	ldr	r3, [pc, #92]	@ (8005ef8 <pvPortMalloc+0x18c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a18      	ldr	r2, [pc, #96]	@ (8005f00 <pvPortMalloc+0x194>)
 8005ea0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	4b13      	ldr	r3, [pc, #76]	@ (8005ef4 <pvPortMalloc+0x188>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005eb6:	4b13      	ldr	r3, [pc, #76]	@ (8005f04 <pvPortMalloc+0x198>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	4a11      	ldr	r2, [pc, #68]	@ (8005f04 <pvPortMalloc+0x198>)
 8005ebe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ec0:	f7fe fc6c 	bl	800479c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <pvPortMalloc+0x17a>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	60fb      	str	r3, [r7, #12]
}
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	e7fd      	b.n	8005ee2 <pvPortMalloc+0x176>
	return pvReturn;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3728      	adds	r7, #40	@ 0x28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20004a88 	.word	0x20004a88
 8005ef4:	20004a9c 	.word	0x20004a9c
 8005ef8:	20004a8c 	.word	0x20004a8c
 8005efc:	20004a80 	.word	0x20004a80
 8005f00:	20004a90 	.word	0x20004a90
 8005f04:	20004a94 	.word	0x20004a94

08005f08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d04f      	beq.n	8005fba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	425b      	negs	r3, r3
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4413      	add	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	4b25      	ldr	r3, [pc, #148]	@ (8005fc4 <vPortFree+0xbc>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4013      	ands	r3, r2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <vPortFree+0x46>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	60fb      	str	r3, [r7, #12]
}
 8005f48:	bf00      	nop
 8005f4a:	bf00      	nop
 8005f4c:	e7fd      	b.n	8005f4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <vPortFree+0x66>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	60bb      	str	r3, [r7, #8]
}
 8005f68:	bf00      	nop
 8005f6a:	bf00      	nop
 8005f6c:	e7fd      	b.n	8005f6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	4b14      	ldr	r3, [pc, #80]	@ (8005fc4 <vPortFree+0xbc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01e      	beq.n	8005fba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d11a      	bne.n	8005fba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc4 <vPortFree+0xbc>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	401a      	ands	r2, r3
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f94:	f7fe fbf4 	bl	8004780 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc8 <vPortFree+0xc0>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	4a09      	ldr	r2, [pc, #36]	@ (8005fc8 <vPortFree+0xc0>)
 8005fa4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fa6:	6938      	ldr	r0, [r7, #16]
 8005fa8:	f000 f874 	bl	8006094 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005fac:	4b07      	ldr	r3, [pc, #28]	@ (8005fcc <vPortFree+0xc4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	4a06      	ldr	r2, [pc, #24]	@ (8005fcc <vPortFree+0xc4>)
 8005fb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005fb6:	f7fe fbf1 	bl	800479c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fba:	bf00      	nop
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20004a9c 	.word	0x20004a9c
 8005fc8:	20004a8c 	.word	0x20004a8c
 8005fcc:	20004a98 	.word	0x20004a98

08005fd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005fda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fdc:	4b27      	ldr	r3, [pc, #156]	@ (800607c <prvHeapInit+0xac>)
 8005fde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f003 0307 	and.w	r3, r3, #7
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00c      	beq.n	8006004 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3307      	adds	r3, #7
 8005fee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0307 	bic.w	r3, r3, #7
 8005ff6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800607c <prvHeapInit+0xac>)
 8006000:	4413      	add	r3, r2
 8006002:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006008:	4a1d      	ldr	r2, [pc, #116]	@ (8006080 <prvHeapInit+0xb0>)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800600e:	4b1c      	ldr	r3, [pc, #112]	@ (8006080 <prvHeapInit+0xb0>)
 8006010:	2200      	movs	r2, #0
 8006012:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	4413      	add	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800601c:	2208      	movs	r2, #8
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1a9b      	subs	r3, r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0307 	bic.w	r3, r3, #7
 800602a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4a15      	ldr	r2, [pc, #84]	@ (8006084 <prvHeapInit+0xb4>)
 8006030:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006032:	4b14      	ldr	r3, [pc, #80]	@ (8006084 <prvHeapInit+0xb4>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2200      	movs	r2, #0
 8006038:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800603a:	4b12      	ldr	r3, [pc, #72]	@ (8006084 <prvHeapInit+0xb4>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	1ad2      	subs	r2, r2, r3
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006050:	4b0c      	ldr	r3, [pc, #48]	@ (8006084 <prvHeapInit+0xb4>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	4a0a      	ldr	r2, [pc, #40]	@ (8006088 <prvHeapInit+0xb8>)
 800605e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	4a09      	ldr	r2, [pc, #36]	@ (800608c <prvHeapInit+0xbc>)
 8006066:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006068:	4b09      	ldr	r3, [pc, #36]	@ (8006090 <prvHeapInit+0xc0>)
 800606a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800606e:	601a      	str	r2, [r3, #0]
}
 8006070:	bf00      	nop
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	20000e80 	.word	0x20000e80
 8006080:	20004a80 	.word	0x20004a80
 8006084:	20004a88 	.word	0x20004a88
 8006088:	20004a90 	.word	0x20004a90
 800608c:	20004a8c 	.word	0x20004a8c
 8006090:	20004a9c 	.word	0x20004a9c

08006094 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800609c:	4b28      	ldr	r3, [pc, #160]	@ (8006140 <prvInsertBlockIntoFreeList+0xac>)
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	e002      	b.n	80060a8 <prvInsertBlockIntoFreeList+0x14>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d8f7      	bhi.n	80060a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	4413      	add	r3, r2
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d108      	bne.n	80060d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	441a      	add	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	441a      	add	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d118      	bne.n	800611c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	4b15      	ldr	r3, [pc, #84]	@ (8006144 <prvInsertBlockIntoFreeList+0xb0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d00d      	beq.n	8006112 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	441a      	add	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	e008      	b.n	8006124 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006112:	4b0c      	ldr	r3, [pc, #48]	@ (8006144 <prvInsertBlockIntoFreeList+0xb0>)
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	e003      	b.n	8006124 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	429a      	cmp	r2, r3
 800612a:	d002      	beq.n	8006132 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006132:	bf00      	nop
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	20004a80 	.word	0x20004a80
 8006144:	20004a88 	.word	0x20004a88

08006148 <memset>:
 8006148:	4402      	add	r2, r0
 800614a:	4603      	mov	r3, r0
 800614c:	4293      	cmp	r3, r2
 800614e:	d100      	bne.n	8006152 <memset+0xa>
 8006150:	4770      	bx	lr
 8006152:	f803 1b01 	strb.w	r1, [r3], #1
 8006156:	e7f9      	b.n	800614c <memset+0x4>

08006158 <__libc_init_array>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	4d0d      	ldr	r5, [pc, #52]	@ (8006190 <__libc_init_array+0x38>)
 800615c:	4c0d      	ldr	r4, [pc, #52]	@ (8006194 <__libc_init_array+0x3c>)
 800615e:	1b64      	subs	r4, r4, r5
 8006160:	10a4      	asrs	r4, r4, #2
 8006162:	2600      	movs	r6, #0
 8006164:	42a6      	cmp	r6, r4
 8006166:	d109      	bne.n	800617c <__libc_init_array+0x24>
 8006168:	4d0b      	ldr	r5, [pc, #44]	@ (8006198 <__libc_init_array+0x40>)
 800616a:	4c0c      	ldr	r4, [pc, #48]	@ (800619c <__libc_init_array+0x44>)
 800616c:	f000 f826 	bl	80061bc <_init>
 8006170:	1b64      	subs	r4, r4, r5
 8006172:	10a4      	asrs	r4, r4, #2
 8006174:	2600      	movs	r6, #0
 8006176:	42a6      	cmp	r6, r4
 8006178:	d105      	bne.n	8006186 <__libc_init_array+0x2e>
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006180:	4798      	blx	r3
 8006182:	3601      	adds	r6, #1
 8006184:	e7ee      	b.n	8006164 <__libc_init_array+0xc>
 8006186:	f855 3b04 	ldr.w	r3, [r5], #4
 800618a:	4798      	blx	r3
 800618c:	3601      	adds	r6, #1
 800618e:	e7f2      	b.n	8006176 <__libc_init_array+0x1e>
 8006190:	08006240 	.word	0x08006240
 8006194:	08006240 	.word	0x08006240
 8006198:	08006240 	.word	0x08006240
 800619c:	08006244 	.word	0x08006244

080061a0 <memcpy>:
 80061a0:	440a      	add	r2, r1
 80061a2:	4291      	cmp	r1, r2
 80061a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80061a8:	d100      	bne.n	80061ac <memcpy+0xc>
 80061aa:	4770      	bx	lr
 80061ac:	b510      	push	{r4, lr}
 80061ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061b6:	4291      	cmp	r1, r2
 80061b8:	d1f9      	bne.n	80061ae <memcpy+0xe>
 80061ba:	bd10      	pop	{r4, pc}

080061bc <_init>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	bf00      	nop
 80061c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c2:	bc08      	pop	{r3}
 80061c4:	469e      	mov	lr, r3
 80061c6:	4770      	bx	lr

080061c8 <_fini>:
 80061c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ca:	bf00      	nop
 80061cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ce:	bc08      	pop	{r3}
 80061d0:	469e      	mov	lr, r3
 80061d2:	4770      	bx	lr
