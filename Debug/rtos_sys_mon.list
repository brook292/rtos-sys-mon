
rtos_sys_mon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008924  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08008ac4  08008ac4  00009ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f18  08008f18  0000a094  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f18  08008f18  00009f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f20  08008f20  0000a094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f20  08008f20  00009f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f24  08008f24  00009f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08008f28  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c84  20000094  08008fbc  0000a094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d18  08008fbc  0000ad18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d857  00000000  00000000  0000a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b03  00000000  00000000  0002791b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  0002c420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ee  00000000  00000000  0002de18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b82f  00000000  00000000  0002f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee0a  00000000  00000000  0004aa35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0a3d  00000000  00000000  0006983f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a27c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076b4  00000000  00000000  0010a2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00111974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008aac 	.word	0x08008aac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	08008aac 	.word	0x08008aac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	@ (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <cmd_help>:

#define NUM_COMMANDS (sizeof(commands) / sizeof(commands[0]))
#define MAX_TOKEN 8


void cmd_help(int argc, char *argv[]) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
    const char *msg =
 8000612:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <cmd_help+0x2c>)
 8000614:	60fb      	str	r3, [r7, #12]
        "  help         - show this message\r\n"
        "  status       - show system status\r\n"
        "  diag         - run diagnostics\r\n"
        "  sleep [s]    - enter STOP mode and wake after s seconds\r\n"
        "  reset        - reset MCU\r\n";
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000616:	68f8      	ldr	r0, [r7, #12]
 8000618:	f7ff fdec 	bl	80001f4 <strlen>
 800061c:	4603      	mov	r3, r0
 800061e:	b29a      	uxth	r2, r3
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	68f9      	ldr	r1, [r7, #12]
 8000626:	4804      	ldr	r0, [pc, #16]	@ (8000638 <cmd_help+0x30>)
 8000628:	f002 fe44 	bl	80032b4 <HAL_UART_Transmit>
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	08008aec 	.word	0x08008aec
 8000638:	20000230 	.word	0x20000230

0800063c <cmd_status>:

void cmd_status(int argc, char *argv[]) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
    char buf[64];
    uint32_t uptime_ms = xTaskGetTickCount();
 8000646:	f005 fb25 	bl	8005c94 <xTaskGetTickCount>
 800064a:	64f8      	str	r0, [r7, #76]	@ 0x4c

    snprintf(buf, sizeof(buf), "[SYS] Uptime: %lus\r\n", uptime_ms / 1000);
 800064c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800064e:	4a0e      	ldr	r2, [pc, #56]	@ (8000688 <cmd_status+0x4c>)
 8000650:	fba2 2303 	umull	r2, r3, r2, r3
 8000654:	099b      	lsrs	r3, r3, #6
 8000656:	f107 000c 	add.w	r0, r7, #12
 800065a:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <cmd_status+0x50>)
 800065c:	2140      	movs	r1, #64	@ 0x40
 800065e:	f007 f901 	bl	8007864 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fdc4 	bl	80001f4 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	f107 010c 	add.w	r1, r7, #12
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	4805      	ldr	r0, [pc, #20]	@ (8000690 <cmd_status+0x54>)
 800067a:	f002 fe1b 	bl	80032b4 <HAL_UART_Transmit>
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	@ 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	10624dd3 	.word	0x10624dd3
 800068c:	08008bc4 	.word	0x08008bc4
 8000690:	20000230 	.word	0x20000230

08000694 <cmd_diag>:

void cmd_diag(int argc, char *argv[]) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b092      	sub	sp, #72	@ 0x48
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
    char buf[64];

    snprintf(buf, sizeof(buf), "[DIAG] Heap free: %u bytes\r\n", xPortGetFreeHeapSize());
 800069e:	f006 fecf 	bl	8007440 <xPortGetFreeHeapSize>
 80006a2:	4603      	mov	r3, r0
 80006a4:	f107 0008 	add.w	r0, r7, #8
 80006a8:	4a0a      	ldr	r2, [pc, #40]	@ (80006d4 <cmd_diag+0x40>)
 80006aa:	2140      	movs	r1, #64	@ 0x40
 80006ac:	f007 f8da 	bl	8007864 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fd9d 	bl	80001f4 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	f107 0108 	add.w	r1, r7, #8
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <cmd_diag+0x44>)
 80006c8:	f002 fdf4 	bl	80032b4 <HAL_UART_Transmit>
}
 80006cc:	bf00      	nop
 80006ce:	3748      	adds	r7, #72	@ 0x48
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08008bdc 	.word	0x08008bdc
 80006d8:	20000230 	.word	0x20000230

080006dc <cmd_sleep>:

void cmd_sleep(int argc, char *argv[]) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b096      	sub	sp, #88	@ 0x58
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
    uint32_t seconds = 5; // default 5s
 80006e6:	2305      	movs	r3, #5
 80006e8:	657b      	str	r3, [r7, #84]	@ 0x54

    if (argc >= 2)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	dd0c      	ble.n	800070a <cmd_sleep+0x2e>
      {
        seconds = (uint32_t)atoi(argv[1]);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	3304      	adds	r3, #4
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f006 ff6a 	bl	80075d0 <atoi>
 80006fc:	4603      	mov	r3, r0
 80006fe:	657b      	str	r3, [r7, #84]	@ 0x54
        if (seconds == 0) seconds = 5;  // fallback
 8000700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000702:	2b00      	cmp	r3, #0
 8000704:	d101      	bne.n	800070a <cmd_sleep+0x2e>
 8000706:	2305      	movs	r3, #5
 8000708:	657b      	str	r3, [r7, #84]	@ 0x54
      }

    char msg[64];
    snprintf(msg, sizeof(msg), "[SYS] Sleeping %lus via RTC...\r\n", seconds);
 800070a:	f107 000c 	add.w	r0, r7, #12
 800070e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000710:	4a26      	ldr	r2, [pc, #152]	@ (80007ac <cmd_sleep+0xd0>)
 8000712:	2140      	movs	r1, #64	@ 0x40
 8000714:	f007 f8a6 	bl	8007864 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fd69 	bl	80001f4 <strlen>
 8000722:	4603      	mov	r3, r0
 8000724:	b29a      	uxth	r2, r3
 8000726:	f107 010c 	add.w	r1, r7, #12
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	4820      	ldr	r0, [pc, #128]	@ (80007b0 <cmd_sleep+0xd4>)
 8000730:	f002 fdc0 	bl	80032b4 <HAL_UART_Transmit>
    osDelay(10);
 8000734:	200a      	movs	r0, #10
 8000736:	f003 fee3 	bl	8004500 <osDelay>


    // Disable wakeup to reconfigure
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800073a:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <cmd_sleep+0xd8>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a1d      	ldr	r2, [pc, #116]	@ (80007b4 <cmd_sleep+0xd8>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6013      	str	r3, [r2, #0]

    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000746:	481c      	ldr	r0, [pc, #112]	@ (80007b8 <cmd_sleep+0xdc>)
 8000748:	f002 fa6a 	bl	8002c20 <HAL_RTCEx_DeactivateWakeUpTimer>
    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK) {
 800074c:	2204      	movs	r2, #4
 800074e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000750:	4819      	ldr	r0, [pc, #100]	@ (80007b8 <cmd_sleep+0xdc>)
 8000752:	f002 f9a3 	bl	8002a9c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00d      	beq.n	8000778 <cmd_sleep+0x9c>
        const char *err = "[SYS] Failed to set wakeup timer\r\n";
 800075c:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <cmd_sleep+0xe0>)
 800075e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        HAL_UART_Transmit(&huart2, (uint8_t *)err, strlen(err), HAL_MAX_DELAY);
 8000760:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000762:	f7ff fd47 	bl	80001f4 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	b29a      	uxth	r2, r3
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000770:	480f      	ldr	r0, [pc, #60]	@ (80007b0 <cmd_sleep+0xd4>)
 8000772:	f002 fd9f 	bl	80032b4 <HAL_UART_Transmit>
 8000776:	e016      	b.n	80007a6 <cmd_sleep+0xca>
        return;
    }

    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000778:	2101      	movs	r1, #1
 800077a:	2001      	movs	r0, #1
 800077c:	f001 f964 	bl	8001a48 <HAL_PWR_EnterSTOPMode>

    // MCU resumed here
    SystemClock_Config();
 8000780:	f000 fa26 	bl	8000bd0 <SystemClock_Config>
    MX_USART2_UART_Init();
 8000784:	f000 fd68 	bl	8001258 <MX_USART2_UART_Init>
    CLI_UART_Resume();
 8000788:	f000 f90e 	bl	80009a8 <CLI_UART_Resume>

    const char *done = "[SYS] Woke up from RTC wakeup\r\n";
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <cmd_sleep+0xe4>)
 800078e:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_UART_Transmit(&huart2, (uint8_t *)done, strlen(done), HAL_MAX_DELAY);
 8000790:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000792:	f7ff fd2f 	bl	80001f4 <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	b29a      	uxth	r2, r3
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80007a0:	4803      	ldr	r0, [pc, #12]	@ (80007b0 <cmd_sleep+0xd4>)
 80007a2:	f002 fd87 	bl	80032b4 <HAL_UART_Transmit>
}
 80007a6:	3758      	adds	r7, #88	@ 0x58
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	08008bfc 	.word	0x08008bfc
 80007b0:	20000230 	.word	0x20000230
 80007b4:	40007000 	.word	0x40007000
 80007b8:	200001c4 	.word	0x200001c4
 80007bc:	08008c20 	.word	0x08008c20
 80007c0:	08008c44 	.word	0x08008c44

080007c4 <cmd_reset>:

void cmd_reset(int argc, char *argv[]) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
    const char *msg = "[SYS] Resetting system...\r\n";
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <cmd_reset+0x30>)
 80007d0:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f7ff fd0e 	bl	80001f4 <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	b29a      	uxth	r2, r3
 80007dc:	f04f 33ff 	mov.w	r3, #4294967295
 80007e0:	68f9      	ldr	r1, [r7, #12]
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <cmd_reset+0x34>)
 80007e4:	f002 fd66 	bl	80032b4 <HAL_UART_Transmit>
    osDelay(10);
 80007e8:	200a      	movs	r0, #10
 80007ea:	f003 fe89 	bl	8004500 <osDelay>
    NVIC_SystemReset();
 80007ee:	f7ff fef5 	bl	80005dc <__NVIC_SystemReset>
 80007f2:	bf00      	nop
 80007f4:	08008c64 	.word	0x08008c64
 80007f8:	20000230 	.word	0x20000230

080007fc <CLI_ProcessCommand>:
}



void CLI_ProcessCommand(char *input_line){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	@ 0x38
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	char *argv[MAX_TOKEN];
	uint8_t argc=0;
 8000804:	2300      	movs	r3, #0
 8000806:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	char *token = strtok(input_line, " ");
 800080a:	492a      	ldr	r1, [pc, #168]	@ (80008b4 <CLI_ProcessCommand+0xb8>)
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f007 f8ab 	bl	8007968 <strtok>
 8000812:	6338      	str	r0, [r7, #48]	@ 0x30
	while(token && argc< MAX_TOKEN)
 8000814:	e00f      	b.n	8000836 <CLI_ProcessCommand+0x3a>
		{
		 argv[argc++]=token;
 8000816:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	3338      	adds	r3, #56	@ 0x38
 8000824:	443b      	add	r3, r7
 8000826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000828:	f843 2c30 	str.w	r2, [r3, #-48]
		 token = strtok(NULL, " ");
 800082c:	4921      	ldr	r1, [pc, #132]	@ (80008b4 <CLI_ProcessCommand+0xb8>)
 800082e:	2000      	movs	r0, #0
 8000830:	f007 f89a 	bl	8007968 <strtok>
 8000834:	6338      	str	r0, [r7, #48]	@ 0x30
	while(token && argc< MAX_TOKEN)
 8000836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000838:	2b00      	cmp	r3, #0
 800083a:	d003      	beq.n	8000844 <CLI_ProcessCommand+0x48>
 800083c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000840:	2b07      	cmp	r3, #7
 8000842:	d9e8      	bls.n	8000816 <CLI_ProcessCommand+0x1a>
		}

	if(argc == 0) return;
 8000844:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000848:	2b00      	cmp	r3, #0
 800084a:	d02e      	beq.n	80008aa <CLI_ProcessCommand+0xae>

	for(int i = 0;i < NUM_COMMANDS; i++)
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000850:	e01a      	b.n	8000888 <CLI_ProcessCommand+0x8c>
	  {
		if(strcmp(argv[0],commands[i].name) == 0)
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	4918      	ldr	r1, [pc, #96]	@ (80008b8 <CLI_ProcessCommand+0xbc>)
 8000856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000858:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800085c:	4619      	mov	r1, r3
 800085e:	4610      	mov	r0, r2
 8000860:	f7ff fcbe 	bl	80001e0 <strcmp>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10b      	bne.n	8000882 <CLI_ProcessCommand+0x86>
		 {
			commands[i].handler(argc,argv);
 800086a:	4a13      	ldr	r2, [pc, #76]	@ (80008b8 <CLI_ProcessCommand+0xbc>)
 800086c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	4413      	add	r3, r2
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000878:	f107 0108 	add.w	r1, r7, #8
 800087c:	4610      	mov	r0, r2
 800087e:	4798      	blx	r3
			return;
 8000880:	e014      	b.n	80008ac <CLI_ProcessCommand+0xb0>
	for(int i = 0;i < NUM_COMMANDS; i++)
 8000882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000884:	3301      	adds	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800088a:	2b04      	cmp	r3, #4
 800088c:	d9e1      	bls.n	8000852 <CLI_ProcessCommand+0x56>
		 }
	  }
    const char *err = "Unknown command\r\n";
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <CLI_ProcessCommand+0xc0>)
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_UART_Transmit(&huart2, (uint8_t *)err, strlen(err), HAL_MAX_DELAY);
 8000892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000894:	f7ff fcae 	bl	80001f4 <strlen>
 8000898:	4603      	mov	r3, r0
 800089a:	b29a      	uxth	r2, r3
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
 80008a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80008a2:	4807      	ldr	r0, [pc, #28]	@ (80008c0 <CLI_ProcessCommand+0xc4>)
 80008a4:	f002 fd06 	bl	80032b4 <HAL_UART_Transmit>
 80008a8:	e000      	b.n	80008ac <CLI_ProcessCommand+0xb0>
	if(argc == 0) return;
 80008aa:	bf00      	nop
}
 80008ac:	3738      	adds	r7, #56	@ 0x38
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	08008c80 	.word	0x08008c80
 80008b8:	20000000 	.word	0x20000000
 80008bc:	08008c84 	.word	0x08008c84
 80008c0:	20000230 	.word	0x20000230

080008c4 <CLI_Init>:


void CLI_Init(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
    RingBuffer_Init(&cli_buffer);
 80008c8:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <CLI_Init+0x14>)
 80008ca:	f000 fa04 	bl	8000cd6 <RingBuffer_Init>
    line_len = 0;
 80008ce:	4b03      	ldr	r3, [pc, #12]	@ (80008dc <CLI_Init+0x18>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	801a      	strh	r2, [r3, #0]
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000b0 	.word	0x200000b0
 80008dc:	200001b4 	.word	0x200001b4

080008e0 <CLI_PutChar>:

bool CLI_PutChar(uint8_t byte) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
    return RingBuffer_Put(&cli_buffer, byte);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4619      	mov	r1, r3
 80008ee:	4804      	ldr	r0, [pc, #16]	@ (8000900 <CLI_PutChar+0x20>)
 80008f0:	f000 fa03 	bl	8000cfa <RingBuffer_Put>
 80008f4:	4603      	mov	r3, r0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000b0 	.word	0x200000b0

08000904 <CLI_GetLine>:

bool CLI_GetLine(uint8_t* dst, uint16_t max_len) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	807b      	strh	r3, [r7, #2]
    uint8_t byte;
    while (RingBuffer_Get(&cli_buffer, &byte))
 8000910:	e035      	b.n	800097e <CLI_GetLine+0x7a>
         {
		  if (line_len < CLI_LINE_BUF_SIZE - 1)
 8000912:	4b22      	ldr	r3, [pc, #136]	@ (800099c <CLI_GetLine+0x98>)
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	2b7e      	cmp	r3, #126	@ 0x7e
 8000918:	d82e      	bhi.n	8000978 <CLI_GetLine+0x74>
			{
			  if(byte == '\r' || byte == '\n')
 800091a:	7b7b      	ldrb	r3, [r7, #13]
 800091c:	2b0d      	cmp	r3, #13
 800091e:	d002      	beq.n	8000926 <CLI_GetLine+0x22>
 8000920:	7b7b      	ldrb	r3, [r7, #13]
 8000922:	2b0a      	cmp	r3, #10
 8000924:	d11d      	bne.n	8000962 <CLI_GetLine+0x5e>
				{
				  line_buf[line_len] = '\0';
 8000926:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <CLI_GetLine+0x98>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <CLI_GetLine+0x9c>)
 800092e:	2100      	movs	r1, #0
 8000930:	5499      	strb	r1, [r3, r2]
				  uint16_t len = (line_len < max_len) ? line_len : max_len - 1;
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <CLI_GetLine+0x98>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	887a      	ldrh	r2, [r7, #2]
 8000938:	429a      	cmp	r2, r3
 800093a:	d803      	bhi.n	8000944 <CLI_GetLine+0x40>
 800093c:	887b      	ldrh	r3, [r7, #2]
 800093e:	3b01      	subs	r3, #1
 8000940:	b29b      	uxth	r3, r3
 8000942:	e001      	b.n	8000948 <CLI_GetLine+0x44>
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <CLI_GetLine+0x98>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	81fb      	strh	r3, [r7, #14]
				  memcpy(dst, line_buf, len + 1);
 800094a:	89fb      	ldrh	r3, [r7, #14]
 800094c:	3301      	adds	r3, #1
 800094e:	461a      	mov	r2, r3
 8000950:	4913      	ldr	r1, [pc, #76]	@ (80009a0 <CLI_GetLine+0x9c>)
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f007 f8d7 	bl	8007b06 <memcpy>
				  line_len = 0;
 8000958:	4b10      	ldr	r3, [pc, #64]	@ (800099c <CLI_GetLine+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	801a      	strh	r2, [r3, #0]
				  return true;
 800095e:	2301      	movs	r3, #1
 8000960:	e017      	b.n	8000992 <CLI_GetLine+0x8e>
				}
			  else
				{
				  line_buf[line_len++] = byte;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <CLI_GetLine+0x98>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	b291      	uxth	r1, r2
 800096a:	4a0c      	ldr	r2, [pc, #48]	@ (800099c <CLI_GetLine+0x98>)
 800096c:	8011      	strh	r1, [r2, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	7b79      	ldrb	r1, [r7, #13]
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <CLI_GetLine+0x9c>)
 8000974:	5499      	strb	r1, [r3, r2]
 8000976:	e002      	b.n	800097e <CLI_GetLine+0x7a>
				}
			}
		   else
			{
			  line_len = 0;  // overflow
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <CLI_GetLine+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	801a      	strh	r2, [r3, #0]
    while (RingBuffer_Get(&cli_buffer, &byte))
 800097e:	f107 030d 	add.w	r3, r7, #13
 8000982:	4619      	mov	r1, r3
 8000984:	4807      	ldr	r0, [pc, #28]	@ (80009a4 <CLI_GetLine+0xa0>)
 8000986:	f000 f9e3 	bl	8000d50 <RingBuffer_Get>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d1c0      	bne.n	8000912 <CLI_GetLine+0xe>
			}
          }
    return false;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200001b4 	.word	0x200001b4
 80009a0:	20000134 	.word	0x20000134
 80009a4:	200000b0 	.word	0x200000b0

080009a8 <CLI_UART_Resume>:
#include "cli_uart.h"


void CLI_UART_Resume(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data, sizeof(rx_data));
 80009ac:	2201      	movs	r2, #1
 80009ae:	4903      	ldr	r1, [pc, #12]	@ (80009bc <CLI_UART_Resume+0x14>)
 80009b0:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <CLI_UART_Resume+0x18>)
 80009b2:	f002 fd0a 	bl	80033ca <HAL_UART_Receive_IT>
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200001b6 	.word	0x200001b6
 80009c0:	20000230 	.word	0x20000230

080009c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  CLI_Init();
 80009c8:	f7ff ff7c 	bl	80008c4 <CLI_Init>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, sizeof(rx_data));
 80009cc:	2201      	movs	r2, #1
 80009ce:	490e      	ldr	r1, [pc, #56]	@ (8000a08 <MX_FREERTOS_Init+0x44>)
 80009d0:	480e      	ldr	r0, [pc, #56]	@ (8000a0c <MX_FREERTOS_Init+0x48>)
 80009d2:	f002 fcfa 	bl	80033ca <HAL_UART_Receive_IT>
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HeartBeatTaskHandle = osThreadNew(CliTask, NULL, &HeartBeatTask_attributes);
 80009d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a10 <MX_FREERTOS_Init+0x4c>)
 80009d8:	2100      	movs	r1, #0
 80009da:	480e      	ldr	r0, [pc, #56]	@ (8000a14 <MX_FREERTOS_Init+0x50>)
 80009dc:	f003 fcfe 	bl	80043dc <osThreadNew>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <MX_FREERTOS_Init+0x54>)
 80009e4:	6013      	str	r3, [r2, #0]
  CliTaskHandle = osThreadNew(CliTask, NULL, &CliTask_attributes);
 80009e6:	4a0d      	ldr	r2, [pc, #52]	@ (8000a1c <MX_FREERTOS_Init+0x58>)
 80009e8:	2100      	movs	r1, #0
 80009ea:	480a      	ldr	r0, [pc, #40]	@ (8000a14 <MX_FREERTOS_Init+0x50>)
 80009ec:	f003 fcf6 	bl	80043dc <osThreadNew>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <MX_FREERTOS_Init+0x5c>)
 80009f4:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
   cliFlags = osEventFlagsNew(NULL);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f003 fd9d 	bl	8004536 <osEventFlagsNew>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <MX_FREERTOS_Init+0x60>)
 8000a00:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_EVENTS */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001b6 	.word	0x200001b6
 8000a0c:	20000230 	.word	0x20000230
 8000a10:	08008cd4 	.word	0x08008cd4
 8000a14:	08000a29 	.word	0x08000a29
 8000a18:	200001bc 	.word	0x200001bc
 8000a1c:	08008cf8 	.word	0x08008cf8
 8000a20:	200001c0 	.word	0x200001c0
 8000a24:	200001b8 	.word	0x200001b8

08000a28 <CliTask>:
  }
  /* USER CODE END StartDefaultTask */
}

void CliTask(void *argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0a2      	sub	sp, #136	@ 0x88
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
   uint8_t cmd_buf[CLI_LINE_BUF_SIZE];
  for(;;)
  {
    osEventFlagsWait(cliFlags, CLI_FLAG_LINE_READY, osFlagsWaitAny,osWaitForever);
 8000a30:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <CliTask+0x38>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	f003 fdfc 	bl	8004638 <osEventFlagsWait>
    while (CLI_GetLine(cmd_buf, sizeof(cmd_buf)))
 8000a40:	e004      	b.n	8000a4c <CliTask+0x24>
    	 {
    	   CLI_ProcessCommand((char*)cmd_buf);
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fed8 	bl	80007fc <CLI_ProcessCommand>
    while (CLI_GetLine(cmd_buf, sizeof(cmd_buf)))
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	2180      	movs	r1, #128	@ 0x80
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff56 	bl	8000904 <CLI_GetLine>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f1      	bne.n	8000a42 <CliTask+0x1a>
    osEventFlagsWait(cliFlags, CLI_FLAG_LINE_READY, osFlagsWaitAny,osWaitForever);
 8000a5e:	e7e7      	b.n	8000a30 <CliTask+0x8>
 8000a60:	200001b8 	.word	0x200001b8

08000a64 <HAL_UART_RxCpltCallback>:
  }
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <HAL_UART_RxCpltCallback+0x58>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d11e      	bne.n	8000ab4 <HAL_UART_RxCpltCallback+0x50>
	{
	  CLI_PutChar(rx_data);
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x5c>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff2f 	bl	80008e0 <CLI_PutChar>
	  if( (rx_data == '\n' || rx_data == '\r' ) && cliFlags != NULL)
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x5c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b0a      	cmp	r3, #10
 8000a8a:	d004      	beq.n	8000a96 <HAL_UART_RxCpltCallback+0x32>
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x5c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b0d      	cmp	r3, #13
 8000a94:	d109      	bne.n	8000aaa <HAL_UART_RxCpltCallback+0x46>
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x60>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d005      	beq.n	8000aaa <HAL_UART_RxCpltCallback+0x46>
	  {
       //set event flag
		osEventFlagsSet(cliFlags, CLI_FLAG_LINE_READY);
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x60>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 fd85 	bl	80045b4 <osEventFlagsSet>
	  }
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, sizeof(rx_data));
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4904      	ldr	r1, [pc, #16]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x5c>)
 8000aae:	4806      	ldr	r0, [pc, #24]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x64>)
 8000ab0:	f002 fc8b 	bl	80033ca <HAL_UART_Receive_IT>
	}
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	200001b6 	.word	0x200001b6
 8000ac4:	200001b8 	.word	0x200001b8
 8000ac8:	20000230 	.word	0x20000230

08000acc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <MX_GPIO_Init+0xd0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a2c      	ldr	r2, [pc, #176]	@ (8000b9c <MX_GPIO_Init+0xd0>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <MX_GPIO_Init+0xd0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <MX_GPIO_Init+0xd0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a25      	ldr	r2, [pc, #148]	@ (8000b9c <MX_GPIO_Init+0xd0>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <MX_GPIO_Init+0xd0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a1e      	ldr	r2, [pc, #120]	@ (8000b9c <MX_GPIO_Init+0xd0>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <MX_GPIO_Init+0xd0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <MX_GPIO_Init+0xd0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a17      	ldr	r2, [pc, #92]	@ (8000b9c <MX_GPIO_Init+0xd0>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <MX_GPIO_Init+0xd0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2120      	movs	r1, #32
 8000b56:	4812      	ldr	r0, [pc, #72]	@ (8000ba0 <MX_GPIO_Init+0xd4>)
 8000b58:	f000 ff5c 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <MX_GPIO_Init+0xd8>)
 8000b74:	f000 fdca 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b78:	2320      	movs	r3, #32
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <MX_GPIO_Init+0xd4>)
 8000b90:	f000 fdbc 	bl	800170c <HAL_GPIO_Init>

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40020800 	.word	0x40020800

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fbf8 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f80e 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f7ff ff8a 	bl	8000acc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bb8:	f000 fb4e 	bl	8001258 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000bbc:	f000 f8fa 	bl	8000db4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bc0:	f003 fbc2 	bl	8004348 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000bc4:	f7ff fefe 	bl	80009c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000bc8:	f003 fbe2 	bl	8004390 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <main+0x24>

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b094      	sub	sp, #80	@ 0x50
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0320 	add.w	r3, r7, #32
 8000bda:	2230      	movs	r2, #48	@ 0x30
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f006 feb9 	bl	8007956 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca4 <SystemClock_Config+0xd4>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfc:	4a29      	ldr	r2, [pc, #164]	@ (8000ca4 <SystemClock_Config+0xd4>)
 8000bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c04:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <SystemClock_Config+0xd4>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	4b24      	ldr	r3, [pc, #144]	@ (8000ca8 <SystemClock_Config+0xd8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c1c:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <SystemClock_Config+0xd8>)
 8000c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <SystemClock_Config+0xd8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c30:	230a      	movs	r3, #10
 8000c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c40:	2302      	movs	r3, #2
 8000c42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c44:	2300      	movs	r3, #0
 8000c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c48:	2310      	movs	r3, #16
 8000c4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c4c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c50:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c52:	2304      	movs	r3, #4
 8000c54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c56:	2307      	movs	r3, #7
 8000c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 ff22 	bl	8001aa8 <HAL_RCC_OscConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c6a:	f000 f82e 	bl	8000cca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	230f      	movs	r3, #15
 8000c70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c72:	2302      	movs	r3, #2
 8000c74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2102      	movs	r1, #2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 f984 	bl	8001f98 <HAL_RCC_ClockConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c96:	f000 f818 	bl	8000cca <Error_Handler>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3750      	adds	r7, #80	@ 0x50
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40007000 	.word	0x40007000

08000cac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cbc:	d101      	bne.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000cbe:	f000 fb91 	bl	80013e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cce:	b672      	cpsid	i
}
 8000cd0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd2:	bf00      	nop
 8000cd4:	e7fd      	b.n	8000cd2 <Error_Handler+0x8>

08000cd6 <RingBuffer_Init>:
#include "ring_buffer.h"

void RingBuffer_Init(RingBuffer* rb) {
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
    rb->head = 0;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    rb->tail = 0;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <RingBuffer_Put>:

bool RingBuffer_Put(RingBuffer* rb, uint8_t data) {
 8000cfa:	b480      	push	{r7}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	460b      	mov	r3, r1
 8000d04:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (rb->head + 1) & (RING_BUFFER_SIZE-1);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	3301      	adds	r3, #1
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d16:	81fb      	strh	r3, [r7, #14]
    if (next == rb->tail) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	89fa      	ldrh	r2, [r7, #14]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d101      	bne.n	8000d2a <RingBuffer_Put+0x30>
        return false;  // buffer full
 8000d26:	2300      	movs	r3, #0
 8000d28:	e00c      	b.n	8000d44 <RingBuffer_Put+0x4a>
    }
    rb->buffer[rb->head] = data;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	4619      	mov	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	78fa      	ldrb	r2, [r7, #3]
 8000d38:	545a      	strb	r2, [r3, r1]
    rb->head = next;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	89fa      	ldrh	r2, [r7, #14]
 8000d3e:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    return true;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <RingBuffer_Get>:

bool RingBuffer_Get(RingBuffer* rb, uint8_t* data) {
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
    if (rb->head == rb->tail) {
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d101      	bne.n	8000d72 <RingBuffer_Get+0x22>
        return false;  // buffer empty
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e019      	b.n	8000da6 <RingBuffer_Get+0x56>
    }
    *data = rb->buffer[rb->tail];
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	5c9a      	ldrb	r2, [r3, r2]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail + 1) % RING_BUFFER_SIZE;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	425a      	negs	r2, r3
 8000d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000d98:	bf58      	it	pl
 8000d9a:	4253      	negpl	r3, r2
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    return true;
 8000da4:	2301      	movs	r3, #1
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000dc8:	2300      	movs	r3, #0
 8000dca:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dcc:	4b29      	ldr	r3, [pc, #164]	@ (8000e74 <MX_RTC_Init+0xc0>)
 8000dce:	4a2a      	ldr	r2, [pc, #168]	@ (8000e78 <MX_RTC_Init+0xc4>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dd2:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <MX_RTC_Init+0xc0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000dd8:	4b26      	ldr	r3, [pc, #152]	@ (8000e74 <MX_RTC_Init+0xc0>)
 8000dda:	227f      	movs	r2, #127	@ 0x7f
 8000ddc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000dde:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <MX_RTC_Init+0xc0>)
 8000de0:	22ff      	movs	r2, #255	@ 0xff
 8000de2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000de4:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <MX_RTC_Init+0xc0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dea:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <MX_RTC_Init+0xc0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000df0:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <MX_RTC_Init+0xc0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000df6:	481f      	ldr	r0, [pc, #124]	@ (8000e74 <MX_RTC_Init+0xc0>)
 8000df8:	f001 fc0e 	bl	8002618 <HAL_RTC_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000e02:	f7ff ff62 	bl	8000cca <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4814      	ldr	r0, [pc, #80]	@ (8000e74 <MX_RTC_Init+0xc0>)
 8000e22:	f001 fc7c 	bl	800271e <HAL_RTC_SetTime>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000e2c:	f7ff ff4d 	bl	8000cca <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e30:	2301      	movs	r3, #1
 8000e32:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e34:	2301      	movs	r3, #1
 8000e36:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e40:	463b      	mov	r3, r7
 8000e42:	2201      	movs	r2, #1
 8000e44:	4619      	mov	r1, r3
 8000e46:	480b      	ldr	r0, [pc, #44]	@ (8000e74 <MX_RTC_Init+0xc0>)
 8000e48:	f001 fd03 	bl	8002852 <HAL_RTC_SetDate>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000e52:	f7ff ff3a 	bl	8000cca <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <MX_RTC_Init+0xc0>)
 8000e5c:	f001 fe1e 	bl	8002a9c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8000e66:	f7ff ff30 	bl	8000cca <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200001c4 	.word	0x200001c4
 8000e78:	40002800 	.word	0x40002800

08000e7c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <HAL_RTC_MspInit+0x60>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d119      	bne.n	8000ed2 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ea2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ea6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 fac5 	bl	800243c <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000eb8:	f7ff ff07 	bl	8000cca <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <HAL_RTC_MspInit+0x64>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	2003      	movs	r0, #3
 8000ec8:	f000 fb64 	bl	8001594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 fb7d 	bl	80015cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40002800 	.word	0x40002800
 8000ee0:	42470e3c 	.word	0x42470e3c

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <HAL_MspInit+0x54>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	4a11      	ldr	r2, [pc, #68]	@ (8000f38 <HAL_MspInit+0x54>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000efa:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <HAL_MspInit+0x54>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <HAL_MspInit+0x54>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <HAL_MspInit+0x54>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_MspInit+0x54>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	210f      	movs	r1, #15
 8000f26:	f06f 0001 	mvn.w	r0, #1
 8000f2a:	f000 fb33 	bl	8001594 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08e      	sub	sp, #56	@ 0x38
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4b34      	ldr	r3, [pc, #208]	@ (8001024 <HAL_InitTick+0xe8>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f54:	4a33      	ldr	r2, [pc, #204]	@ (8001024 <HAL_InitTick+0xe8>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5c:	4b31      	ldr	r3, [pc, #196]	@ (8001024 <HAL_InitTick+0xe8>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f68:	f107 0210 	add.w	r2, r7, #16
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 fa30 	bl	80023d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f78:	6a3b      	ldr	r3, [r7, #32]
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d103      	bne.n	8000f8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f82:	f001 fa01 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8000f86:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f88:	e004      	b.n	8000f94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f8a:	f001 f9fd 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f96:	4a24      	ldr	r2, [pc, #144]	@ (8001028 <HAL_InitTick+0xec>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	0c9b      	lsrs	r3, r3, #18
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000fa2:	4b22      	ldr	r3, [pc, #136]	@ (800102c <HAL_InitTick+0xf0>)
 8000fa4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fa8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000faa:	4b20      	ldr	r3, [pc, #128]	@ (800102c <HAL_InitTick+0xf0>)
 8000fac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fb0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800102c <HAL_InitTick+0xf0>)
 8000fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fb6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <HAL_InitTick+0xf0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <HAL_InitTick+0xf0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc4:	4b19      	ldr	r3, [pc, #100]	@ (800102c <HAL_InitTick+0xf0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000fca:	4818      	ldr	r0, [pc, #96]	@ (800102c <HAL_InitTick+0xf0>)
 8000fcc:	f001 feae 	bl	8002d2c <HAL_TIM_Base_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000fd6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d11b      	bne.n	8001016 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000fde:	4813      	ldr	r0, [pc, #76]	@ (800102c <HAL_InitTick+0xf0>)
 8000fe0:	f001 fefe 	bl	8002de0 <HAL_TIM_Base_Start_IT>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000fea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d111      	bne.n	8001016 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ff2:	201c      	movs	r0, #28
 8000ff4:	f000 faea 	bl	80015cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	d808      	bhi.n	8001010 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000ffe:	2200      	movs	r2, #0
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	201c      	movs	r0, #28
 8001004:	f000 fac6 	bl	8001594 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001008:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <HAL_InitTick+0xf4>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e002      	b.n	8001016 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001016:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800101a:	4618      	mov	r0, r3
 800101c:	3738      	adds	r7, #56	@ 0x38
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	431bde83 	.word	0x431bde83
 800102c:	200001e4 	.word	0x200001e4
 8001030:	2000002c 	.word	0x2000002c

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <NMI_Handler+0x4>

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <MemManage_Handler+0x4>

0800104c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <UsageFault_Handler+0x4>

0800105c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001070:	4802      	ldr	r0, [pc, #8]	@ (800107c <RTC_WKUP_IRQHandler+0x10>)
 8001072:	f001 fe2d 	bl	8002cd0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200001c4 	.word	0x200001c4

08001080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <TIM2_IRQHandler+0x10>)
 8001086:	f001 ff0d 	bl	8002ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200001e4 	.word	0x200001e4

08001094 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001098:	4802      	ldr	r0, [pc, #8]	@ (80010a4 <USART2_IRQHandler+0x10>)
 800109a:	f002 f9bb 	bl	8003414 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000230 	.word	0x20000230

080010a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return 1;
 80010ac:	2301      	movs	r3, #1
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_kill>:

int _kill(int pid, int sig)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010c2:	f006 fcf3 	bl	8007aac <__errno>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2216      	movs	r2, #22
 80010ca:	601a      	str	r2, [r3, #0]
  return -1;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_exit>:

void _exit (int status)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ffe7 	bl	80010b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010ea:	bf00      	nop
 80010ec:	e7fd      	b.n	80010ea <_exit+0x12>

080010ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	e00a      	b.n	8001116 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001100:	f3af 8000 	nop.w
 8001104:	4601      	mov	r1, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	60ba      	str	r2, [r7, #8]
 800110c:	b2ca      	uxtb	r2, r1
 800110e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	429a      	cmp	r2, r3
 800111c:	dbf0      	blt.n	8001100 <_read+0x12>
  }

  return len;
 800111e:	687b      	ldr	r3, [r7, #4]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e009      	b.n	800114e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	60ba      	str	r2, [r7, #8]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	429a      	cmp	r2, r3
 8001154:	dbf1      	blt.n	800113a <_write+0x12>
  }
  return len;
 8001156:	687b      	ldr	r3, [r7, #4]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_close>:

int _close(int file)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001188:	605a      	str	r2, [r3, #4]
  return 0;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_isatty>:

int _isatty(int file)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011a0:	2301      	movs	r3, #1
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d0:	4a14      	ldr	r2, [pc, #80]	@ (8001224 <_sbrk+0x5c>)
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <_sbrk+0x60>)
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <_sbrk+0x64>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	@ (8001230 <_sbrk+0x68>)
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d207      	bcs.n	8001208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f8:	f006 fc58 	bl	8007aac <__errno>
 80011fc:	4603      	mov	r3, r0
 80011fe:	220c      	movs	r2, #12
 8001200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	e009      	b.n	800121c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001208:	4b08      	ldr	r3, [pc, #32]	@ (800122c <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	4a05      	ldr	r2, [pc, #20]	@ (800122c <_sbrk+0x64>)
 8001218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121a:	68fb      	ldr	r3, [r7, #12]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20018000 	.word	0x20018000
 8001228:	00000400 	.word	0x00000400
 800122c:	2000022c 	.word	0x2000022c
 8001230:	20004d18 	.word	0x20004d18

08001234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <SystemInit+0x20>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800123e:	4a05      	ldr	r2, [pc, #20]	@ (8001254 <SystemInit+0x20>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <MX_USART2_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001290:	f001 ffc0 	bl	8003214 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f7ff fd16 	bl	8000cca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000230 	.word	0x20000230
 80012a8:	40004400 	.word	0x40004400

080012ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001340 <HAL_UART_MspInit+0x94>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d133      	bne.n	8001336 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <HAL_UART_MspInit+0x98>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001344 <HAL_UART_MspInit+0x98>)
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012de:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <HAL_UART_MspInit+0x98>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_UART_MspInit+0x98>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a14      	ldr	r2, [pc, #80]	@ (8001344 <HAL_UART_MspInit+0x98>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HAL_UART_MspInit+0x98>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001306:	230c      	movs	r3, #12
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001316:	2307      	movs	r3, #7
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4809      	ldr	r0, [pc, #36]	@ (8001348 <HAL_UART_MspInit+0x9c>)
 8001322:	f000 f9f3 	bl	800170c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2105      	movs	r1, #5
 800132a:	2026      	movs	r0, #38	@ 0x26
 800132c:	f000 f932 	bl	8001594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001330:	2026      	movs	r0, #38	@ 0x26
 8001332:	f000 f94b 	bl	80015cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	@ 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40004400 	.word	0x40004400
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000

0800134c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800134c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001384 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001350:	f7ff ff70 	bl	8001234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	@ (800138c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	@ (8001398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800137a:	f006 fb9d 	bl	8007ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137e:	f7ff fc13 	bl	8000ba8 <main>
  bx  lr    
 8001382:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001384:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001390:	08008f28 	.word	0x08008f28
  ldr r2, =_sbss
 8001394:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001398:	20004d18 	.word	0x20004d18

0800139c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a4:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <HAL_Init+0x40>)
 80013aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <HAL_Init+0x40>)
 80013b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <HAL_Init+0x40>)
 80013c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 f8d8 	bl	800157e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ce:	200f      	movs	r0, #15
 80013d0:	f7ff fdb4 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d4:	f7ff fd86 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023c00 	.word	0x40023c00

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000030 	.word	0x20000030
 8001408:	20000278 	.word	0x20000278

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	@ (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000278 	.word	0x20000278

08001424 <__NVIC_SetPriorityGrouping>:
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4907      	ldr	r1, [pc, #28]	@ (80014c0 <__NVIC_EnableIRQ+0x38>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	@ (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	@ (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	@ 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	@ 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ff4c 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a6:	f7ff ff61 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	6978      	ldr	r0, [r7, #20]
 80015b2:	f7ff ffb1 	bl	8001518 <NVIC_EncodePriority>
 80015b6:	4602      	mov	r2, r0
 80015b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff80 	bl	80014c4 <__NVIC_SetPriority>
}
 80015c4:	bf00      	nop
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff54 	bl	8001488 <__NVIC_EnableIRQ>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015f6:	f7ff ff09 	bl	800140c <HAL_GetTick>
 80015fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d008      	beq.n	800161a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2280      	movs	r2, #128	@ 0x80
 800160c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e052      	b.n	80016c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0216 	bic.w	r2, r2, #22
 8001628:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001638:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	2b00      	cmp	r3, #0
 8001640:	d103      	bne.n	800164a <HAL_DMA_Abort+0x62>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0208 	bic.w	r2, r2, #8
 8001658:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800166a:	e013      	b.n	8001694 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800166c:	f7ff fece 	bl	800140c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b05      	cmp	r3, #5
 8001678:	d90c      	bls.n	8001694 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2220      	movs	r2, #32
 800167e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2203      	movs	r2, #3
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e015      	b.n	80016c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1e4      	bne.n	800166c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a6:	223f      	movs	r2, #63	@ 0x3f
 80016a8:	409a      	lsls	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d004      	beq.n	80016e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2280      	movs	r2, #128	@ 0x80
 80016e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00c      	b.n	8001700 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2205      	movs	r2, #5
 80016ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0201 	bic.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	@ 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e159      	b.n	80019dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 8148 	bne.w	80019d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d005      	beq.n	800175e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175a:	2b02      	cmp	r3, #2
 800175c:	d130      	bne.n	80017c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 0201 	and.w	r2, r3, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d017      	beq.n	80017fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80a2 	beq.w	80019d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b57      	ldr	r3, [pc, #348]	@ (80019f4 <HAL_GPIO_Init+0x2e8>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	4a56      	ldr	r2, [pc, #344]	@ (80019f4 <HAL_GPIO_Init+0x2e8>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a2:	4b54      	ldr	r3, [pc, #336]	@ (80019f4 <HAL_GPIO_Init+0x2e8>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ae:	4a52      	ldr	r2, [pc, #328]	@ (80019f8 <HAL_GPIO_Init+0x2ec>)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a49      	ldr	r2, [pc, #292]	@ (80019fc <HAL_GPIO_Init+0x2f0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d019      	beq.n	800190e <HAL_GPIO_Init+0x202>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a48      	ldr	r2, [pc, #288]	@ (8001a00 <HAL_GPIO_Init+0x2f4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d013      	beq.n	800190a <HAL_GPIO_Init+0x1fe>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a47      	ldr	r2, [pc, #284]	@ (8001a04 <HAL_GPIO_Init+0x2f8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d00d      	beq.n	8001906 <HAL_GPIO_Init+0x1fa>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a46      	ldr	r2, [pc, #280]	@ (8001a08 <HAL_GPIO_Init+0x2fc>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d007      	beq.n	8001902 <HAL_GPIO_Init+0x1f6>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a45      	ldr	r2, [pc, #276]	@ (8001a0c <HAL_GPIO_Init+0x300>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d101      	bne.n	80018fe <HAL_GPIO_Init+0x1f2>
 80018fa:	2304      	movs	r3, #4
 80018fc:	e008      	b.n	8001910 <HAL_GPIO_Init+0x204>
 80018fe:	2307      	movs	r3, #7
 8001900:	e006      	b.n	8001910 <HAL_GPIO_Init+0x204>
 8001902:	2303      	movs	r3, #3
 8001904:	e004      	b.n	8001910 <HAL_GPIO_Init+0x204>
 8001906:	2302      	movs	r3, #2
 8001908:	e002      	b.n	8001910 <HAL_GPIO_Init+0x204>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <HAL_GPIO_Init+0x204>
 800190e:	2300      	movs	r3, #0
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	f002 0203 	and.w	r2, r2, #3
 8001916:	0092      	lsls	r2, r2, #2
 8001918:	4093      	lsls	r3, r2
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001920:	4935      	ldr	r1, [pc, #212]	@ (80019f8 <HAL_GPIO_Init+0x2ec>)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	3302      	adds	r3, #2
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192e:	4b38      	ldr	r3, [pc, #224]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001952:	4a2f      	ldr	r2, [pc, #188]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001958:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800197c:	4a24      	ldr	r2, [pc, #144]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001982:	4b23      	ldr	r3, [pc, #140]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ac:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3301      	adds	r3, #1
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	2b0f      	cmp	r3, #15
 80019e0:	f67f aea2 	bls.w	8001728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3724      	adds	r7, #36	@ 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40013800 	.word	0x40013800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40020400 	.word	0x40020400
 8001a04:	40020800 	.word	0x40020800
 8001a08:	40020c00 	.word	0x40020c00
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40013c00 	.word	0x40013c00

08001a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	4613      	mov	r3, r2
 8001a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a24:	787b      	ldrb	r3, [r7, #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a30:	e003      	b.n	8001a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	619a      	str	r2, [r3, #24]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8001a54:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <HAL_PWR_EnterSTOPMode+0x58>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 0203 	bic.w	r2, r3, #3
 8001a5c:	4910      	ldr	r1, [pc, #64]	@ (8001aa0 <HAL_PWR_EnterSTOPMode+0x58>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8001a76:	bf30      	wfi
 8001a78:	e005      	b.n	8001a86 <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d001      	beq.n	8001a84 <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 8001a80:	bf40      	sev
      __WFE();
 8001a82:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 8001a84:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	4a06      	ldr	r2, [pc, #24]	@ (8001aa4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	6113      	str	r3, [r2, #16]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e267      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d075      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ac6:	4b88      	ldr	r3, [pc, #544]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d00c      	beq.n	8001aec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad2:	4b85      	ldr	r3, [pc, #532]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d112      	bne.n	8001b04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ade:	4b82      	ldr	r3, [pc, #520]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ae6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001aea:	d10b      	bne.n	8001b04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	4b7e      	ldr	r3, [pc, #504]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d05b      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x108>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d157      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e242      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b0c:	d106      	bne.n	8001b1c <HAL_RCC_OscConfig+0x74>
 8001b0e:	4b76      	ldr	r3, [pc, #472]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a75      	ldr	r2, [pc, #468]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e01d      	b.n	8001b58 <HAL_RCC_OscConfig+0xb0>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x98>
 8001b26:	4b70      	ldr	r3, [pc, #448]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a6f      	ldr	r2, [pc, #444]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a6c      	ldr	r2, [pc, #432]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0xb0>
 8001b40:	4b69      	ldr	r3, [pc, #420]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a68      	ldr	r2, [pc, #416]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b66      	ldr	r3, [pc, #408]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a65      	ldr	r2, [pc, #404]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fc54 	bl	800140c <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff fc50 	bl	800140c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	@ 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e207      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0xc0>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fc40 	bl	800140c <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff fc3c 	bl	800140c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	@ 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e1f3      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	4b51      	ldr	r3, [pc, #324]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0xe8>
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d063      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bca:	4b47      	ldr	r3, [pc, #284]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d11c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd6:	4b44      	ldr	r3, [pc, #272]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d116      	bne.n	8001c10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	4b41      	ldr	r3, [pc, #260]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_RCC_OscConfig+0x152>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e1c7      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4937      	ldr	r1, [pc, #220]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	e03a      	b.n	8001c86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d020      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c18:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <HAL_RCC_OscConfig+0x244>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fbf5 	bl	800140c <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff fbf1 	bl	800140c <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1a8      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4925      	ldr	r1, [pc, #148]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5a:	4b24      	ldr	r3, [pc, #144]	@ (8001cec <HAL_RCC_OscConfig+0x244>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff fbd4 	bl	800140c <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff fbd0 	bl	800140c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e187      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d036      	beq.n	8001d00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d016      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_RCC_OscConfig+0x248>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff fbb4 	bl	800140c <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fbb0 	bl	800140c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e167      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x200>
 8001cc6:	e01b      	b.n	8001d00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc8:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <HAL_RCC_OscConfig+0x248>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7ff fb9d 	bl	800140c <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd4:	e00e      	b.n	8001cf4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fb99 	bl	800140c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d907      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e150      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	42470000 	.word	0x42470000
 8001cf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	4b88      	ldr	r3, [pc, #544]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1ea      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8097 	beq.w	8001e3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d12:	4b81      	ldr	r3, [pc, #516]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10f      	bne.n	8001d3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	4b7d      	ldr	r3, [pc, #500]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	4a7c      	ldr	r2, [pc, #496]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2e:	4b7a      	ldr	r3, [pc, #488]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b77      	ldr	r3, [pc, #476]	@ (8001f1c <HAL_RCC_OscConfig+0x474>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d118      	bne.n	8001d7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4a:	4b74      	ldr	r3, [pc, #464]	@ (8001f1c <HAL_RCC_OscConfig+0x474>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a73      	ldr	r2, [pc, #460]	@ (8001f1c <HAL_RCC_OscConfig+0x474>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d56:	f7ff fb59 	bl	800140c <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5e:	f7ff fb55 	bl	800140c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e10c      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	4b6a      	ldr	r3, [pc, #424]	@ (8001f1c <HAL_RCC_OscConfig+0x474>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x2ea>
 8001d84:	4b64      	ldr	r3, [pc, #400]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d88:	4a63      	ldr	r2, [pc, #396]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d90:	e01c      	b.n	8001dcc <HAL_RCC_OscConfig+0x324>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x30c>
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9e:	4a5e      	ldr	r2, [pc, #376]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001daa:	4a5b      	ldr	r2, [pc, #364]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0x324>
 8001db4:	4b58      	ldr	r3, [pc, #352]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db8:	4a57      	ldr	r2, [pc, #348]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc0:	4b55      	ldr	r3, [pc, #340]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc4:	4a54      	ldr	r2, [pc, #336]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d015      	beq.n	8001e00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fb1a 	bl	800140c <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fb16 	bl	800140c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e0cb      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	4b49      	ldr	r3, [pc, #292]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0ee      	beq.n	8001ddc <HAL_RCC_OscConfig+0x334>
 8001dfe:	e014      	b.n	8001e2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff fb04 	bl	800140c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7ff fb00 	bl	800140c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e0b5      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1ee      	bne.n	8001e08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	4b39      	ldr	r3, [pc, #228]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	4a38      	ldr	r2, [pc, #224]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80a1 	beq.w	8001f88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e46:	4b34      	ldr	r3, [pc, #208]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d05c      	beq.n	8001f0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d141      	bne.n	8001ede <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b31      	ldr	r3, [pc, #196]	@ (8001f20 <HAL_RCC_OscConfig+0x478>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fad4 	bl	800140c <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff fad0 	bl	800140c <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e087      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	4b27      	ldr	r3, [pc, #156]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	019b      	lsls	r3, r3, #6
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	491b      	ldr	r1, [pc, #108]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <HAL_RCC_OscConfig+0x478>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff faa9 	bl	800140c <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7ff faa5 	bl	800140c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e05c      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed0:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x416>
 8001edc:	e054      	b.n	8001f88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <HAL_RCC_OscConfig+0x478>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fa92 	bl	800140c <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff fa8e 	bl	800140c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e045      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x444>
 8001f0a:	e03d      	b.n	8001f88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e038      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f24:	4b1b      	ldr	r3, [pc, #108]	@ (8001f94 <HAL_RCC_OscConfig+0x4ec>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d028      	beq.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d121      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d11a      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d111      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800

08001f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0cc      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b68      	ldr	r3, [pc, #416]	@ (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d90c      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b65      	ldr	r3, [pc, #404]	@ (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b63      	ldr	r3, [pc, #396]	@ (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b8      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fec:	4b59      	ldr	r3, [pc, #356]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a58      	ldr	r2, [pc, #352]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ff6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002004:	4b53      	ldr	r3, [pc, #332]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a52      	ldr	r2, [pc, #328]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800200e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	4b50      	ldr	r3, [pc, #320]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	494d      	ldr	r1, [pc, #308]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d044      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b47      	ldr	r3, [pc, #284]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d119      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e07f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d003      	beq.n	8002056 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002052:	2b03      	cmp	r3, #3
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002056:	4b3f      	ldr	r3, [pc, #252]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002066:	4b3b      	ldr	r3, [pc, #236]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e067      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b37      	ldr	r3, [pc, #220]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4934      	ldr	r1, [pc, #208]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002088:	f7ff f9c0 	bl	800140c <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7ff f9bc 	bl	800140c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e04f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b8:	4b25      	ldr	r3, [pc, #148]	@ (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d20c      	bcs.n	80020e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b22      	ldr	r3, [pc, #136]	@ (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e032      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ec:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4916      	ldr	r1, [pc, #88]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800210a:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	490e      	ldr	r1, [pc, #56]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800211e:	f000 f821 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 8002122:	4602      	mov	r2, r0
 8002124:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	490a      	ldr	r1, [pc, #40]	@ (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	5ccb      	ldrb	r3, [r1, r3]
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	4a09      	ldr	r2, [pc, #36]	@ (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fefc 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00
 8002154:	40023800 	.word	0x40023800
 8002158:	08008d1c 	.word	0x08008d1c
 800215c:	20000028 	.word	0x20000028
 8002160:	2000002c 	.word	0x2000002c

08002164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002168:	b094      	sub	sp, #80	@ 0x50
 800216a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800217c:	4b79      	ldr	r3, [pc, #484]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x200>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b08      	cmp	r3, #8
 8002186:	d00d      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002188:	2b08      	cmp	r3, #8
 800218a:	f200 80e1 	bhi.w	8002350 <HAL_RCC_GetSysClockFreq+0x1ec>
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x34>
 8002192:	2b04      	cmp	r3, #4
 8002194:	d003      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x3a>
 8002196:	e0db      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002198:	4b73      	ldr	r3, [pc, #460]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x204>)
 800219a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800219c:	e0db      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800219e:	4b73      	ldr	r3, [pc, #460]	@ (800236c <HAL_RCC_GetSysClockFreq+0x208>)
 80021a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021a2:	e0d8      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x200>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x200>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d063      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x200>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	2200      	movs	r2, #0
 80021c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80021c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80021ce:	2300      	movs	r3, #0
 80021d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80021d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80021d6:	4622      	mov	r2, r4
 80021d8:	462b      	mov	r3, r5
 80021da:	f04f 0000 	mov.w	r0, #0
 80021de:	f04f 0100 	mov.w	r1, #0
 80021e2:	0159      	lsls	r1, r3, #5
 80021e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e8:	0150      	lsls	r0, r2, #5
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4621      	mov	r1, r4
 80021f0:	1a51      	subs	r1, r2, r1
 80021f2:	6139      	str	r1, [r7, #16]
 80021f4:	4629      	mov	r1, r5
 80021f6:	eb63 0301 	sbc.w	r3, r3, r1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002208:	4659      	mov	r1, fp
 800220a:	018b      	lsls	r3, r1, #6
 800220c:	4651      	mov	r1, sl
 800220e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002212:	4651      	mov	r1, sl
 8002214:	018a      	lsls	r2, r1, #6
 8002216:	4651      	mov	r1, sl
 8002218:	ebb2 0801 	subs.w	r8, r2, r1
 800221c:	4659      	mov	r1, fp
 800221e:	eb63 0901 	sbc.w	r9, r3, r1
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800222e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002236:	4690      	mov	r8, r2
 8002238:	4699      	mov	r9, r3
 800223a:	4623      	mov	r3, r4
 800223c:	eb18 0303 	adds.w	r3, r8, r3
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	462b      	mov	r3, r5
 8002244:	eb49 0303 	adc.w	r3, r9, r3
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002256:	4629      	mov	r1, r5
 8002258:	024b      	lsls	r3, r1, #9
 800225a:	4621      	mov	r1, r4
 800225c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002260:	4621      	mov	r1, r4
 8002262:	024a      	lsls	r2, r1, #9
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800226a:	2200      	movs	r2, #0
 800226c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800226e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002270:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002274:	f7fe f81c 	bl	80002b0 <__aeabi_uldivmod>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4613      	mov	r3, r2
 800227e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002280:	e058      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002282:	4b38      	ldr	r3, [pc, #224]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x200>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	099b      	lsrs	r3, r3, #6
 8002288:	2200      	movs	r2, #0
 800228a:	4618      	mov	r0, r3
 800228c:	4611      	mov	r1, r2
 800228e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002292:	623b      	str	r3, [r7, #32]
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
 8002298:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800229c:	4642      	mov	r2, r8
 800229e:	464b      	mov	r3, r9
 80022a0:	f04f 0000 	mov.w	r0, #0
 80022a4:	f04f 0100 	mov.w	r1, #0
 80022a8:	0159      	lsls	r1, r3, #5
 80022aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ae:	0150      	lsls	r0, r2, #5
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4641      	mov	r1, r8
 80022b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80022ba:	4649      	mov	r1, r9
 80022bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022d4:	ebb2 040a 	subs.w	r4, r2, sl
 80022d8:	eb63 050b 	sbc.w	r5, r3, fp
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	00eb      	lsls	r3, r5, #3
 80022e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ea:	00e2      	lsls	r2, r4, #3
 80022ec:	4614      	mov	r4, r2
 80022ee:	461d      	mov	r5, r3
 80022f0:	4643      	mov	r3, r8
 80022f2:	18e3      	adds	r3, r4, r3
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	464b      	mov	r3, r9
 80022f8:	eb45 0303 	adc.w	r3, r5, r3
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9d7 4500 	ldrd	r4, r5, [r7]
 800230a:	4629      	mov	r1, r5
 800230c:	028b      	lsls	r3, r1, #10
 800230e:	4621      	mov	r1, r4
 8002310:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002314:	4621      	mov	r1, r4
 8002316:	028a      	lsls	r2, r1, #10
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800231e:	2200      	movs	r2, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	61fa      	str	r2, [r7, #28]
 8002324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002328:	f7fd ffc2 	bl	80002b0 <__aeabi_uldivmod>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4613      	mov	r3, r2
 8002332:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002334:	4b0b      	ldr	r3, [pc, #44]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x200>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	3301      	adds	r3, #1
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002344:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800234e:	e002      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x204>)
 8002352:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002358:	4618      	mov	r0, r3
 800235a:	3750      	adds	r7, #80	@ 0x50
 800235c:	46bd      	mov	sp, r7
 800235e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800
 8002368:	00f42400 	.word	0x00f42400
 800236c:	007a1200 	.word	0x007a1200

08002370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002374:	4b03      	ldr	r3, [pc, #12]	@ (8002384 <HAL_RCC_GetHCLKFreq+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000028 	.word	0x20000028

08002388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800238c:	f7ff fff0 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	0a9b      	lsrs	r3, r3, #10
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4903      	ldr	r1, [pc, #12]	@ (80023ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40023800 	.word	0x40023800
 80023ac:	08008d2c 	.word	0x08008d2c

080023b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023b4:	f7ff ffdc 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	0b5b      	lsrs	r3, r3, #13
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	@ (80023d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	08008d2c 	.word	0x08008d2c

080023d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	220f      	movs	r2, #15
 80023e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <HAL_RCC_GetClockConfig+0x5c>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0203 	and.w	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <HAL_RCC_GetClockConfig+0x5c>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002400:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <HAL_RCC_GetClockConfig+0x5c>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800240c:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_RCC_GetClockConfig+0x5c>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	08db      	lsrs	r3, r3, #3
 8002412:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800241a:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <HAL_RCC_GetClockConfig+0x60>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0207 	and.w	r2, r3, #7
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	601a      	str	r2, [r3, #0]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	40023c00 	.word	0x40023c00

0800243c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002460:	2b00      	cmp	r3, #0
 8002462:	d035      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002464:	4b67      	ldr	r3, [pc, #412]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800246a:	f7fe ffcf 	bl	800140c <HAL_GetTick>
 800246e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002472:	f7fe ffcb 	bl	800140c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0ba      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002484:	4b60      	ldr	r3, [pc, #384]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f0      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	019a      	lsls	r2, r3, #6
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	071b      	lsls	r3, r3, #28
 800249c:	495a      	ldr	r1, [pc, #360]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024a4:	4b57      	ldr	r3, [pc, #348]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024aa:	f7fe ffaf 	bl	800140c <HAL_GetTick>
 80024ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024b2:	f7fe ffab 	bl	800140c <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e09a      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024c4:	4b50      	ldr	r3, [pc, #320]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8083 	beq.w	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	4b49      	ldr	r3, [pc, #292]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	4a48      	ldr	r2, [pc, #288]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ee:	4b46      	ldr	r3, [pc, #280]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80024fa:	4b44      	ldr	r3, [pc, #272]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a43      	ldr	r2, [pc, #268]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002504:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002506:	f7fe ff81 	bl	800140c <HAL_GetTick>
 800250a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7fe ff7d 	bl	800140c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e06c      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002520:	4b3a      	ldr	r3, [pc, #232]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800252c:	4b36      	ldr	r3, [pc, #216]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002530:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002534:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d02f      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	429a      	cmp	r2, r3
 8002548:	d028      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800254a:	4b2f      	ldr	r3, [pc, #188]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002552:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002554:	4b2e      	ldr	r3, [pc, #184]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800255a:	4b2d      	ldr	r3, [pc, #180]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002560:	4a29      	ldr	r2, [pc, #164]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002566:	4b28      	ldr	r3, [pc, #160]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d114      	bne.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe ff4b 	bl	800140c <HAL_GetTick>
 8002576:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002578:	e00a      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe ff47 	bl	800140c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e034      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	4b1d      	ldr	r3, [pc, #116]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0ee      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025a8:	d10d      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80025aa:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80025ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025be:	4912      	ldr	r1, [pc, #72]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]
 80025c4:	e005      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80025c6:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025cc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80025d0:	6093      	str	r3, [r2, #8]
 80025d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025de:	490a      	ldr	r1, [pc, #40]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7c1a      	ldrb	r2, [r3, #16]
 80025f4:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025f6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	42470068 	.word	0x42470068
 8002608:	40023800 	.word	0x40023800
 800260c:	40007000 	.word	0x40007000
 8002610:	42470e40 	.word	0x42470e40
 8002614:	424711e0 	.word	0x424711e0

08002618 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e073      	b.n	8002716 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7f5b      	ldrb	r3, [r3, #29]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fc1c 	bl	8000e7c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b10      	cmp	r3, #16
 8002656:	d055      	beq.n	8002704 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	22ca      	movs	r2, #202	@ 0xca
 800265e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2253      	movs	r2, #83	@ 0x53
 8002666:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f99d 	bl	80029a8 <RTC_EnterInitMode>
 800266e:	4603      	mov	r3, r0
 8002670:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d12c      	bne.n	80026d2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800268a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68d2      	ldr	r2, [r2, #12]
 80026b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6919      	ldr	r1, [r3, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	041a      	lsls	r2, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f9a4 	bl	8002a16 <RTC_ExitInitMode>
 80026ce:	4603      	mov	r3, r0
 80026d0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d110      	bne.n	80026fa <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	22ff      	movs	r2, #255	@ 0xff
 8002700:	625a      	str	r2, [r3, #36]	@ 0x24
 8002702:	e001      	b.n	8002708 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d102      	bne.n	8002714 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800271e:	b590      	push	{r4, r7, lr}
 8002720:	b087      	sub	sp, #28
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	7f1b      	ldrb	r3, [r3, #28]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_RTC_SetTime+0x1c>
 8002736:	2302      	movs	r3, #2
 8002738:	e087      	b.n	800284a <HAL_RTC_SetTime+0x12c>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2202      	movs	r2, #2
 8002744:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d126      	bne.n	800279a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d102      	bne.n	8002760 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2200      	movs	r2, #0
 800275e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f97b 	bl	8002a60 <RTC_ByteToBcd2>
 800276a:	4603      	mov	r3, r0
 800276c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	785b      	ldrb	r3, [r3, #1]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f974 	bl	8002a60 <RTC_ByteToBcd2>
 8002778:	4603      	mov	r3, r0
 800277a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800277c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	789b      	ldrb	r3, [r3, #2]
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f96c 	bl	8002a60 <RTC_ByteToBcd2>
 8002788:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800278a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	78db      	ldrb	r3, [r3, #3]
 8002792:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	e018      	b.n	80027cc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2200      	movs	r2, #0
 80027ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	785b      	ldrb	r3, [r3, #1]
 80027b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027ba:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80027c0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	78db      	ldrb	r3, [r3, #3]
 80027c6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	22ca      	movs	r2, #202	@ 0xca
 80027d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2253      	movs	r2, #83	@ 0x53
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f8e3 	bl	80029a8 <RTC_EnterInitMode>
 80027e2:	4603      	mov	r3, r0
 80027e4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d120      	bne.n	800282e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80027f6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80027fa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800280a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6899      	ldr	r1, [r3, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	431a      	orrs	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f8f6 	bl	8002a16 <RTC_ExitInitMode>
 800282a:	4603      	mov	r3, r0
 800282c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800282e:	7cfb      	ldrb	r3, [r7, #19]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	22ff      	movs	r2, #255	@ 0xff
 8002840:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]

  return status;
 8002848:	7cfb      	ldrb	r3, [r7, #19]
}
 800284a:	4618      	mov	r0, r3
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	bd90      	pop	{r4, r7, pc}

08002852 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002852:	b590      	push	{r4, r7, lr}
 8002854:	b087      	sub	sp, #28
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	7f1b      	ldrb	r3, [r3, #28]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_RTC_SetDate+0x1c>
 800286a:	2302      	movs	r3, #2
 800286c:	e071      	b.n	8002952 <HAL_RTC_SetDate+0x100>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2202      	movs	r2, #2
 8002878:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10e      	bne.n	800289e <HAL_RTC_SetDate+0x4c>
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	785b      	ldrb	r3, [r3, #1]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	785b      	ldrb	r3, [r3, #1]
 8002890:	f023 0310 	bic.w	r3, r3, #16
 8002894:	b2db      	uxtb	r3, r3
 8002896:	330a      	adds	r3, #10
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11c      	bne.n	80028de <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	78db      	ldrb	r3, [r3, #3]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 f8d9 	bl	8002a60 <RTC_ByteToBcd2>
 80028ae:	4603      	mov	r3, r0
 80028b0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	785b      	ldrb	r3, [r3, #1]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f8d2 	bl	8002a60 <RTC_ByteToBcd2>
 80028bc:	4603      	mov	r3, r0
 80028be:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80028c0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	789b      	ldrb	r3, [r3, #2]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f8ca 	bl	8002a60 <RTC_ByteToBcd2>
 80028cc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80028ce:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	e00e      	b.n	80028fc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	78db      	ldrb	r3, [r3, #3]
 80028e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80028ea:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80028f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	22ca      	movs	r2, #202	@ 0xca
 8002902:	625a      	str	r2, [r3, #36]	@ 0x24
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2253      	movs	r2, #83	@ 0x53
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f84b 	bl	80029a8 <RTC_EnterInitMode>
 8002912:	4603      	mov	r3, r0
 8002914:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10c      	bne.n	8002936 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002926:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800292a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f872 	bl	8002a16 <RTC_ExitInitMode>
 8002932:	4603      	mov	r3, r0
 8002934:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	22ff      	movs	r2, #255	@ 0xff
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]

  return status;
 8002950:	7cfb      	ldrb	r3, [r7, #19]
}
 8002952:	4618      	mov	r0, r3
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd90      	pop	{r4, r7, pc}
	...

0800295c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0d      	ldr	r2, [pc, #52]	@ (80029a4 <HAL_RTC_WaitForSynchro+0x48>)
 800296e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002970:	f7fe fd4c 	bl	800140c <HAL_GetTick>
 8002974:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002976:	e009      	b.n	800298c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002978:	f7fe fd48 	bl	800140c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002986:	d901      	bls.n	800298c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e007      	b.n	800299c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0ee      	beq.n	8002978 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	00013f5f 	.word	0x00013f5f

080029a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d122      	bne.n	8002a0c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029d6:	f7fe fd19 	bl	800140c <HAL_GetTick>
 80029da:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029dc:	e00c      	b.n	80029f8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029de:	f7fe fd15 	bl	800140c <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029ec:	d904      	bls.n	80029f8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2204      	movs	r2, #4
 80029f2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <RTC_EnterInitMode+0x64>
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d1e8      	bne.n	80029de <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a30:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff8b 	bl	800295c <HAL_RTC_WaitForSynchro>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002a6e:	e005      	b.n	8002a7c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3301      	adds	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	3b0a      	subs	r3, #10
 8002a7a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	2b09      	cmp	r3, #9
 8002a80:	d8f6      	bhi.n	8002a70 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	b2db      	uxtb	r3, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002aa8:	4b5a      	ldr	r3, [pc, #360]	@ (8002c14 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a5a      	ldr	r2, [pc, #360]	@ (8002c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	0adb      	lsrs	r3, r3, #11
 8002ab4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ab8:	fb02 f303 	mul.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	7f1b      	ldrb	r3, [r3, #28]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e09d      	b.n	8002c06 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	22ca      	movs	r2, #202	@ 0xca
 8002adc:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2253      	movs	r2, #83	@ 0x53
 8002ae4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d018      	beq.n	8002b26 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	22ff      	movs	r2, #255	@ 0xff
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e076      	b.n	8002c06 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1e6      	bne.n	8002af4 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b34:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002b46:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002b48:	4b32      	ldr	r3, [pc, #200]	@ (8002c14 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a32      	ldr	r2, [pc, #200]	@ (8002c18 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0adb      	lsrs	r3, r3, #11
 8002b54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b58:	fb02 f303 	mul.w	r3, r2, r3
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10b      	bne.n	8002b82 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	22ff      	movs	r2, #255	@ 0xff
 8002b70:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2203      	movs	r2, #3
 8002b76:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e041      	b.n	8002c06 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0e6      	beq.n	8002b5e <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0207 	bic.w	r2, r2, #7
 8002b9e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002bb8:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a17      	ldr	r2, [pc, #92]	@ (8002c1c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002bbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bc2:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002bc4:	4b15      	ldr	r3, [pc, #84]	@ (8002c1c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a14      	ldr	r2, [pc, #80]	@ (8002c1c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002bca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bce:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bde:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bee:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	22ff      	movs	r2, #255	@ 0xff
 8002bf6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000028 	.word	0x20000028
 8002c18:	10624dd3 	.word	0x10624dd3
 8002c1c:	40013c00 	.word	0x40013c00

08002c20 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7f1b      	ldrb	r3, [r3, #28]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e047      	b.n	8002cc8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	22ca      	movs	r2, #202	@ 0xca
 8002c4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2253      	movs	r2, #83	@ 0x53
 8002c52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c62:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c72:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c74:	f7fe fbca 	bl	800140c <HAL_GetTick>
 8002c78:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002c7a:	e013      	b.n	8002ca4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c7c:	f7fe fbc6 	bl	800140c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c8a:	d90b      	bls.n	8002ca4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	22ff      	movs	r2, #255	@ 0xff
 8002c92:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2203      	movs	r2, #3
 8002c98:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e011      	b.n	8002cc8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0e4      	beq.n	8002c7c <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	22ff      	movs	r2, #255	@ 0xff
 8002cb8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8002cda:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002cde:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002cfe:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f809 	bl	8002d18 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	775a      	strb	r2, [r3, #29]
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40013c00 	.word	0x40013c00

08002d18 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e041      	b.n	8002dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f839 	bl	8002dca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3304      	adds	r3, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f000 f9b2 	bl	80030d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d001      	beq.n	8002df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e044      	b.n	8002e82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1e      	ldr	r2, [pc, #120]	@ (8002e90 <HAL_TIM_Base_Start_IT+0xb0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d018      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x6c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e22:	d013      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x6c>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1a      	ldr	r2, [pc, #104]	@ (8002e94 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x6c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a19      	ldr	r2, [pc, #100]	@ (8002e98 <HAL_TIM_Base_Start_IT+0xb8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x6c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a17      	ldr	r2, [pc, #92]	@ (8002e9c <HAL_TIM_Base_Start_IT+0xbc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x6c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a16      	ldr	r2, [pc, #88]	@ (8002ea0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d111      	bne.n	8002e70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d010      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0201 	orr.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6e:	e007      	b.n	8002e80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40010000 	.word	0x40010000
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40000800 	.word	0x40000800
 8002e9c:	40000c00 	.word	0x40000c00
 8002ea0:	40014000 	.word	0x40014000

08002ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d020      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01b      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0202 	mvn.w	r2, #2
 8002ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f8d2 	bl	8003098 <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f8c4 	bl	8003084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f8d5 	bl	80030ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d020      	beq.n	8002f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01b      	beq.n	8002f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0204 	mvn.w	r2, #4
 8002f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f8ac 	bl	8003098 <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f89e 	bl	8003084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f8af 	bl	80030ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d020      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01b      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0208 	mvn.w	r2, #8
 8002f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2204      	movs	r2, #4
 8002f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f886 	bl	8003098 <HAL_TIM_IC_CaptureCallback>
 8002f8c:	e005      	b.n	8002f9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f878 	bl	8003084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f889 	bl	80030ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d020      	beq.n	8002fec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01b      	beq.n	8002fec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0210 	mvn.w	r2, #16
 8002fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f860 	bl	8003098 <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f852 	bl	8003084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f863 	bl	80030ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00c      	beq.n	8003010 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0201 	mvn.w	r2, #1
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fe4e 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00c      	beq.n	8003034 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800302c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f8e6 	bl	8003200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00c      	beq.n	8003058 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f834 	bl	80030c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00c      	beq.n	800307c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0220 	mvn.w	r2, #32
 8003074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f8b8 	bl	80031ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a3a      	ldr	r2, [pc, #232]	@ (80031d0 <TIM_Base_SetConfig+0xfc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00f      	beq.n	800310c <TIM_Base_SetConfig+0x38>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030f2:	d00b      	beq.n	800310c <TIM_Base_SetConfig+0x38>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a37      	ldr	r2, [pc, #220]	@ (80031d4 <TIM_Base_SetConfig+0x100>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d007      	beq.n	800310c <TIM_Base_SetConfig+0x38>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a36      	ldr	r2, [pc, #216]	@ (80031d8 <TIM_Base_SetConfig+0x104>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d003      	beq.n	800310c <TIM_Base_SetConfig+0x38>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a35      	ldr	r2, [pc, #212]	@ (80031dc <TIM_Base_SetConfig+0x108>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d108      	bne.n	800311e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a2b      	ldr	r2, [pc, #172]	@ (80031d0 <TIM_Base_SetConfig+0xfc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d01b      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312c:	d017      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a28      	ldr	r2, [pc, #160]	@ (80031d4 <TIM_Base_SetConfig+0x100>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a27      	ldr	r2, [pc, #156]	@ (80031d8 <TIM_Base_SetConfig+0x104>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00f      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a26      	ldr	r2, [pc, #152]	@ (80031dc <TIM_Base_SetConfig+0x108>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00b      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a25      	ldr	r2, [pc, #148]	@ (80031e0 <TIM_Base_SetConfig+0x10c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a24      	ldr	r2, [pc, #144]	@ (80031e4 <TIM_Base_SetConfig+0x110>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d003      	beq.n	800315e <TIM_Base_SetConfig+0x8a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a23      	ldr	r2, [pc, #140]	@ (80031e8 <TIM_Base_SetConfig+0x114>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d108      	bne.n	8003170 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a0e      	ldr	r2, [pc, #56]	@ (80031d0 <TIM_Base_SetConfig+0xfc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d103      	bne.n	80031a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d105      	bne.n	80031c2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f023 0201 	bic.w	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	611a      	str	r2, [r3, #16]
  }
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800
 80031dc:	40000c00 	.word	0x40000c00
 80031e0:	40014000 	.word	0x40014000
 80031e4:	40014400 	.word	0x40014400
 80031e8:	40014800 	.word	0x40014800

080031ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e042      	b.n	80032ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fe f836 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2224      	movs	r2, #36	@ 0x24
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fdbd 	bl	8003dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800326c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800327c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800328c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	@ 0x28
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d175      	bne.n	80033c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_UART_Transmit+0x2c>
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e06e      	b.n	80033c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2221      	movs	r2, #33	@ 0x21
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032f2:	f7fe f88b 	bl	800140c <HAL_GetTick>
 80032f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	88fa      	ldrh	r2, [r7, #6]
 80032fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	88fa      	ldrh	r2, [r7, #6]
 8003302:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800330c:	d108      	bne.n	8003320 <HAL_UART_Transmit+0x6c>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d104      	bne.n	8003320 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	e003      	b.n	8003328 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003328:	e02e      	b.n	8003388 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2200      	movs	r2, #0
 8003332:	2180      	movs	r1, #128	@ 0x80
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 fb1f 	bl	8003978 <UART_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e03a      	b.n	80033c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10b      	bne.n	800336a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003360:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	3302      	adds	r3, #2
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	e007      	b.n	800337a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	3301      	adds	r3, #1
 8003378:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1cb      	bne.n	800332a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2200      	movs	r2, #0
 800339a:	2140      	movs	r1, #64	@ 0x40
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 faeb 	bl	8003978 <UART_WaitOnFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e006      	b.n	80033c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e000      	b.n	80033c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033c0:	2302      	movs	r3, #2
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	4613      	mov	r3, r2
 80033d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d112      	bne.n	800340a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_UART_Receive_IT+0x26>
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e00b      	b.n	800340c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	461a      	mov	r2, r3
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 fb12 	bl	8003a2a <UART_Start_Receive_IT>
 8003406:	4603      	mov	r3, r0
 8003408:	e000      	b.n	800340c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800340a:	2302      	movs	r3, #2
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b0ba      	sub	sp, #232	@ 0xe8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10f      	bne.n	800347a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800345a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_UART_IRQHandler+0x66>
 8003466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fbf2 	bl	8003c5c <UART_Receive_IT>
      return;
 8003478:	e25b      	b.n	8003932 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800347a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80de 	beq.w	8003640 <HAL_UART_IRQHandler+0x22c>
 8003484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d106      	bne.n	800349e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003494:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 80d1 	beq.w	8003640 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_UART_IRQHandler+0xae>
 80034aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ba:	f043 0201 	orr.w	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <HAL_UART_IRQHandler+0xd2>
 80034ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f043 0202 	orr.w	r2, r3, #2
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_UART_IRQHandler+0xf6>
 80034f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003502:	f043 0204 	orr.w	r2, r3, #4
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800350a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d011      	beq.n	800353a <HAL_UART_IRQHandler+0x126>
 8003516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d105      	bne.n	800352e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	f043 0208 	orr.w	r2, r3, #8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 81f2 	beq.w	8003928 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_UART_IRQHandler+0x14e>
 8003550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fb7d 	bl	8003c5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356c:	2b40      	cmp	r3, #64	@ 0x40
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <HAL_UART_IRQHandler+0x17a>
 8003586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d04f      	beq.n	800362e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fa85 	bl	8003a9e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359e:	2b40      	cmp	r3, #64	@ 0x40
 80035a0:	d141      	bne.n	8003626 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3314      	adds	r3, #20
 80035ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1d9      	bne.n	80035a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d013      	beq.n	800361e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fa:	4a7e      	ldr	r2, [pc, #504]	@ (80037f4 <HAL_UART_IRQHandler+0x3e0>)
 80035fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe f860 	bl	80016c8 <HAL_DMA_Abort_IT>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d016      	beq.n	800363c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003618:	4610      	mov	r0, r2
 800361a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	e00e      	b.n	800363c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f994 	bl	800394c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003624:	e00a      	b.n	800363c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f990 	bl	800394c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362c:	e006      	b.n	800363c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f98c 	bl	800394c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800363a:	e175      	b.n	8003928 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363c:	bf00      	nop
    return;
 800363e:	e173      	b.n	8003928 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003644:	2b01      	cmp	r3, #1
 8003646:	f040 814f 	bne.w	80038e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8148 	beq.w	80038e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8141 	beq.w	80038e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003686:	2b40      	cmp	r3, #64	@ 0x40
 8003688:	f040 80b6 	bne.w	80037f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003698:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 8145 	beq.w	800392c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036aa:	429a      	cmp	r2, r3
 80036ac:	f080 813e 	bcs.w	800392c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036c2:	f000 8088 	beq.w	80037d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800370a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1d9      	bne.n	80036c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3314      	adds	r3, #20
 8003718:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800371c:	e853 3f00 	ldrex	r3, [r3]
 8003720:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003722:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003724:	f023 0301 	bic.w	r3, r3, #1
 8003728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3314      	adds	r3, #20
 8003732:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003736:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800373a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800373e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003748:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1e1      	bne.n	8003712 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3314      	adds	r3, #20
 8003754:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003756:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003758:	e853 3f00 	ldrex	r3, [r3]
 800375c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800375e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003764:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3314      	adds	r3, #20
 800376e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003772:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003774:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003778:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e3      	bne.n	800374e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	330c      	adds	r3, #12
 800379a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037a6:	f023 0310 	bic.w	r3, r3, #16
 80037aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	330c      	adds	r3, #12
 80037b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80037b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e3      	bne.n	8003794 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fd ff09 	bl	80015e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	4619      	mov	r1, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f8b7 	bl	8003960 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037f2:	e09b      	b.n	800392c <HAL_UART_IRQHandler+0x518>
 80037f4:	08003b65 	.word	0x08003b65
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003800:	b29b      	uxth	r3, r3
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 808e 	beq.w	8003930 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8089 	beq.w	8003930 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	330c      	adds	r3, #12
 8003824:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800382e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003834:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	330c      	adds	r3, #12
 800383e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003842:	647a      	str	r2, [r7, #68]	@ 0x44
 8003844:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003848:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e3      	bne.n	800381e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3314      	adds	r3, #20
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	623b      	str	r3, [r7, #32]
   return(result);
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3314      	adds	r3, #20
 8003876:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800387a:	633a      	str	r2, [r7, #48]	@ 0x30
 800387c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e3      	bne.n	8003856 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0310 	bic.w	r3, r3, #16
 80038b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	330c      	adds	r3, #12
 80038bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80038c0:	61fa      	str	r2, [r7, #28]
 80038c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	69b9      	ldr	r1, [r7, #24]
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	e841 2300 	strex	r3, r2, [r1]
 80038cc:	617b      	str	r3, [r7, #20]
   return(result);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e3      	bne.n	800389c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038de:	4619      	mov	r1, r3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f83d 	bl	8003960 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038e6:	e023      	b.n	8003930 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d009      	beq.n	8003908 <HAL_UART_IRQHandler+0x4f4>
 80038f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f943 	bl	8003b8c <UART_Transmit_IT>
    return;
 8003906:	e014      	b.n	8003932 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00e      	beq.n	8003932 <HAL_UART_IRQHandler+0x51e>
 8003914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f983 	bl	8003c2c <UART_EndTransmit_IT>
    return;
 8003926:	e004      	b.n	8003932 <HAL_UART_IRQHandler+0x51e>
    return;
 8003928:	bf00      	nop
 800392a:	e002      	b.n	8003932 <HAL_UART_IRQHandler+0x51e>
      return;
 800392c:	bf00      	nop
 800392e:	e000      	b.n	8003932 <HAL_UART_IRQHandler+0x51e>
      return;
 8003930:	bf00      	nop
  }
}
 8003932:	37e8      	adds	r7, #232	@ 0xe8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003988:	e03b      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d037      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fd fd3b 	bl	800140c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	6a3a      	ldr	r2, [r7, #32]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e03a      	b.n	8003a22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d023      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b80      	cmp	r3, #128	@ 0x80
 80039be:	d020      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b40      	cmp	r3, #64	@ 0x40
 80039c4:	d01d      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d116      	bne.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f857 	bl	8003a9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2208      	movs	r2, #8
 80039f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e00f      	b.n	8003a22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	bf0c      	ite	eq
 8003a12:	2301      	moveq	r3, #1
 8003a14:	2300      	movne	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d0b4      	beq.n	800398a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	4613      	mov	r3, r2
 8003a36:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	88fa      	ldrh	r2, [r7, #6]
 8003a42:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2222      	movs	r2, #34	@ 0x22
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a6e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0220 	orr.w	r2, r2, #32
 8003a8e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b095      	sub	sp, #84	@ 0x54
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ac6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003acc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e5      	bne.n	8003aa6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3314      	adds	r3, #20
 8003ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003afa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e5      	bne.n	8003ada <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d119      	bne.n	8003b4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f023 0310 	bic.w	r3, r3, #16
 8003b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b36:	61ba      	str	r2, [r7, #24]
 8003b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	6979      	ldr	r1, [r7, #20]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	613b      	str	r3, [r7, #16]
   return(result);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e5      	bne.n	8003b16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b58:	bf00      	nop
 8003b5a:	3754      	adds	r7, #84	@ 0x54
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f7ff fee4 	bl	800394c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b21      	cmp	r3, #33	@ 0x21
 8003b9e:	d13e      	bne.n	8003c1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba8:	d114      	bne.n	8003bd4 <UART_Transmit_IT+0x48>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d110      	bne.n	8003bd4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	1c9a      	adds	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]
 8003bd2:	e008      	b.n	8003be6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	1c59      	adds	r1, r3, #1
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6211      	str	r1, [r2, #32]
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10f      	bne.n	8003c1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fe73 	bl	8003938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08c      	sub	sp, #48	@ 0x30
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b22      	cmp	r3, #34	@ 0x22
 8003c6e:	f040 80ae 	bne.w	8003dce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7a:	d117      	bne.n	8003cac <UART_Receive_IT+0x50>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d113      	bne.n	8003cac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca4:	1c9a      	adds	r2, r3, #2
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003caa:	e026      	b.n	8003cfa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cbe:	d007      	beq.n	8003cd0 <UART_Receive_IT+0x74>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <UART_Receive_IT+0x82>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d106      	bne.n	8003cde <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e008      	b.n	8003cf0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4619      	mov	r1, r3
 8003d08:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d15d      	bne.n	8003dca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0220 	bic.w	r2, r2, #32
 8003d1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d135      	bne.n	8003dc0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	330c      	adds	r3, #12
 8003d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	613b      	str	r3, [r7, #16]
   return(result);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f023 0310 	bic.w	r3, r3, #16
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d7a:	623a      	str	r2, [r7, #32]
 8003d7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	69f9      	ldr	r1, [r7, #28]
 8003d80:	6a3a      	ldr	r2, [r7, #32]
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e5      	bne.n	8003d5a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d10a      	bne.n	8003db2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003db6:	4619      	mov	r1, r3
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fdd1 	bl	8003960 <HAL_UARTEx_RxEventCallback>
 8003dbe:	e002      	b.n	8003dc6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7fc fe4f 	bl	8000a64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e002      	b.n	8003dd0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e000      	b.n	8003dd0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
  }
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3730      	adds	r7, #48	@ 0x30
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ddc:	b0c0      	sub	sp, #256	@ 0x100
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	68d9      	ldr	r1, [r3, #12]
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	ea40 0301 	orr.w	r3, r0, r1
 8003e00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e30:	f021 010c 	bic.w	r1, r1, #12
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e52:	6999      	ldr	r1, [r3, #24]
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	ea40 0301 	orr.w	r3, r0, r1
 8003e5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b8f      	ldr	r3, [pc, #572]	@ (80040a4 <UART_SetConfig+0x2cc>)
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d005      	beq.n	8003e78 <UART_SetConfig+0xa0>
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4b8d      	ldr	r3, [pc, #564]	@ (80040a8 <UART_SetConfig+0x2d0>)
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d104      	bne.n	8003e82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e78:	f7fe fa9a 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 8003e7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e80:	e003      	b.n	8003e8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e82:	f7fe fa81 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8003e86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e94:	f040 810c 	bne.w	80040b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ea2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ea6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	1891      	adds	r1, r2, r2
 8003eb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003eb2:	415b      	adcs	r3, r3
 8003eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003eba:	4621      	mov	r1, r4
 8003ebc:	eb12 0801 	adds.w	r8, r2, r1
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	eb43 0901 	adc.w	r9, r3, r1
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eda:	4690      	mov	r8, r2
 8003edc:	4699      	mov	r9, r3
 8003ede:	4623      	mov	r3, r4
 8003ee0:	eb18 0303 	adds.w	r3, r8, r3
 8003ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ee8:	462b      	mov	r3, r5
 8003eea:	eb49 0303 	adc.w	r3, r9, r3
 8003eee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003efe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f06:	460b      	mov	r3, r1
 8003f08:	18db      	adds	r3, r3, r3
 8003f0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	eb42 0303 	adc.w	r3, r2, r3
 8003f12:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f1c:	f7fc f9c8 	bl	80002b0 <__aeabi_uldivmod>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4b61      	ldr	r3, [pc, #388]	@ (80040ac <UART_SetConfig+0x2d4>)
 8003f26:	fba3 2302 	umull	r2, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	011c      	lsls	r4, r3, #4
 8003f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f40:	4642      	mov	r2, r8
 8003f42:	464b      	mov	r3, r9
 8003f44:	1891      	adds	r1, r2, r2
 8003f46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f48:	415b      	adcs	r3, r3
 8003f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f50:	4641      	mov	r1, r8
 8003f52:	eb12 0a01 	adds.w	sl, r2, r1
 8003f56:	4649      	mov	r1, r9
 8003f58:	eb43 0b01 	adc.w	fp, r3, r1
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f70:	4692      	mov	sl, r2
 8003f72:	469b      	mov	fp, r3
 8003f74:	4643      	mov	r3, r8
 8003f76:	eb1a 0303 	adds.w	r3, sl, r3
 8003f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f7e:	464b      	mov	r3, r9
 8003f80:	eb4b 0303 	adc.w	r3, fp, r3
 8003f84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	18db      	adds	r3, r3, r3
 8003fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	eb42 0303 	adc.w	r3, r2, r3
 8003fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003faa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fb2:	f7fc f97d 	bl	80002b0 <__aeabi_uldivmod>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80040ac <UART_SetConfig+0x2d4>)
 8003fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2264      	movs	r2, #100	@ 0x64
 8003fc6:	fb02 f303 	mul.w	r3, r2, r3
 8003fca:	1acb      	subs	r3, r1, r3
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fd2:	4b36      	ldr	r3, [pc, #216]	@ (80040ac <UART_SetConfig+0x2d4>)
 8003fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fe0:	441c      	add	r4, r3
 8003fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ff0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	464b      	mov	r3, r9
 8003ff8:	1891      	adds	r1, r2, r2
 8003ffa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ffc:	415b      	adcs	r3, r3
 8003ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004004:	4641      	mov	r1, r8
 8004006:	1851      	adds	r1, r2, r1
 8004008:	6339      	str	r1, [r7, #48]	@ 0x30
 800400a:	4649      	mov	r1, r9
 800400c:	414b      	adcs	r3, r1
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800401c:	4659      	mov	r1, fp
 800401e:	00cb      	lsls	r3, r1, #3
 8004020:	4651      	mov	r1, sl
 8004022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004026:	4651      	mov	r1, sl
 8004028:	00ca      	lsls	r2, r1, #3
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	4603      	mov	r3, r0
 8004030:	4642      	mov	r2, r8
 8004032:	189b      	adds	r3, r3, r2
 8004034:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004038:	464b      	mov	r3, r9
 800403a:	460a      	mov	r2, r1
 800403c:	eb42 0303 	adc.w	r3, r2, r3
 8004040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004050:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004054:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004058:	460b      	mov	r3, r1
 800405a:	18db      	adds	r3, r3, r3
 800405c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800405e:	4613      	mov	r3, r2
 8004060:	eb42 0303 	adc.w	r3, r2, r3
 8004064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800406a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800406e:	f7fc f91f 	bl	80002b0 <__aeabi_uldivmod>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4b0d      	ldr	r3, [pc, #52]	@ (80040ac <UART_SetConfig+0x2d4>)
 8004078:	fba3 1302 	umull	r1, r3, r3, r2
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2164      	movs	r1, #100	@ 0x64
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	3332      	adds	r3, #50	@ 0x32
 800408a:	4a08      	ldr	r2, [pc, #32]	@ (80040ac <UART_SetConfig+0x2d4>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	f003 0207 	and.w	r2, r3, #7
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4422      	add	r2, r4
 800409e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040a0:	e106      	b.n	80042b0 <UART_SetConfig+0x4d8>
 80040a2:	bf00      	nop
 80040a4:	40011000 	.word	0x40011000
 80040a8:	40011400 	.word	0x40011400
 80040ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040c2:	4642      	mov	r2, r8
 80040c4:	464b      	mov	r3, r9
 80040c6:	1891      	adds	r1, r2, r2
 80040c8:	6239      	str	r1, [r7, #32]
 80040ca:	415b      	adcs	r3, r3
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040d2:	4641      	mov	r1, r8
 80040d4:	1854      	adds	r4, r2, r1
 80040d6:	4649      	mov	r1, r9
 80040d8:	eb43 0501 	adc.w	r5, r3, r1
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	00eb      	lsls	r3, r5, #3
 80040e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ea:	00e2      	lsls	r2, r4, #3
 80040ec:	4614      	mov	r4, r2
 80040ee:	461d      	mov	r5, r3
 80040f0:	4643      	mov	r3, r8
 80040f2:	18e3      	adds	r3, r4, r3
 80040f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040f8:	464b      	mov	r3, r9
 80040fa:	eb45 0303 	adc.w	r3, r5, r3
 80040fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800410e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800411e:	4629      	mov	r1, r5
 8004120:	008b      	lsls	r3, r1, #2
 8004122:	4621      	mov	r1, r4
 8004124:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004128:	4621      	mov	r1, r4
 800412a:	008a      	lsls	r2, r1, #2
 800412c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004130:	f7fc f8be 	bl	80002b0 <__aeabi_uldivmod>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4b60      	ldr	r3, [pc, #384]	@ (80042bc <UART_SetConfig+0x4e4>)
 800413a:	fba3 2302 	umull	r2, r3, r3, r2
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	011c      	lsls	r4, r3, #4
 8004142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004146:	2200      	movs	r2, #0
 8004148:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800414c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004150:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	1891      	adds	r1, r2, r2
 800415a:	61b9      	str	r1, [r7, #24]
 800415c:	415b      	adcs	r3, r3
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004164:	4641      	mov	r1, r8
 8004166:	1851      	adds	r1, r2, r1
 8004168:	6139      	str	r1, [r7, #16]
 800416a:	4649      	mov	r1, r9
 800416c:	414b      	adcs	r3, r1
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800417c:	4659      	mov	r1, fp
 800417e:	00cb      	lsls	r3, r1, #3
 8004180:	4651      	mov	r1, sl
 8004182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004186:	4651      	mov	r1, sl
 8004188:	00ca      	lsls	r2, r1, #3
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	4603      	mov	r3, r0
 8004190:	4642      	mov	r2, r8
 8004192:	189b      	adds	r3, r3, r2
 8004194:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004198:	464b      	mov	r3, r9
 800419a:	460a      	mov	r2, r1
 800419c:	eb42 0303 	adc.w	r3, r2, r3
 80041a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041bc:	4649      	mov	r1, r9
 80041be:	008b      	lsls	r3, r1, #2
 80041c0:	4641      	mov	r1, r8
 80041c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c6:	4641      	mov	r1, r8
 80041c8:	008a      	lsls	r2, r1, #2
 80041ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041ce:	f7fc f86f 	bl	80002b0 <__aeabi_uldivmod>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	4b38      	ldr	r3, [pc, #224]	@ (80042bc <UART_SetConfig+0x4e4>)
 80041da:	fba3 2301 	umull	r2, r3, r3, r1
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2264      	movs	r2, #100	@ 0x64
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	1acb      	subs	r3, r1, r3
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	3332      	adds	r3, #50	@ 0x32
 80041ec:	4a33      	ldr	r2, [pc, #204]	@ (80042bc <UART_SetConfig+0x4e4>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041f8:	441c      	add	r4, r3
 80041fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041fe:	2200      	movs	r2, #0
 8004200:	673b      	str	r3, [r7, #112]	@ 0x70
 8004202:	677a      	str	r2, [r7, #116]	@ 0x74
 8004204:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004208:	4642      	mov	r2, r8
 800420a:	464b      	mov	r3, r9
 800420c:	1891      	adds	r1, r2, r2
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	415b      	adcs	r3, r3
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004218:	4641      	mov	r1, r8
 800421a:	1851      	adds	r1, r2, r1
 800421c:	6039      	str	r1, [r7, #0]
 800421e:	4649      	mov	r1, r9
 8004220:	414b      	adcs	r3, r1
 8004222:	607b      	str	r3, [r7, #4]
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004230:	4659      	mov	r1, fp
 8004232:	00cb      	lsls	r3, r1, #3
 8004234:	4651      	mov	r1, sl
 8004236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423a:	4651      	mov	r1, sl
 800423c:	00ca      	lsls	r2, r1, #3
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	4603      	mov	r3, r0
 8004244:	4642      	mov	r2, r8
 8004246:	189b      	adds	r3, r3, r2
 8004248:	66bb      	str	r3, [r7, #104]	@ 0x68
 800424a:	464b      	mov	r3, r9
 800424c:	460a      	mov	r2, r1
 800424e:	eb42 0303 	adc.w	r3, r2, r3
 8004252:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	663b      	str	r3, [r7, #96]	@ 0x60
 800425e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800426c:	4649      	mov	r1, r9
 800426e:	008b      	lsls	r3, r1, #2
 8004270:	4641      	mov	r1, r8
 8004272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004276:	4641      	mov	r1, r8
 8004278:	008a      	lsls	r2, r1, #2
 800427a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800427e:	f7fc f817 	bl	80002b0 <__aeabi_uldivmod>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <UART_SetConfig+0x4e4>)
 8004288:	fba3 1302 	umull	r1, r3, r3, r2
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	2164      	movs	r1, #100	@ 0x64
 8004290:	fb01 f303 	mul.w	r3, r1, r3
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	3332      	adds	r3, #50	@ 0x32
 800429a:	4a08      	ldr	r2, [pc, #32]	@ (80042bc <UART_SetConfig+0x4e4>)
 800429c:	fba2 2303 	umull	r2, r3, r2, r3
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	f003 020f 	and.w	r2, r3, #15
 80042a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4422      	add	r2, r4
 80042ae:	609a      	str	r2, [r3, #8]
}
 80042b0:	bf00      	nop
 80042b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042b6:	46bd      	mov	sp, r7
 80042b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042bc:	51eb851f 	.word	0x51eb851f

080042c0 <__NVIC_SetPriority>:
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	6039      	str	r1, [r7, #0]
 80042ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	db0a      	blt.n	80042ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	490c      	ldr	r1, [pc, #48]	@ (800430c <__NVIC_SetPriority+0x4c>)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	0112      	lsls	r2, r2, #4
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	440b      	add	r3, r1
 80042e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80042e8:	e00a      	b.n	8004300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4908      	ldr	r1, [pc, #32]	@ (8004310 <__NVIC_SetPriority+0x50>)
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	3b04      	subs	r3, #4
 80042f8:	0112      	lsls	r2, r2, #4
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	440b      	add	r3, r1
 80042fe:	761a      	strb	r2, [r3, #24]
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	e000e100 	.word	0xe000e100
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004318:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <SysTick_Handler+0x1c>)
 800431a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800431c:	f002 f896 	bl	800644c <xTaskGetSchedulerState>
 8004320:	4603      	mov	r3, r0
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004326:	f002 fec7 	bl	80070b8 <xPortSysTickHandler>
  }
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	e000e010 	.word	0xe000e010

08004334 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004338:	2100      	movs	r1, #0
 800433a:	f06f 0004 	mvn.w	r0, #4
 800433e:	f7ff ffbf 	bl	80042c0 <__NVIC_SetPriority>
#endif
}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800434e:	f3ef 8305 	mrs	r3, IPSR
 8004352:	603b      	str	r3, [r7, #0]
  return(result);
 8004354:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800435a:	f06f 0305 	mvn.w	r3, #5
 800435e:	607b      	str	r3, [r7, #4]
 8004360:	e00c      	b.n	800437c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004362:	4b0a      	ldr	r3, [pc, #40]	@ (800438c <osKernelInitialize+0x44>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d105      	bne.n	8004376 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800436a:	4b08      	ldr	r3, [pc, #32]	@ (800438c <osKernelInitialize+0x44>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004370:	2300      	movs	r3, #0
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	e002      	b.n	800437c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800437c:	687b      	ldr	r3, [r7, #4]
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	2000027c 	.word	0x2000027c

08004390 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004396:	f3ef 8305 	mrs	r3, IPSR
 800439a:	603b      	str	r3, [r7, #0]
  return(result);
 800439c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80043a2:	f06f 0305 	mvn.w	r3, #5
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	e010      	b.n	80043cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043aa:	4b0b      	ldr	r3, [pc, #44]	@ (80043d8 <osKernelStart+0x48>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d109      	bne.n	80043c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043b2:	f7ff ffbf 	bl	8004334 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043b6:	4b08      	ldr	r3, [pc, #32]	@ (80043d8 <osKernelStart+0x48>)
 80043b8:	2202      	movs	r2, #2
 80043ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043bc:	f001 fb56 	bl	8005a6c <vTaskStartScheduler>
      stat = osOK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	607b      	str	r3, [r7, #4]
 80043c4:	e002      	b.n	80043cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043cc:	687b      	ldr	r3, [r7, #4]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	2000027c 	.word	0x2000027c

080043dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08e      	sub	sp, #56	@ 0x38
 80043e0:	af04      	add	r7, sp, #16
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ec:	f3ef 8305 	mrs	r3, IPSR
 80043f0:	617b      	str	r3, [r7, #20]
  return(result);
 80043f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d17e      	bne.n	80044f6 <osThreadNew+0x11a>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d07b      	beq.n	80044f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043fe:	2380      	movs	r3, #128	@ 0x80
 8004400:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004402:	2318      	movs	r3, #24
 8004404:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d045      	beq.n	80044a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <osThreadNew+0x48>
        name = attr->name;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <osThreadNew+0x6e>
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	2b38      	cmp	r3, #56	@ 0x38
 800443c:	d805      	bhi.n	800444a <osThreadNew+0x6e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <osThreadNew+0x72>
        return (NULL);
 800444a:	2300      	movs	r3, #0
 800444c:	e054      	b.n	80044f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	089b      	lsrs	r3, r3, #2
 800445c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00e      	beq.n	8004484 <osThreadNew+0xa8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b5b      	cmp	r3, #91	@ 0x5b
 800446c:	d90a      	bls.n	8004484 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004472:	2b00      	cmp	r3, #0
 8004474:	d006      	beq.n	8004484 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <osThreadNew+0xa8>
        mem = 1;
 800447e:	2301      	movs	r3, #1
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e010      	b.n	80044a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10c      	bne.n	80044a6 <osThreadNew+0xca>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d108      	bne.n	80044a6 <osThreadNew+0xca>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d104      	bne.n	80044a6 <osThreadNew+0xca>
          mem = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	e001      	b.n	80044a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d110      	bne.n	80044ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044b4:	9202      	str	r2, [sp, #8]
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	6a3a      	ldr	r2, [r7, #32]
 80044c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f001 f8f6 	bl	80056b4 <xTaskCreateStatic>
 80044c8:	4603      	mov	r3, r0
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	e013      	b.n	80044f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d110      	bne.n	80044f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	f107 0310 	add.w	r3, r7, #16
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f001 f944 	bl	8005774 <xTaskCreate>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d001      	beq.n	80044f6 <osThreadNew+0x11a>
            hTask = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044f6:	693b      	ldr	r3, [r7, #16]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3728      	adds	r7, #40	@ 0x28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004508:	f3ef 8305 	mrs	r3, IPSR
 800450c:	60bb      	str	r3, [r7, #8]
  return(result);
 800450e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <osDelay+0x1c>
    stat = osErrorISR;
 8004514:	f06f 0305 	mvn.w	r3, #5
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	e007      	b.n	800452c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f001 fa6a 	bl	8005a00 <vTaskDelay>
    }
  }

  return (stat);
 800452c:	68fb      	ldr	r3, [r7, #12]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004542:	f3ef 8305 	mrs	r3, IPSR
 8004546:	60fb      	str	r3, [r7, #12]
  return(result);
 8004548:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800454a:	2b00      	cmp	r3, #0
 800454c:	d12d      	bne.n	80045aa <osEventFlagsNew+0x74>
    mem = -1;
 800454e:	f04f 33ff 	mov.w	r3, #4294967295
 8004552:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d015      	beq.n	8004586 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d006      	beq.n	8004570 <osEventFlagsNew+0x3a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b1f      	cmp	r3, #31
 8004568:	d902      	bls.n	8004570 <osEventFlagsNew+0x3a>
        mem = 1;
 800456a:	2301      	movs	r3, #1
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	e00c      	b.n	800458a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d108      	bne.n	800458a <osEventFlagsNew+0x54>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <osEventFlagsNew+0x54>
          mem = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	e001      	b.n	800458a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d106      	bne.n	800459e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 f8e9 	bl	800476c <xEventGroupCreateStatic>
 800459a:	6178      	str	r0, [r7, #20]
 800459c:	e005      	b.n	80045aa <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80045a4:	f000 f91b 	bl	80047de <xEventGroupCreate>
 80045a8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80045aa:	697b      	ldr	r3, [r7, #20]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <osEventFlagsSet+0x1c>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045ce:	d303      	bcc.n	80045d8 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 80045d0:	f06f 0303 	mvn.w	r3, #3
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	e028      	b.n	800462a <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045d8:	f3ef 8305 	mrs	r3, IPSR
 80045dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80045de:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01d      	beq.n	8004620 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80045e8:	f107 0308 	add.w	r3, r7, #8
 80045ec:	461a      	mov	r2, r3
 80045ee:	6839      	ldr	r1, [r7, #0]
 80045f0:	6938      	ldr	r0, [r7, #16]
 80045f2:	f000 fa9d 	bl	8004b30 <xEventGroupSetBitsFromISR>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d103      	bne.n	8004604 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 80045fc:	f06f 0302 	mvn.w	r3, #2
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	e012      	b.n	800462a <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00d      	beq.n	800462a <osEventFlagsSet+0x76>
 800460e:	4b09      	ldr	r3, [pc, #36]	@ (8004634 <osEventFlagsSet+0x80>)
 8004610:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	e004      	b.n	800462a <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004620:	6839      	ldr	r1, [r7, #0]
 8004622:	6938      	ldr	r0, [r7, #16]
 8004624:	f000 f9c8 	bl	80049b8 <xEventGroupSetBits>
 8004628:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800462a:	697b      	ldr	r3, [r7, #20]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	e000ed04 	.word	0xe000ed04

08004638 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b08c      	sub	sp, #48	@ 0x30
 800463c:	af02      	add	r7, sp, #8
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <osEventFlagsWait+0x20>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004656:	d303      	bcc.n	8004660 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8004658:	f06f 0303 	mvn.w	r3, #3
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	e04b      	b.n	80046f8 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004660:	f3ef 8305 	mrs	r3, IPSR
 8004664:	617b      	str	r3, [r7, #20]
  return(result);
 8004666:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 800466c:	f06f 0305 	mvn.w	r3, #5
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	e041      	b.n	80046f8 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800467e:	2301      	movs	r3, #1
 8004680:	627b      	str	r3, [r7, #36]	@ 0x24
 8004682:	e001      	b.n	8004688 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8004684:	2300      	movs	r3, #0
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8004692:	2300      	movs	r3, #0
 8004694:	623b      	str	r3, [r7, #32]
 8004696:	e001      	b.n	800469c <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8004698:	2301      	movs	r3, #1
 800469a:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	6a3a      	ldr	r2, [r7, #32]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	69b8      	ldr	r0, [r7, #24]
 80046a8:	f000 f8b4 	bl	8004814 <xEventGroupWaitBits>
 80046ac:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d010      	beq.n	80046da <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	4013      	ands	r3, r2
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d019      	beq.n	80046f8 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 80046ca:	f06f 0301 	mvn.w	r3, #1
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	e012      	b.n	80046f8 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80046d2:	f06f 0302 	mvn.w	r3, #2
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	e00e      	b.n	80046f8 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d109      	bne.n	80046f8 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 80046ea:	f06f 0301 	mvn.w	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
 80046f0:	e002      	b.n	80046f8 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80046f2:	f06f 0302 	mvn.w	r3, #2
 80046f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80046f8:	69fb      	ldr	r3, [r7, #28]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3728      	adds	r7, #40	@ 0x28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a07      	ldr	r2, [pc, #28]	@ (8004730 <vApplicationGetIdleTaskMemory+0x2c>)
 8004714:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4a06      	ldr	r2, [pc, #24]	@ (8004734 <vApplicationGetIdleTaskMemory+0x30>)
 800471a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2280      	movs	r2, #128	@ 0x80
 8004720:	601a      	str	r2, [r3, #0]
}
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	20000280 	.word	0x20000280
 8004734:	200002dc 	.word	0x200002dc

08004738 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a07      	ldr	r2, [pc, #28]	@ (8004764 <vApplicationGetTimerTaskMemory+0x2c>)
 8004748:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4a06      	ldr	r2, [pc, #24]	@ (8004768 <vApplicationGetTimerTaskMemory+0x30>)
 800474e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004756:	601a      	str	r2, [r3, #0]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	200004dc 	.word	0x200004dc
 8004768:	20000538 	.word	0x20000538

0800476c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800478c:	bf00      	nop
 800478e:	bf00      	nop
 8004790:	e7fd      	b.n	800478e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004792:	2320      	movs	r3, #32
 8004794:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b20      	cmp	r3, #32
 800479a:	d00b      	beq.n	80047b4 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	60fb      	str	r3, [r7, #12]
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	e7fd      	b.n	80047b0 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f9c5 	bl	8004b58 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2201      	movs	r2, #1
 80047d2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80047d4:	697b      	ldr	r3, [r7, #20]
	}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80047e4:	2020      	movs	r0, #32
 80047e6:	f002 fcf9 	bl	80071dc <pvPortMalloc>
 80047ea:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3304      	adds	r3, #4
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 f9ab 	bl	8004b58 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004808:	687b      	ldr	r3, [r7, #4]
	}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b090      	sub	sp, #64	@ 0x40
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800482a:	2300      	movs	r3, #0
 800482c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10b      	bne.n	800484c <xEventGroupWaitBits+0x38>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	623b      	str	r3, [r7, #32]
}
 8004846:	bf00      	nop
 8004848:	bf00      	nop
 800484a:	e7fd      	b.n	8004848 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004852:	d30b      	bcc.n	800486c <xEventGroupWaitBits+0x58>
	__asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	61fb      	str	r3, [r7, #28]
}
 8004866:	bf00      	nop
 8004868:	bf00      	nop
 800486a:	e7fd      	b.n	8004868 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <xEventGroupWaitBits+0x76>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	61bb      	str	r3, [r7, #24]
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	e7fd      	b.n	8004886 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800488a:	f001 fddf 	bl	800644c <xTaskGetSchedulerState>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <xEventGroupWaitBits+0x86>
 8004894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <xEventGroupWaitBits+0x8a>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <xEventGroupWaitBits+0x8c>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10b      	bne.n	80048bc <xEventGroupWaitBits+0xa8>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	617b      	str	r3, [r7, #20]
}
 80048b6:	bf00      	nop
 80048b8:	bf00      	nop
 80048ba:	e7fd      	b.n	80048b8 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80048bc:	f001 f93e 	bl	8005b3c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80048c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048cc:	f000 f90d 	bl	8004aea <prvTestWaitCondition>
 80048d0:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80048d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00e      	beq.n	80048f6 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80048d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048da:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d028      	beq.n	8004938 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80048e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	401a      	ands	r2, r3
 80048f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e020      	b.n	8004938 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80048f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d104      	bne.n	8004906 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80048fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8004900:	2301      	movs	r3, #1
 8004902:	633b      	str	r3, [r7, #48]	@ 0x30
 8004904:	e018      	b.n	8004938 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800490c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004912:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800491a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004920:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004924:	1d18      	adds	r0, r3, #4
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492a:	4313      	orrs	r3, r2
 800492c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800492e:	4619      	mov	r1, r3
 8004930:	f001 fafe 	bl	8005f30 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004938:	f001 f90e 	bl	8005b58 <xTaskResumeAll>
 800493c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800493e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004940:	2b00      	cmp	r3, #0
 8004942:	d031      	beq.n	80049a8 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	2b00      	cmp	r3, #0
 8004948:	d107      	bne.n	800495a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800494a:	4b1a      	ldr	r3, [pc, #104]	@ (80049b4 <xEventGroupWaitBits+0x1a0>)
 800494c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800495a:	f001 fe05 	bl	8006568 <uxTaskResetEventItemValue>
 800495e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d11a      	bne.n	80049a0 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800496a:	f002 fb15 	bl	8006f98 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800496e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800497a:	f000 f8b6 	bl	8004aea <prvTestWaitCondition>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d009      	beq.n	8004998 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d006      	beq.n	8004998 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800498a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	43db      	mvns	r3, r3
 8004992:	401a      	ands	r2, r3
 8004994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004996:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004998:	2301      	movs	r3, #1
 800499a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800499c:	f002 fb2e 	bl	8006ffc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80049a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80049a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80049a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3740      	adds	r7, #64	@ 0x40
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	e000ed04 	.word	0xe000ed04

080049b8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08e      	sub	sp, #56	@ 0x38
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80049c2:	2300      	movs	r3, #0
 80049c4:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80049ca:	2300      	movs	r3, #0
 80049cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10b      	bne.n	80049ec <xEventGroupSetBits+0x34>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	613b      	str	r3, [r7, #16]
}
 80049e6:	bf00      	nop
 80049e8:	bf00      	nop
 80049ea:	e7fd      	b.n	80049e8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049f2:	d30b      	bcc.n	8004a0c <xEventGroupSetBits+0x54>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	60fb      	str	r3, [r7, #12]
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0e:	3304      	adds	r3, #4
 8004a10:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	3308      	adds	r3, #8
 8004a16:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004a18:	f001 f890 	bl	8005b3c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004a2e:	e03c      	b.n	8004aaa <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004a46:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a4e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d108      	bne.n	8004a6c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00b      	beq.n	8004a7e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8004a66:	2301      	movs	r3, #1
 8004a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a6a:	e008      	b.n	8004a7e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	4013      	ands	r3, r2
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d101      	bne.n	8004a7e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d010      	beq.n	8004aa6 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004aa2:	f001 fb13 	bl	80060cc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8004aaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d1be      	bne.n	8004a30 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	401a      	ands	r2, r3
 8004abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abe:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004ac0:	f001 f84a 	bl	8005b58 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3738      	adds	r7, #56	@ 0x38
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004ada:	6839      	ldr	r1, [r7, #0]
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff6b 	bl	80049b8 <xEventGroupSetBits>
}
 8004ae2:	bf00      	nop
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004aea:	b480      	push	{r7}
 8004aec:	b087      	sub	sp, #28
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	e007      	b.n	8004b20 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4013      	ands	r3, r2
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d101      	bne.n	8004b20 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004b20:	697b      	ldr	r3, [r7, #20]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	68f9      	ldr	r1, [r7, #12]
 8004b42:	4804      	ldr	r0, [pc, #16]	@ (8004b54 <xEventGroupSetBitsFromISR+0x24>)
 8004b44:	f002 f8d6 	bl	8006cf4 <xTimerPendFunctionCallFromISR>
 8004b48:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004b4a:	697b      	ldr	r3, [r7, #20]
	}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	08004ad1 	.word	0x08004ad1

08004b58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f103 0208 	add.w	r2, r3, #8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f103 0208 	add.w	r2, r3, #8
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f103 0208 	add.w	r2, r3, #8
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	601a      	str	r2, [r3, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d103      	bne.n	8004c1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	e00c      	b.n	8004c34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	e002      	b.n	8004c28 <vListInsert+0x2e>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d2f6      	bcs.n	8004c22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	601a      	str	r2, [r3, #0]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6892      	ldr	r2, [r2, #8]
 8004c82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6852      	ldr	r2, [r2, #4]
 8004c8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d103      	bne.n	8004ca0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	1e5a      	subs	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <xQueueGenericReset+0x2c>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	60bb      	str	r3, [r7, #8]
}
 8004ce6:	bf00      	nop
 8004ce8:	bf00      	nop
 8004cea:	e7fd      	b.n	8004ce8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cec:	f002 f954 	bl	8006f98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf8:	68f9      	ldr	r1, [r7, #12]
 8004cfa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	441a      	add	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	68f9      	ldr	r1, [r7, #12]
 8004d20:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d22:	fb01 f303 	mul.w	r3, r1, r3
 8004d26:	441a      	add	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	22ff      	movs	r2, #255	@ 0xff
 8004d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	22ff      	movs	r2, #255	@ 0xff
 8004d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d114      	bne.n	8004d6c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d01a      	beq.n	8004d80 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3310      	adds	r3, #16
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 f958 	bl	8006004 <xTaskRemoveFromEventList>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d012      	beq.n	8004d80 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <xQueueGenericReset+0xd0>)
 8004d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	e009      	b.n	8004d80 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3310      	adds	r3, #16
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fef1 	bl	8004b58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3324      	adds	r3, #36	@ 0x24
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff feec 	bl	8004b58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d80:	f002 f93c 	bl	8006ffc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d84:	2301      	movs	r3, #1
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08e      	sub	sp, #56	@ 0x38
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10b      	bne.n	8004dc0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	e7fd      	b.n	8004dbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10b      	bne.n	8004dde <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	e7fd      	b.n	8004dda <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <xQueueGenericCreateStatic+0x56>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <xQueueGenericCreateStatic+0x5a>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <xQueueGenericCreateStatic+0x5c>
 8004dee:	2300      	movs	r3, #0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	623b      	str	r3, [r7, #32]
}
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
 8004e0a:	e7fd      	b.n	8004e08 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <xQueueGenericCreateStatic+0x84>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <xQueueGenericCreateStatic+0x88>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <xQueueGenericCreateStatic+0x8a>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10b      	bne.n	8004e3a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	61fb      	str	r3, [r7, #28]
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	e7fd      	b.n	8004e36 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e3a:	2350      	movs	r3, #80	@ 0x50
 8004e3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b50      	cmp	r3, #80	@ 0x50
 8004e42:	d00b      	beq.n	8004e5c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	61bb      	str	r3, [r7, #24]
}
 8004e56:	bf00      	nop
 8004e58:	bf00      	nop
 8004e5a:	e7fd      	b.n	8004e58 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00d      	beq.n	8004e84 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e70:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 f805 	bl	8004e8e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3730      	adds	r7, #48	@ 0x30
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d103      	bne.n	8004eaa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e002      	b.n	8004eb0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	69b8      	ldr	r0, [r7, #24]
 8004ec0:	f7ff fefe 	bl	8004cc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08e      	sub	sp, #56	@ 0x38
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10b      	bne.n	8004f08 <xQueueGenericSend+0x34>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f02:	bf00      	nop
 8004f04:	bf00      	nop
 8004f06:	e7fd      	b.n	8004f04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d103      	bne.n	8004f16 <xQueueGenericSend+0x42>
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <xQueueGenericSend+0x46>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <xQueueGenericSend+0x48>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10b      	bne.n	8004f38 <xQueueGenericSend+0x64>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f32:	bf00      	nop
 8004f34:	bf00      	nop
 8004f36:	e7fd      	b.n	8004f34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d103      	bne.n	8004f46 <xQueueGenericSend+0x72>
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <xQueueGenericSend+0x76>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <xQueueGenericSend+0x78>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <xQueueGenericSend+0x94>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	623b      	str	r3, [r7, #32]
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	e7fd      	b.n	8004f64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f68:	f001 fa70 	bl	800644c <xTaskGetSchedulerState>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d102      	bne.n	8004f78 <xQueueGenericSend+0xa4>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <xQueueGenericSend+0xa8>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <xQueueGenericSend+0xaa>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10b      	bne.n	8004f9a <xQueueGenericSend+0xc6>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	61fb      	str	r3, [r7, #28]
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	e7fd      	b.n	8004f96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f9a:	f001 fffd 	bl	8006f98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d302      	bcc.n	8004fb0 <xQueueGenericSend+0xdc>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d129      	bne.n	8005004 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fb6:	f000 fa0f 	bl	80053d8 <prvCopyDataToQueue>
 8004fba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d010      	beq.n	8004fe6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc6:	3324      	adds	r3, #36	@ 0x24
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 f81b 	bl	8006004 <xTaskRemoveFromEventList>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d013      	beq.n	8004ffc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80050d4 <xQueueGenericSend+0x200>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	e00a      	b.n	8004ffc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d007      	beq.n	8004ffc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fec:	4b39      	ldr	r3, [pc, #228]	@ (80050d4 <xQueueGenericSend+0x200>)
 8004fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ffc:	f001 fffe 	bl	8006ffc <vPortExitCritical>
				return pdPASS;
 8005000:	2301      	movs	r3, #1
 8005002:	e063      	b.n	80050cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800500a:	f001 fff7 	bl	8006ffc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800500e:	2300      	movs	r3, #0
 8005010:	e05c      	b.n	80050cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005014:	2b00      	cmp	r3, #0
 8005016:	d106      	bne.n	8005026 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005018:	f107 0314 	add.w	r3, r7, #20
 800501c:	4618      	mov	r0, r3
 800501e:	f001 f8b9 	bl	8006194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005022:	2301      	movs	r3, #1
 8005024:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005026:	f001 ffe9 	bl	8006ffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800502a:	f000 fd87 	bl	8005b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800502e:	f001 ffb3 	bl	8006f98 <vPortEnterCritical>
 8005032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005038:	b25b      	sxtb	r3, r3
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503e:	d103      	bne.n	8005048 <xQueueGenericSend+0x174>
 8005040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800504e:	b25b      	sxtb	r3, r3
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005054:	d103      	bne.n	800505e <xQueueGenericSend+0x18a>
 8005056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800505e:	f001 ffcd 	bl	8006ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005062:	1d3a      	adds	r2, r7, #4
 8005064:	f107 0314 	add.w	r3, r7, #20
 8005068:	4611      	mov	r1, r2
 800506a:	4618      	mov	r0, r3
 800506c:	f001 f8a8 	bl	80061c0 <xTaskCheckForTimeOut>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d124      	bne.n	80050c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005076:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005078:	f000 faa6 	bl	80055c8 <prvIsQueueFull>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d018      	beq.n	80050b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005084:	3310      	adds	r3, #16
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f000 ff2a 	bl	8005ee4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005090:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005092:	f000 fa31 	bl	80054f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005096:	f000 fd5f 	bl	8005b58 <xTaskResumeAll>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	f47f af7c 	bne.w	8004f9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80050a2:	4b0c      	ldr	r3, [pc, #48]	@ (80050d4 <xQueueGenericSend+0x200>)
 80050a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	e772      	b.n	8004f9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050b6:	f000 fa1f 	bl	80054f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050ba:	f000 fd4d 	bl	8005b58 <xTaskResumeAll>
 80050be:	e76c      	b.n	8004f9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050c2:	f000 fa19 	bl	80054f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050c6:	f000 fd47 	bl	8005b58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3738      	adds	r7, #56	@ 0x38
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	e000ed04 	.word	0xe000ed04

080050d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b090      	sub	sp, #64	@ 0x40
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80050ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	e7fd      	b.n	8005104 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d103      	bne.n	8005116 <xQueueGenericSendFromISR+0x3e>
 800510e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <xQueueGenericSendFromISR+0x42>
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <xQueueGenericSendFromISR+0x44>
 800511a:	2300      	movs	r3, #0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10b      	bne.n	8005138 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005132:	bf00      	nop
 8005134:	bf00      	nop
 8005136:	e7fd      	b.n	8005134 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d103      	bne.n	8005146 <xQueueGenericSendFromISR+0x6e>
 800513e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <xQueueGenericSendFromISR+0x72>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <xQueueGenericSendFromISR+0x74>
 800514a:	2300      	movs	r3, #0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	623b      	str	r3, [r7, #32]
}
 8005162:	bf00      	nop
 8005164:	bf00      	nop
 8005166:	e7fd      	b.n	8005164 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005168:	f001 fff6 	bl	8007158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800516c:	f3ef 8211 	mrs	r2, BASEPRI
 8005170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	61fa      	str	r2, [r7, #28]
 8005182:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005184:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005186:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800518c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005190:	429a      	cmp	r2, r3
 8005192:	d302      	bcc.n	800519a <xQueueGenericSendFromISR+0xc2>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d12f      	bne.n	80051fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800519a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80051b0:	f000 f912 	bl	80053d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d112      	bne.n	80051e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d016      	beq.n	80051f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c8:	3324      	adds	r3, #36	@ 0x24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 ff1a 	bl	8006004 <xTaskRemoveFromEventList>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00e      	beq.n	80051f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00b      	beq.n	80051f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	e007      	b.n	80051f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80051e8:	3301      	adds	r3, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	b25a      	sxtb	r2, r3
 80051ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80051f4:	2301      	movs	r3, #1
 80051f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80051f8:	e001      	b.n	80051fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005200:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005208:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800520a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800520c:	4618      	mov	r0, r3
 800520e:	3740      	adds	r7, #64	@ 0x40
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08c      	sub	sp, #48	@ 0x30
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005220:	2300      	movs	r3, #0
 8005222:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10b      	bne.n	8005246 <xQueueReceive+0x32>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	623b      	str	r3, [r7, #32]
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	e7fd      	b.n	8005242 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d103      	bne.n	8005254 <xQueueReceive+0x40>
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <xQueueReceive+0x44>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <xQueueReceive+0x46>
 8005258:	2300      	movs	r3, #0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10b      	bne.n	8005276 <xQueueReceive+0x62>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	61fb      	str	r3, [r7, #28]
}
 8005270:	bf00      	nop
 8005272:	bf00      	nop
 8005274:	e7fd      	b.n	8005272 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005276:	f001 f8e9 	bl	800644c <xTaskGetSchedulerState>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d102      	bne.n	8005286 <xQueueReceive+0x72>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <xQueueReceive+0x76>
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <xQueueReceive+0x78>
 800528a:	2300      	movs	r3, #0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10b      	bne.n	80052a8 <xQueueReceive+0x94>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	61bb      	str	r3, [r7, #24]
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	e7fd      	b.n	80052a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052a8:	f001 fe76 	bl	8006f98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01f      	beq.n	80052f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052bc:	f000 f8f6 	bl	80054ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	1e5a      	subs	r2, r3, #1
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00f      	beq.n	80052f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d2:	3310      	adds	r3, #16
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fe95 	bl	8006004 <xTaskRemoveFromEventList>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052e0:	4b3c      	ldr	r3, [pc, #240]	@ (80053d4 <xQueueReceive+0x1c0>)
 80052e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052f0:	f001 fe84 	bl	8006ffc <vPortExitCritical>
				return pdPASS;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e069      	b.n	80053cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d103      	bne.n	8005306 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052fe:	f001 fe7d 	bl	8006ffc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005302:	2300      	movs	r3, #0
 8005304:	e062      	b.n	80053cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005308:	2b00      	cmp	r3, #0
 800530a:	d106      	bne.n	800531a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800530c:	f107 0310 	add.w	r3, r7, #16
 8005310:	4618      	mov	r0, r3
 8005312:	f000 ff3f 	bl	8006194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005316:	2301      	movs	r3, #1
 8005318:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800531a:	f001 fe6f 	bl	8006ffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800531e:	f000 fc0d 	bl	8005b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005322:	f001 fe39 	bl	8006f98 <vPortEnterCritical>
 8005326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800532c:	b25b      	sxtb	r3, r3
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d103      	bne.n	800533c <xQueueReceive+0x128>
 8005334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800533c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005342:	b25b      	sxtb	r3, r3
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005348:	d103      	bne.n	8005352 <xQueueReceive+0x13e>
 800534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005352:	f001 fe53 	bl	8006ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005356:	1d3a      	adds	r2, r7, #4
 8005358:	f107 0310 	add.w	r3, r7, #16
 800535c:	4611      	mov	r1, r2
 800535e:	4618      	mov	r0, r3
 8005360:	f000 ff2e 	bl	80061c0 <xTaskCheckForTimeOut>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d123      	bne.n	80053b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800536a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800536c:	f000 f916 	bl	800559c <prvIsQueueEmpty>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d017      	beq.n	80053a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005378:	3324      	adds	r3, #36	@ 0x24
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	4611      	mov	r1, r2
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fdb0 	bl	8005ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005386:	f000 f8b7 	bl	80054f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800538a:	f000 fbe5 	bl	8005b58 <xTaskResumeAll>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d189      	bne.n	80052a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005394:	4b0f      	ldr	r3, [pc, #60]	@ (80053d4 <xQueueReceive+0x1c0>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	e780      	b.n	80052a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053a8:	f000 f8a6 	bl	80054f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053ac:	f000 fbd4 	bl	8005b58 <xTaskResumeAll>
 80053b0:	e77a      	b.n	80052a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053b4:	f000 f8a0 	bl	80054f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053b8:	f000 fbce 	bl	8005b58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053be:	f000 f8ed 	bl	800559c <prvIsQueueEmpty>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f43f af6f 	beq.w	80052a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3730      	adds	r7, #48	@ 0x30
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	e000ed04 	.word	0xe000ed04

080053d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10d      	bne.n	8005412 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d14d      	bne.n	800549a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	4618      	mov	r0, r3
 8005404:	f001 f840 	bl	8006488 <xTaskPriorityDisinherit>
 8005408:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	609a      	str	r2, [r3, #8]
 8005410:	e043      	b.n	800549a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d119      	bne.n	800544c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6858      	ldr	r0, [r3, #4]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005420:	461a      	mov	r2, r3
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	f002 fb6f 	bl	8007b06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005430:	441a      	add	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	429a      	cmp	r2, r3
 8005440:	d32b      	bcc.n	800549a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	e026      	b.n	800549a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	68d8      	ldr	r0, [r3, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005454:	461a      	mov	r2, r3
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	f002 fb55 	bl	8007b06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005464:	425b      	negs	r3, r3
 8005466:	441a      	add	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d207      	bcs.n	8005488 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005480:	425b      	negs	r3, r3
 8005482:	441a      	add	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d105      	bne.n	800549a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	3b01      	subs	r3, #1
 8005498:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80054a2:	697b      	ldr	r3, [r7, #20]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d018      	beq.n	80054f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c6:	441a      	add	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d303      	bcc.n	80054e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68d9      	ldr	r1, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e8:	461a      	mov	r2, r3
 80054ea:	6838      	ldr	r0, [r7, #0]
 80054ec:	f002 fb0b 	bl	8007b06 <memcpy>
	}
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005500:	f001 fd4a 	bl	8006f98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800550a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800550c:	e011      	b.n	8005532 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005512:	2b00      	cmp	r3, #0
 8005514:	d012      	beq.n	800553c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3324      	adds	r3, #36	@ 0x24
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fd72 	bl	8006004 <xTaskRemoveFromEventList>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005526:	f000 feaf 	bl	8006288 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	3b01      	subs	r3, #1
 800552e:	b2db      	uxtb	r3, r3
 8005530:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005536:	2b00      	cmp	r3, #0
 8005538:	dce9      	bgt.n	800550e <prvUnlockQueue+0x16>
 800553a:	e000      	b.n	800553e <prvUnlockQueue+0x46>
					break;
 800553c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	22ff      	movs	r2, #255	@ 0xff
 8005542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005546:	f001 fd59 	bl	8006ffc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800554a:	f001 fd25 	bl	8006f98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005554:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005556:	e011      	b.n	800557c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d012      	beq.n	8005586 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3310      	adds	r3, #16
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fd4d 	bl	8006004 <xTaskRemoveFromEventList>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005570:	f000 fe8a 	bl	8006288 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005574:	7bbb      	ldrb	r3, [r7, #14]
 8005576:	3b01      	subs	r3, #1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800557c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005580:	2b00      	cmp	r3, #0
 8005582:	dce9      	bgt.n	8005558 <prvUnlockQueue+0x60>
 8005584:	e000      	b.n	8005588 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005586:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	22ff      	movs	r2, #255	@ 0xff
 800558c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005590:	f001 fd34 	bl	8006ffc <vPortExitCritical>
}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055a4:	f001 fcf8 	bl	8006f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055b0:	2301      	movs	r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e001      	b.n	80055ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055ba:	f001 fd1f 	bl	8006ffc <vPortExitCritical>

	return xReturn;
 80055be:	68fb      	ldr	r3, [r7, #12]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055d0:	f001 fce2 	bl	8006f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055dc:	429a      	cmp	r2, r3
 80055de:	d102      	bne.n	80055e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055e0:	2301      	movs	r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	e001      	b.n	80055ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055ea:	f001 fd07 	bl	8006ffc <vPortExitCritical>

	return xReturn;
 80055ee:	68fb      	ldr	r3, [r7, #12]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	e014      	b.n	8005632 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005608:	4a0f      	ldr	r2, [pc, #60]	@ (8005648 <vQueueAddToRegistry+0x50>)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10b      	bne.n	800562c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005614:	490c      	ldr	r1, [pc, #48]	@ (8005648 <vQueueAddToRegistry+0x50>)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800561e:	4a0a      	ldr	r2, [pc, #40]	@ (8005648 <vQueueAddToRegistry+0x50>)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4413      	add	r3, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800562a:	e006      	b.n	800563a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3301      	adds	r3, #1
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b07      	cmp	r3, #7
 8005636:	d9e7      	bls.n	8005608 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	20000938 	.word	0x20000938

0800564c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800565c:	f001 fc9c 	bl	8006f98 <vPortEnterCritical>
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005666:	b25b      	sxtb	r3, r3
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d103      	bne.n	8005676 <vQueueWaitForMessageRestricted+0x2a>
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800567c:	b25b      	sxtb	r3, r3
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d103      	bne.n	800568c <vQueueWaitForMessageRestricted+0x40>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800568c:	f001 fcb6 	bl	8006ffc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	3324      	adds	r3, #36	@ 0x24
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fc83 	bl	8005fac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056a6:	6978      	ldr	r0, [r7, #20]
 80056a8:	f7ff ff26 	bl	80054f8 <prvUnlockQueue>
	}
 80056ac:	bf00      	nop
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08e      	sub	sp, #56	@ 0x38
 80056b8:	af04      	add	r7, sp, #16
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10b      	bne.n	80056e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	623b      	str	r3, [r7, #32]
}
 80056da:	bf00      	nop
 80056dc:	bf00      	nop
 80056de:	e7fd      	b.n	80056dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	61fb      	str	r3, [r7, #28]
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	e7fd      	b.n	80056fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056fe:	235c      	movs	r3, #92	@ 0x5c
 8005700:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	2b5c      	cmp	r3, #92	@ 0x5c
 8005706:	d00b      	beq.n	8005720 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	61bb      	str	r3, [r7, #24]
}
 800571a:	bf00      	nop
 800571c:	bf00      	nop
 800571e:	e7fd      	b.n	800571c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005720:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005724:	2b00      	cmp	r3, #0
 8005726:	d01e      	beq.n	8005766 <xTaskCreateStatic+0xb2>
 8005728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01b      	beq.n	8005766 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800572e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005736:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	2202      	movs	r2, #2
 800573c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005740:	2300      	movs	r3, #0
 8005742:	9303      	str	r3, [sp, #12]
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	9302      	str	r3, [sp, #8]
 8005748:	f107 0314 	add.w	r3, r7, #20
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f850 	bl	80057fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800575e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005760:	f000 f8de 	bl	8005920 <prvAddNewTaskToReadyList>
 8005764:	e001      	b.n	800576a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800576a:	697b      	ldr	r3, [r7, #20]
	}
 800576c:	4618      	mov	r0, r3
 800576e:	3728      	adds	r7, #40	@ 0x28
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08c      	sub	sp, #48	@ 0x30
 8005778:	af04      	add	r7, sp, #16
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	4613      	mov	r3, r2
 8005782:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4618      	mov	r0, r3
 800578a:	f001 fd27 	bl	80071dc <pvPortMalloc>
 800578e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00e      	beq.n	80057b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005796:	205c      	movs	r0, #92	@ 0x5c
 8005798:	f001 fd20 	bl	80071dc <pvPortMalloc>
 800579c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80057aa:	e005      	b.n	80057b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057ac:	6978      	ldr	r0, [r7, #20]
 80057ae:	f001 fde3 	bl	8007378 <vPortFree>
 80057b2:	e001      	b.n	80057b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d017      	beq.n	80057ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057c6:	88fa      	ldrh	r2, [r7, #6]
 80057c8:	2300      	movs	r3, #0
 80057ca:	9303      	str	r3, [sp, #12]
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	9302      	str	r3, [sp, #8]
 80057d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d2:	9301      	str	r3, [sp, #4]
 80057d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f80e 	bl	80057fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057e2:	69f8      	ldr	r0, [r7, #28]
 80057e4:	f000 f89c 	bl	8005920 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057e8:	2301      	movs	r3, #1
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	e002      	b.n	80057f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057ee:	f04f 33ff 	mov.w	r3, #4294967295
 80057f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057f4:	69bb      	ldr	r3, [r7, #24]
	}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b088      	sub	sp, #32
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
 800580a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800580c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	461a      	mov	r2, r3
 8005816:	21a5      	movs	r1, #165	@ 0xa5
 8005818:	f002 f89d 	bl	8007956 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005826:	3b01      	subs	r3, #1
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f023 0307 	bic.w	r3, r3, #7
 8005834:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00b      	beq.n	8005858 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	617b      	str	r3, [r7, #20]
}
 8005852:	bf00      	nop
 8005854:	bf00      	nop
 8005856:	e7fd      	b.n	8005854 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d01f      	beq.n	800589e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	e012      	b.n	800588a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	7819      	ldrb	r1, [r3, #0]
 800586c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	3334      	adds	r3, #52	@ 0x34
 8005874:	460a      	mov	r2, r1
 8005876:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d006      	beq.n	8005892 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	3301      	adds	r3, #1
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	2b0f      	cmp	r3, #15
 800588e:	d9e9      	bls.n	8005864 <prvInitialiseNewTask+0x66>
 8005890:	e000      	b.n	8005894 <prvInitialiseNewTask+0x96>
			{
				break;
 8005892:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800589c:	e003      	b.n	80058a6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800589e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	2b37      	cmp	r3, #55	@ 0x37
 80058aa:	d901      	bls.n	80058b0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058ac:	2337      	movs	r3, #55	@ 0x37
 80058ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058be:	2200      	movs	r2, #0
 80058c0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	3304      	adds	r3, #4
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff f966 	bl	8004b98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ce:	3318      	adds	r3, #24
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff f961 	bl	8004b98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ee:	2200      	movs	r2, #0
 80058f0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	68f9      	ldr	r1, [r7, #12]
 80058fe:	69b8      	ldr	r0, [r7, #24]
 8005900:	f001 fa18 	bl	8006d34 <pxPortInitialiseStack>
 8005904:	4602      	mov	r2, r0
 8005906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005908:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800590a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005916:	bf00      	nop
 8005918:	3720      	adds	r7, #32
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005928:	f001 fb36 	bl	8006f98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800592c:	4b2d      	ldr	r3, [pc, #180]	@ (80059e4 <prvAddNewTaskToReadyList+0xc4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	4a2c      	ldr	r2, [pc, #176]	@ (80059e4 <prvAddNewTaskToReadyList+0xc4>)
 8005934:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005936:	4b2c      	ldr	r3, [pc, #176]	@ (80059e8 <prvAddNewTaskToReadyList+0xc8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800593e:	4a2a      	ldr	r2, [pc, #168]	@ (80059e8 <prvAddNewTaskToReadyList+0xc8>)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005944:	4b27      	ldr	r3, [pc, #156]	@ (80059e4 <prvAddNewTaskToReadyList+0xc4>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d110      	bne.n	800596e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800594c:	f000 fcc0 	bl	80062d0 <prvInitialiseTaskLists>
 8005950:	e00d      	b.n	800596e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005952:	4b26      	ldr	r3, [pc, #152]	@ (80059ec <prvAddNewTaskToReadyList+0xcc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800595a:	4b23      	ldr	r3, [pc, #140]	@ (80059e8 <prvAddNewTaskToReadyList+0xc8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	429a      	cmp	r2, r3
 8005966:	d802      	bhi.n	800596e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005968:	4a1f      	ldr	r2, [pc, #124]	@ (80059e8 <prvAddNewTaskToReadyList+0xc8>)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800596e:	4b20      	ldr	r3, [pc, #128]	@ (80059f0 <prvAddNewTaskToReadyList+0xd0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	4a1e      	ldr	r2, [pc, #120]	@ (80059f0 <prvAddNewTaskToReadyList+0xd0>)
 8005976:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005978:	4b1d      	ldr	r3, [pc, #116]	@ (80059f0 <prvAddNewTaskToReadyList+0xd0>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005984:	4b1b      	ldr	r3, [pc, #108]	@ (80059f4 <prvAddNewTaskToReadyList+0xd4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d903      	bls.n	8005994 <prvAddNewTaskToReadyList+0x74>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005990:	4a18      	ldr	r2, [pc, #96]	@ (80059f4 <prvAddNewTaskToReadyList+0xd4>)
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4a15      	ldr	r2, [pc, #84]	@ (80059f8 <prvAddNewTaskToReadyList+0xd8>)
 80059a2:	441a      	add	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f7ff f901 	bl	8004bb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059b0:	f001 fb24 	bl	8006ffc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059b4:	4b0d      	ldr	r3, [pc, #52]	@ (80059ec <prvAddNewTaskToReadyList+0xcc>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00e      	beq.n	80059da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059bc:	4b0a      	ldr	r3, [pc, #40]	@ (80059e8 <prvAddNewTaskToReadyList+0xc8>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d207      	bcs.n	80059da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059ca:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <prvAddNewTaskToReadyList+0xdc>)
 80059cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20000e4c 	.word	0x20000e4c
 80059e8:	20000978 	.word	0x20000978
 80059ec:	20000e58 	.word	0x20000e58
 80059f0:	20000e68 	.word	0x20000e68
 80059f4:	20000e54 	.word	0x20000e54
 80059f8:	2000097c 	.word	0x2000097c
 80059fc:	e000ed04 	.word	0xe000ed04

08005a00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d018      	beq.n	8005a44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a12:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <vTaskDelay+0x64>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <vTaskDelay+0x32>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	60bb      	str	r3, [r7, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	bf00      	nop
 8005a30:	e7fd      	b.n	8005a2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a32:	f000 f883 	bl	8005b3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a36:	2100      	movs	r1, #0
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fdad 	bl	8006598 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a3e:	f000 f88b 	bl	8005b58 <xTaskResumeAll>
 8005a42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d107      	bne.n	8005a5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005a4a:	4b07      	ldr	r3, [pc, #28]	@ (8005a68 <vTaskDelay+0x68>)
 8005a4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a5a:	bf00      	nop
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000e74 	.word	0x20000e74
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	@ 0x28
 8005a70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a7a:	463a      	mov	r2, r7
 8005a7c:	1d39      	adds	r1, r7, #4
 8005a7e:	f107 0308 	add.w	r3, r7, #8
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fe3e 	bl	8004704 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a88:	6839      	ldr	r1, [r7, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	9202      	str	r2, [sp, #8]
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	2300      	movs	r3, #0
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	2300      	movs	r3, #0
 8005a98:	460a      	mov	r2, r1
 8005a9a:	4922      	ldr	r1, [pc, #136]	@ (8005b24 <vTaskStartScheduler+0xb8>)
 8005a9c:	4822      	ldr	r0, [pc, #136]	@ (8005b28 <vTaskStartScheduler+0xbc>)
 8005a9e:	f7ff fe09 	bl	80056b4 <xTaskCreateStatic>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4a21      	ldr	r2, [pc, #132]	@ (8005b2c <vTaskStartScheduler+0xc0>)
 8005aa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005aa8:	4b20      	ldr	r3, [pc, #128]	@ (8005b2c <vTaskStartScheduler+0xc0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	e001      	b.n	8005aba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d102      	bne.n	8005ac6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ac0:	f000 fdbe 	bl	8006640 <xTimerCreateTimerTask>
 8005ac4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d116      	bne.n	8005afa <vTaskStartScheduler+0x8e>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	613b      	str	r3, [r7, #16]
}
 8005ade:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ae0:	4b13      	ldr	r3, [pc, #76]	@ (8005b30 <vTaskStartScheduler+0xc4>)
 8005ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ae8:	4b12      	ldr	r3, [pc, #72]	@ (8005b34 <vTaskStartScheduler+0xc8>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005aee:	4b12      	ldr	r3, [pc, #72]	@ (8005b38 <vTaskStartScheduler+0xcc>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005af4:	f001 f9ac 	bl	8006e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005af8:	e00f      	b.n	8005b1a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b00:	d10b      	bne.n	8005b1a <vTaskStartScheduler+0xae>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	60fb      	str	r3, [r7, #12]
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	e7fd      	b.n	8005b16 <vTaskStartScheduler+0xaa>
}
 8005b1a:	bf00      	nop
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	08008cbc 	.word	0x08008cbc
 8005b28:	080062a1 	.word	0x080062a1
 8005b2c:	20000e70 	.word	0x20000e70
 8005b30:	20000e6c 	.word	0x20000e6c
 8005b34:	20000e58 	.word	0x20000e58
 8005b38:	20000e50 	.word	0x20000e50

08005b3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b40:	4b04      	ldr	r3, [pc, #16]	@ (8005b54 <vTaskSuspendAll+0x18>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3301      	adds	r3, #1
 8005b46:	4a03      	ldr	r2, [pc, #12]	@ (8005b54 <vTaskSuspendAll+0x18>)
 8005b48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b4a:	bf00      	nop
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	20000e74 	.word	0x20000e74

08005b58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b66:	4b42      	ldr	r3, [pc, #264]	@ (8005c70 <xTaskResumeAll+0x118>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10b      	bne.n	8005b86 <xTaskResumeAll+0x2e>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	603b      	str	r3, [r7, #0]
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop
 8005b84:	e7fd      	b.n	8005b82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b86:	f001 fa07 	bl	8006f98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b8a:	4b39      	ldr	r3, [pc, #228]	@ (8005c70 <xTaskResumeAll+0x118>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	4a37      	ldr	r2, [pc, #220]	@ (8005c70 <xTaskResumeAll+0x118>)
 8005b92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b94:	4b36      	ldr	r3, [pc, #216]	@ (8005c70 <xTaskResumeAll+0x118>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d162      	bne.n	8005c62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b9c:	4b35      	ldr	r3, [pc, #212]	@ (8005c74 <xTaskResumeAll+0x11c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d05e      	beq.n	8005c62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ba4:	e02f      	b.n	8005c06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba6:	4b34      	ldr	r3, [pc, #208]	@ (8005c78 <xTaskResumeAll+0x120>)
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3318      	adds	r3, #24
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff f85a 	bl	8004c6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff f855 	bl	8004c6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8005c7c <xTaskResumeAll+0x124>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d903      	bls.n	8005bd6 <xTaskResumeAll+0x7e>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8005c7c <xTaskResumeAll+0x124>)
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4a27      	ldr	r2, [pc, #156]	@ (8005c80 <xTaskResumeAll+0x128>)
 8005be4:	441a      	add	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4619      	mov	r1, r3
 8005bec:	4610      	mov	r0, r2
 8005bee:	f7fe ffe0 	bl	8004bb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf6:	4b23      	ldr	r3, [pc, #140]	@ (8005c84 <xTaskResumeAll+0x12c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d302      	bcc.n	8005c06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005c00:	4b21      	ldr	r3, [pc, #132]	@ (8005c88 <xTaskResumeAll+0x130>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c06:	4b1c      	ldr	r3, [pc, #112]	@ (8005c78 <xTaskResumeAll+0x120>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1cb      	bne.n	8005ba6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c14:	f000 fbfa 	bl	800640c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c18:	4b1c      	ldr	r3, [pc, #112]	@ (8005c8c <xTaskResumeAll+0x134>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d010      	beq.n	8005c46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c24:	f000 f846 	bl	8005cb4 <xTaskIncrementTick>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005c2e:	4b16      	ldr	r3, [pc, #88]	@ (8005c88 <xTaskResumeAll+0x130>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1f1      	bne.n	8005c24 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005c40:	4b12      	ldr	r3, [pc, #72]	@ (8005c8c <xTaskResumeAll+0x134>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c46:	4b10      	ldr	r3, [pc, #64]	@ (8005c88 <xTaskResumeAll+0x130>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d009      	beq.n	8005c62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c52:	4b0f      	ldr	r3, [pc, #60]	@ (8005c90 <xTaskResumeAll+0x138>)
 8005c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c62:	f001 f9cb 	bl	8006ffc <vPortExitCritical>

	return xAlreadyYielded;
 8005c66:	68bb      	ldr	r3, [r7, #8]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20000e74 	.word	0x20000e74
 8005c74:	20000e4c 	.word	0x20000e4c
 8005c78:	20000e0c 	.word	0x20000e0c
 8005c7c:	20000e54 	.word	0x20000e54
 8005c80:	2000097c 	.word	0x2000097c
 8005c84:	20000978 	.word	0x20000978
 8005c88:	20000e60 	.word	0x20000e60
 8005c8c:	20000e5c 	.word	0x20000e5c
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c9a:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <xTaskGetTickCount+0x1c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ca0:	687b      	ldr	r3, [r7, #4]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	20000e50 	.word	0x20000e50

08005cb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cbe:	4b4f      	ldr	r3, [pc, #316]	@ (8005dfc <xTaskIncrementTick+0x148>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f040 8090 	bne.w	8005de8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8005e00 <xTaskIncrementTick+0x14c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cd0:	4a4b      	ldr	r2, [pc, #300]	@ (8005e00 <xTaskIncrementTick+0x14c>)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d121      	bne.n	8005d20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cdc:	4b49      	ldr	r3, [pc, #292]	@ (8005e04 <xTaskIncrementTick+0x150>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00b      	beq.n	8005cfe <xTaskIncrementTick+0x4a>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	603b      	str	r3, [r7, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	e7fd      	b.n	8005cfa <xTaskIncrementTick+0x46>
 8005cfe:	4b41      	ldr	r3, [pc, #260]	@ (8005e04 <xTaskIncrementTick+0x150>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	4b40      	ldr	r3, [pc, #256]	@ (8005e08 <xTaskIncrementTick+0x154>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a3e      	ldr	r2, [pc, #248]	@ (8005e04 <xTaskIncrementTick+0x150>)
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e08 <xTaskIncrementTick+0x154>)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	4b3e      	ldr	r3, [pc, #248]	@ (8005e0c <xTaskIncrementTick+0x158>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3301      	adds	r3, #1
 8005d18:	4a3c      	ldr	r2, [pc, #240]	@ (8005e0c <xTaskIncrementTick+0x158>)
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	f000 fb76 	bl	800640c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d20:	4b3b      	ldr	r3, [pc, #236]	@ (8005e10 <xTaskIncrementTick+0x15c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d349      	bcc.n	8005dbe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d2a:	4b36      	ldr	r3, [pc, #216]	@ (8005e04 <xTaskIncrementTick+0x150>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d104      	bne.n	8005d3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d34:	4b36      	ldr	r3, [pc, #216]	@ (8005e10 <xTaskIncrementTick+0x15c>)
 8005d36:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3a:	601a      	str	r2, [r3, #0]
					break;
 8005d3c:	e03f      	b.n	8005dbe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d3e:	4b31      	ldr	r3, [pc, #196]	@ (8005e04 <xTaskIncrementTick+0x150>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d203      	bcs.n	8005d5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d56:	4a2e      	ldr	r2, [pc, #184]	@ (8005e10 <xTaskIncrementTick+0x15c>)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d5c:	e02f      	b.n	8005dbe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	3304      	adds	r3, #4
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fe ff82 	bl	8004c6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d004      	beq.n	8005d7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	3318      	adds	r3, #24
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fe ff79 	bl	8004c6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7e:	4b25      	ldr	r3, [pc, #148]	@ (8005e14 <xTaskIncrementTick+0x160>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d903      	bls.n	8005d8e <xTaskIncrementTick+0xda>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8a:	4a22      	ldr	r2, [pc, #136]	@ (8005e14 <xTaskIncrementTick+0x160>)
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005e18 <xTaskIncrementTick+0x164>)
 8005d9c:	441a      	add	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	3304      	adds	r3, #4
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f7fe ff04 	bl	8004bb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dae:	4b1b      	ldr	r3, [pc, #108]	@ (8005e1c <xTaskIncrementTick+0x168>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d3b8      	bcc.n	8005d2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dbc:	e7b5      	b.n	8005d2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005dbe:	4b17      	ldr	r3, [pc, #92]	@ (8005e1c <xTaskIncrementTick+0x168>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc4:	4914      	ldr	r1, [pc, #80]	@ (8005e18 <xTaskIncrementTick+0x164>)
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	440b      	add	r3, r1
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d901      	bls.n	8005dda <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005dda:	4b11      	ldr	r3, [pc, #68]	@ (8005e20 <xTaskIncrementTick+0x16c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005de2:	2301      	movs	r3, #1
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	e004      	b.n	8005df2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005de8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e24 <xTaskIncrementTick+0x170>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3301      	adds	r3, #1
 8005dee:	4a0d      	ldr	r2, [pc, #52]	@ (8005e24 <xTaskIncrementTick+0x170>)
 8005df0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005df2:	697b      	ldr	r3, [r7, #20]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000e74 	.word	0x20000e74
 8005e00:	20000e50 	.word	0x20000e50
 8005e04:	20000e04 	.word	0x20000e04
 8005e08:	20000e08 	.word	0x20000e08
 8005e0c:	20000e64 	.word	0x20000e64
 8005e10:	20000e6c 	.word	0x20000e6c
 8005e14:	20000e54 	.word	0x20000e54
 8005e18:	2000097c 	.word	0x2000097c
 8005e1c:	20000978 	.word	0x20000978
 8005e20:	20000e60 	.word	0x20000e60
 8005e24:	20000e5c 	.word	0x20000e5c

08005e28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e2e:	4b28      	ldr	r3, [pc, #160]	@ (8005ed0 <vTaskSwitchContext+0xa8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e36:	4b27      	ldr	r3, [pc, #156]	@ (8005ed4 <vTaskSwitchContext+0xac>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e3c:	e042      	b.n	8005ec4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005e3e:	4b25      	ldr	r3, [pc, #148]	@ (8005ed4 <vTaskSwitchContext+0xac>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e44:	4b24      	ldr	r3, [pc, #144]	@ (8005ed8 <vTaskSwitchContext+0xb0>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	e011      	b.n	8005e70 <vTaskSwitchContext+0x48>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <vTaskSwitchContext+0x42>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	607b      	str	r3, [r7, #4]
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	e7fd      	b.n	8005e66 <vTaskSwitchContext+0x3e>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	491a      	ldr	r1, [pc, #104]	@ (8005edc <vTaskSwitchContext+0xb4>)
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0e3      	beq.n	8005e4c <vTaskSwitchContext+0x24>
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4a13      	ldr	r2, [pc, #76]	@ (8005edc <vTaskSwitchContext+0xb4>)
 8005e90:	4413      	add	r3, r2
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	605a      	str	r2, [r3, #4]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d104      	bne.n	8005eb4 <vTaskSwitchContext+0x8c>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	605a      	str	r2, [r3, #4]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	4a09      	ldr	r2, [pc, #36]	@ (8005ee0 <vTaskSwitchContext+0xb8>)
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	4a06      	ldr	r2, [pc, #24]	@ (8005ed8 <vTaskSwitchContext+0xb0>)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6013      	str	r3, [r2, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	20000e74 	.word	0x20000e74
 8005ed4:	20000e60 	.word	0x20000e60
 8005ed8:	20000e54 	.word	0x20000e54
 8005edc:	2000097c 	.word	0x2000097c
 8005ee0:	20000978 	.word	0x20000978

08005ee4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	60fb      	str	r3, [r7, #12]
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f0c:	4b07      	ldr	r3, [pc, #28]	@ (8005f2c <vTaskPlaceOnEventList+0x48>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3318      	adds	r3, #24
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7fe fe70 	bl	8004bfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	6838      	ldr	r0, [r7, #0]
 8005f1e:	f000 fb3b 	bl	8006598 <prvAddCurrentTaskToDelayedList>
}
 8005f22:	bf00      	nop
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000978 	.word	0x20000978

08005f30 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10b      	bne.n	8005f5a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	617b      	str	r3, [r7, #20]
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop
 8005f58:	e7fd      	b.n	8005f56 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005f5a:	4b12      	ldr	r3, [pc, #72]	@ (8005fa4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10b      	bne.n	8005f7a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	613b      	str	r3, [r7, #16]
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop
 8005f78:	e7fd      	b.n	8005f76 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa8 <vTaskPlaceOnUnorderedEventList+0x78>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005f84:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f86:	4b08      	ldr	r3, [pc, #32]	@ (8005fa8 <vTaskPlaceOnUnorderedEventList+0x78>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3318      	adds	r3, #24
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7fe fe0f 	bl	8004bb2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f94:	2101      	movs	r1, #1
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fafe 	bl	8006598 <prvAddCurrentTaskToDelayedList>
}
 8005f9c:	bf00      	nop
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20000e74 	.word	0x20000e74
 8005fa8:	20000978 	.word	0x20000978

08005fac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10b      	bne.n	8005fd6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	617b      	str	r3, [r7, #20]
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	e7fd      	b.n	8005fd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006000 <vTaskPlaceOnEventListRestricted+0x54>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3318      	adds	r3, #24
 8005fdc:	4619      	mov	r1, r3
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f7fe fde7 	bl	8004bb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005fea:	f04f 33ff 	mov.w	r3, #4294967295
 8005fee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ff0:	6879      	ldr	r1, [r7, #4]
 8005ff2:	68b8      	ldr	r0, [r7, #8]
 8005ff4:	f000 fad0 	bl	8006598 <prvAddCurrentTaskToDelayedList>
	}
 8005ff8:	bf00      	nop
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000978 	.word	0x20000978

08006004 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10b      	bne.n	8006032 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	60fb      	str	r3, [r7, #12]
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	e7fd      	b.n	800602e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	3318      	adds	r3, #24
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe fe18 	bl	8004c6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800603c:	4b1d      	ldr	r3, [pc, #116]	@ (80060b4 <xTaskRemoveFromEventList+0xb0>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d11d      	bne.n	8006080 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	3304      	adds	r3, #4
 8006048:	4618      	mov	r0, r3
 800604a:	f7fe fe0f 	bl	8004c6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006052:	4b19      	ldr	r3, [pc, #100]	@ (80060b8 <xTaskRemoveFromEventList+0xb4>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d903      	bls.n	8006062 <xTaskRemoveFromEventList+0x5e>
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605e:	4a16      	ldr	r2, [pc, #88]	@ (80060b8 <xTaskRemoveFromEventList+0xb4>)
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4a13      	ldr	r2, [pc, #76]	@ (80060bc <xTaskRemoveFromEventList+0xb8>)
 8006070:	441a      	add	r2, r3
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	3304      	adds	r3, #4
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f7fe fd9a 	bl	8004bb2 <vListInsertEnd>
 800607e:	e005      	b.n	800608c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	3318      	adds	r3, #24
 8006084:	4619      	mov	r1, r3
 8006086:	480e      	ldr	r0, [pc, #56]	@ (80060c0 <xTaskRemoveFromEventList+0xbc>)
 8006088:	f7fe fd93 	bl	8004bb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006090:	4b0c      	ldr	r3, [pc, #48]	@ (80060c4 <xTaskRemoveFromEventList+0xc0>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006096:	429a      	cmp	r2, r3
 8006098:	d905      	bls.n	80060a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800609a:	2301      	movs	r3, #1
 800609c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800609e:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <xTaskRemoveFromEventList+0xc4>)
 80060a0:	2201      	movs	r2, #1
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	e001      	b.n	80060aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060aa:	697b      	ldr	r3, [r7, #20]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20000e74 	.word	0x20000e74
 80060b8:	20000e54 	.word	0x20000e54
 80060bc:	2000097c 	.word	0x2000097c
 80060c0:	20000e0c 	.word	0x20000e0c
 80060c4:	20000978 	.word	0x20000978
 80060c8:	20000e60 	.word	0x20000e60

080060cc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80060d6:	4b2a      	ldr	r3, [pc, #168]	@ (8006180 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10b      	bne.n	80060f6 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	613b      	str	r3, [r7, #16]
}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	e7fd      	b.n	80060f2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10b      	bne.n	8006124 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	60fb      	str	r3, [r7, #12]
}
 800611e:	bf00      	nop
 8006120:	bf00      	nop
 8006122:	e7fd      	b.n	8006120 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7fe fda1 	bl	8004c6c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	3304      	adds	r3, #4
 800612e:	4618      	mov	r0, r3
 8006130:	f7fe fd9c 	bl	8004c6c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006138:	4b12      	ldr	r3, [pc, #72]	@ (8006184 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d903      	bls.n	8006148 <vTaskRemoveFromUnorderedEventList+0x7c>
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006144:	4a0f      	ldr	r2, [pc, #60]	@ (8006184 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4a0c      	ldr	r2, [pc, #48]	@ (8006188 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006156:	441a      	add	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	3304      	adds	r3, #4
 800615c:	4619      	mov	r1, r3
 800615e:	4610      	mov	r0, r2
 8006160:	f7fe fd27 	bl	8004bb2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006168:	4b08      	ldr	r3, [pc, #32]	@ (800618c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616e:	429a      	cmp	r2, r3
 8006170:	d902      	bls.n	8006178 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006172:	4b07      	ldr	r3, [pc, #28]	@ (8006190 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8006174:	2201      	movs	r2, #1
 8006176:	601a      	str	r2, [r3, #0]
	}
}
 8006178:	bf00      	nop
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20000e74 	.word	0x20000e74
 8006184:	20000e54 	.word	0x20000e54
 8006188:	2000097c 	.word	0x2000097c
 800618c:	20000978 	.word	0x20000978
 8006190:	20000e60 	.word	0x20000e60

08006194 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800619c:	4b06      	ldr	r3, [pc, #24]	@ (80061b8 <vTaskInternalSetTimeOutState+0x24>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061a4:	4b05      	ldr	r3, [pc, #20]	@ (80061bc <vTaskInternalSetTimeOutState+0x28>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	605a      	str	r2, [r3, #4]
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	20000e64 	.word	0x20000e64
 80061bc:	20000e50 	.word	0x20000e50

080061c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10b      	bne.n	80061e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
}
 80061e2:	bf00      	nop
 80061e4:	bf00      	nop
 80061e6:	e7fd      	b.n	80061e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10b      	bne.n	8006206 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	60fb      	str	r3, [r7, #12]
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	e7fd      	b.n	8006202 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006206:	f000 fec7 	bl	8006f98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800620a:	4b1d      	ldr	r3, [pc, #116]	@ (8006280 <xTaskCheckForTimeOut+0xc0>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d102      	bne.n	800622a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006224:	2300      	movs	r3, #0
 8006226:	61fb      	str	r3, [r7, #28]
 8006228:	e023      	b.n	8006272 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b15      	ldr	r3, [pc, #84]	@ (8006284 <xTaskCheckForTimeOut+0xc4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d007      	beq.n	8006246 <xTaskCheckForTimeOut+0x86>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	429a      	cmp	r2, r3
 800623e:	d302      	bcc.n	8006246 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006240:	2301      	movs	r3, #1
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	e015      	b.n	8006272 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	429a      	cmp	r2, r3
 800624e:	d20b      	bcs.n	8006268 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	1ad2      	subs	r2, r2, r3
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff ff99 	bl	8006194 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006262:	2300      	movs	r3, #0
 8006264:	61fb      	str	r3, [r7, #28]
 8006266:	e004      	b.n	8006272 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800626e:	2301      	movs	r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006272:	f000 fec3 	bl	8006ffc <vPortExitCritical>

	return xReturn;
 8006276:	69fb      	ldr	r3, [r7, #28]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3720      	adds	r7, #32
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20000e50 	.word	0x20000e50
 8006284:	20000e64 	.word	0x20000e64

08006288 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800628c:	4b03      	ldr	r3, [pc, #12]	@ (800629c <vTaskMissedYield+0x14>)
 800628e:	2201      	movs	r2, #1
 8006290:	601a      	str	r2, [r3, #0]
}
 8006292:	bf00      	nop
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	20000e60 	.word	0x20000e60

080062a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062a8:	f000 f852 	bl	8006350 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062ac:	4b06      	ldr	r3, [pc, #24]	@ (80062c8 <prvIdleTask+0x28>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d9f9      	bls.n	80062a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062b4:	4b05      	ldr	r3, [pc, #20]	@ (80062cc <prvIdleTask+0x2c>)
 80062b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062c4:	e7f0      	b.n	80062a8 <prvIdleTask+0x8>
 80062c6:	bf00      	nop
 80062c8:	2000097c 	.word	0x2000097c
 80062cc:	e000ed04 	.word	0xe000ed04

080062d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062d6:	2300      	movs	r3, #0
 80062d8:	607b      	str	r3, [r7, #4]
 80062da:	e00c      	b.n	80062f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a12      	ldr	r2, [pc, #72]	@ (8006330 <prvInitialiseTaskLists+0x60>)
 80062e8:	4413      	add	r3, r2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe fc34 	bl	8004b58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3301      	adds	r3, #1
 80062f4:	607b      	str	r3, [r7, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b37      	cmp	r3, #55	@ 0x37
 80062fa:	d9ef      	bls.n	80062dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062fc:	480d      	ldr	r0, [pc, #52]	@ (8006334 <prvInitialiseTaskLists+0x64>)
 80062fe:	f7fe fc2b 	bl	8004b58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006302:	480d      	ldr	r0, [pc, #52]	@ (8006338 <prvInitialiseTaskLists+0x68>)
 8006304:	f7fe fc28 	bl	8004b58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006308:	480c      	ldr	r0, [pc, #48]	@ (800633c <prvInitialiseTaskLists+0x6c>)
 800630a:	f7fe fc25 	bl	8004b58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800630e:	480c      	ldr	r0, [pc, #48]	@ (8006340 <prvInitialiseTaskLists+0x70>)
 8006310:	f7fe fc22 	bl	8004b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006314:	480b      	ldr	r0, [pc, #44]	@ (8006344 <prvInitialiseTaskLists+0x74>)
 8006316:	f7fe fc1f 	bl	8004b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800631a:	4b0b      	ldr	r3, [pc, #44]	@ (8006348 <prvInitialiseTaskLists+0x78>)
 800631c:	4a05      	ldr	r2, [pc, #20]	@ (8006334 <prvInitialiseTaskLists+0x64>)
 800631e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006320:	4b0a      	ldr	r3, [pc, #40]	@ (800634c <prvInitialiseTaskLists+0x7c>)
 8006322:	4a05      	ldr	r2, [pc, #20]	@ (8006338 <prvInitialiseTaskLists+0x68>)
 8006324:	601a      	str	r2, [r3, #0]
}
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	2000097c 	.word	0x2000097c
 8006334:	20000ddc 	.word	0x20000ddc
 8006338:	20000df0 	.word	0x20000df0
 800633c:	20000e0c 	.word	0x20000e0c
 8006340:	20000e20 	.word	0x20000e20
 8006344:	20000e38 	.word	0x20000e38
 8006348:	20000e04 	.word	0x20000e04
 800634c:	20000e08 	.word	0x20000e08

08006350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006356:	e019      	b.n	800638c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006358:	f000 fe1e 	bl	8006f98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800635c:	4b10      	ldr	r3, [pc, #64]	@ (80063a0 <prvCheckTasksWaitingTermination+0x50>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3304      	adds	r3, #4
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe fc7f 	bl	8004c6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800636e:	4b0d      	ldr	r3, [pc, #52]	@ (80063a4 <prvCheckTasksWaitingTermination+0x54>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3b01      	subs	r3, #1
 8006374:	4a0b      	ldr	r2, [pc, #44]	@ (80063a4 <prvCheckTasksWaitingTermination+0x54>)
 8006376:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006378:	4b0b      	ldr	r3, [pc, #44]	@ (80063a8 <prvCheckTasksWaitingTermination+0x58>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3b01      	subs	r3, #1
 800637e:	4a0a      	ldr	r2, [pc, #40]	@ (80063a8 <prvCheckTasksWaitingTermination+0x58>)
 8006380:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006382:	f000 fe3b 	bl	8006ffc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f810 	bl	80063ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800638c:	4b06      	ldr	r3, [pc, #24]	@ (80063a8 <prvCheckTasksWaitingTermination+0x58>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e1      	bne.n	8006358 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20000e20 	.word	0x20000e20
 80063a4:	20000e4c 	.word	0x20000e4c
 80063a8:	20000e34 	.word	0x20000e34

080063ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d108      	bne.n	80063d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 ffd8 	bl	8007378 <vPortFree>
				vPortFree( pxTCB );
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 ffd5 	bl	8007378 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063ce:	e019      	b.n	8006404 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d103      	bne.n	80063e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 ffcc 	bl	8007378 <vPortFree>
	}
 80063e0:	e010      	b.n	8006404 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d00b      	beq.n	8006404 <prvDeleteTCB+0x58>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	60fb      	str	r3, [r7, #12]
}
 80063fe:	bf00      	nop
 8006400:	bf00      	nop
 8006402:	e7fd      	b.n	8006400 <prvDeleteTCB+0x54>
	}
 8006404:	bf00      	nop
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006412:	4b0c      	ldr	r3, [pc, #48]	@ (8006444 <prvResetNextTaskUnblockTime+0x38>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800641c:	4b0a      	ldr	r3, [pc, #40]	@ (8006448 <prvResetNextTaskUnblockTime+0x3c>)
 800641e:	f04f 32ff 	mov.w	r2, #4294967295
 8006422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006424:	e008      	b.n	8006438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006426:	4b07      	ldr	r3, [pc, #28]	@ (8006444 <prvResetNextTaskUnblockTime+0x38>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	4a04      	ldr	r2, [pc, #16]	@ (8006448 <prvResetNextTaskUnblockTime+0x3c>)
 8006436:	6013      	str	r3, [r2, #0]
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	20000e04 	.word	0x20000e04
 8006448:	20000e6c 	.word	0x20000e6c

0800644c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006452:	4b0b      	ldr	r3, [pc, #44]	@ (8006480 <xTaskGetSchedulerState+0x34>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d102      	bne.n	8006460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800645a:	2301      	movs	r3, #1
 800645c:	607b      	str	r3, [r7, #4]
 800645e:	e008      	b.n	8006472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006460:	4b08      	ldr	r3, [pc, #32]	@ (8006484 <xTaskGetSchedulerState+0x38>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006468:	2302      	movs	r3, #2
 800646a:	607b      	str	r3, [r7, #4]
 800646c:	e001      	b.n	8006472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800646e:	2300      	movs	r3, #0
 8006470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006472:	687b      	ldr	r3, [r7, #4]
	}
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	20000e58 	.word	0x20000e58
 8006484:	20000e74 	.word	0x20000e74

08006488 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d058      	beq.n	8006550 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800649e:	4b2f      	ldr	r3, [pc, #188]	@ (800655c <xTaskPriorityDisinherit+0xd4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d00b      	beq.n	80064c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	60fb      	str	r3, [r7, #12]
}
 80064ba:	bf00      	nop
 80064bc:	bf00      	nop
 80064be:	e7fd      	b.n	80064bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10b      	bne.n	80064e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	60bb      	str	r3, [r7, #8]
}
 80064da:	bf00      	nop
 80064dc:	bf00      	nop
 80064de:	e7fd      	b.n	80064dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e4:	1e5a      	subs	r2, r3, #1
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d02c      	beq.n	8006550 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d128      	bne.n	8006550 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	3304      	adds	r3, #4
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe fbb2 	bl	8004c6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006520:	4b0f      	ldr	r3, [pc, #60]	@ (8006560 <xTaskPriorityDisinherit+0xd8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d903      	bls.n	8006530 <xTaskPriorityDisinherit+0xa8>
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652c:	4a0c      	ldr	r2, [pc, #48]	@ (8006560 <xTaskPriorityDisinherit+0xd8>)
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4a09      	ldr	r2, [pc, #36]	@ (8006564 <xTaskPriorityDisinherit+0xdc>)
 800653e:	441a      	add	r2, r3
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	3304      	adds	r3, #4
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f7fe fb33 	bl	8004bb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800654c:	2301      	movs	r3, #1
 800654e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006550:	697b      	ldr	r3, [r7, #20]
	}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	20000978 	.word	0x20000978
 8006560:	20000e54 	.word	0x20000e54
 8006564:	2000097c 	.word	0x2000097c

08006568 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800656e:	4b09      	ldr	r3, [pc, #36]	@ (8006594 <uxTaskResetEventItemValue+0x2c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006576:	4b07      	ldr	r3, [pc, #28]	@ (8006594 <uxTaskResetEventItemValue+0x2c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800657c:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <uxTaskResetEventItemValue+0x2c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8006584:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006586:	687b      	ldr	r3, [r7, #4]
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	20000978 	.word	0x20000978

08006598 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065a2:	4b21      	ldr	r3, [pc, #132]	@ (8006628 <prvAddCurrentTaskToDelayedList+0x90>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065a8:	4b20      	ldr	r3, [pc, #128]	@ (800662c <prvAddCurrentTaskToDelayedList+0x94>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3304      	adds	r3, #4
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fe fb5c 	bl	8004c6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d10a      	bne.n	80065d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065c2:	4b1a      	ldr	r3, [pc, #104]	@ (800662c <prvAddCurrentTaskToDelayedList+0x94>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3304      	adds	r3, #4
 80065c8:	4619      	mov	r1, r3
 80065ca:	4819      	ldr	r0, [pc, #100]	@ (8006630 <prvAddCurrentTaskToDelayedList+0x98>)
 80065cc:	f7fe faf1 	bl	8004bb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065d0:	e026      	b.n	8006620 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4413      	add	r3, r2
 80065d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065da:	4b14      	ldr	r3, [pc, #80]	@ (800662c <prvAddCurrentTaskToDelayedList+0x94>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d209      	bcs.n	80065fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065ea:	4b12      	ldr	r3, [pc, #72]	@ (8006634 <prvAddCurrentTaskToDelayedList+0x9c>)
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4b0f      	ldr	r3, [pc, #60]	@ (800662c <prvAddCurrentTaskToDelayedList+0x94>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3304      	adds	r3, #4
 80065f4:	4619      	mov	r1, r3
 80065f6:	4610      	mov	r0, r2
 80065f8:	f7fe faff 	bl	8004bfa <vListInsert>
}
 80065fc:	e010      	b.n	8006620 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006638 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	4b0a      	ldr	r3, [pc, #40]	@ (800662c <prvAddCurrentTaskToDelayedList+0x94>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3304      	adds	r3, #4
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f7fe faf5 	bl	8004bfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006610:	4b0a      	ldr	r3, [pc, #40]	@ (800663c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	429a      	cmp	r2, r3
 8006618:	d202      	bcs.n	8006620 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800661a:	4a08      	ldr	r2, [pc, #32]	@ (800663c <prvAddCurrentTaskToDelayedList+0xa4>)
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	6013      	str	r3, [r2, #0]
}
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	20000e50 	.word	0x20000e50
 800662c:	20000978 	.word	0x20000978
 8006630:	20000e38 	.word	0x20000e38
 8006634:	20000e08 	.word	0x20000e08
 8006638:	20000e04 	.word	0x20000e04
 800663c:	20000e6c 	.word	0x20000e6c

08006640 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08a      	sub	sp, #40	@ 0x28
 8006644:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800664a:	f000 fb13 	bl	8006c74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800664e:	4b1d      	ldr	r3, [pc, #116]	@ (80066c4 <xTimerCreateTimerTask+0x84>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d021      	beq.n	800669a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800665a:	2300      	movs	r3, #0
 800665c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800665e:	1d3a      	adds	r2, r7, #4
 8006660:	f107 0108 	add.w	r1, r7, #8
 8006664:	f107 030c 	add.w	r3, r7, #12
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe f865 	bl	8004738 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	9202      	str	r2, [sp, #8]
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	2302      	movs	r3, #2
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	2300      	movs	r3, #0
 800667e:	460a      	mov	r2, r1
 8006680:	4911      	ldr	r1, [pc, #68]	@ (80066c8 <xTimerCreateTimerTask+0x88>)
 8006682:	4812      	ldr	r0, [pc, #72]	@ (80066cc <xTimerCreateTimerTask+0x8c>)
 8006684:	f7ff f816 	bl	80056b4 <xTaskCreateStatic>
 8006688:	4603      	mov	r3, r0
 800668a:	4a11      	ldr	r2, [pc, #68]	@ (80066d0 <xTimerCreateTimerTask+0x90>)
 800668c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800668e:	4b10      	ldr	r3, [pc, #64]	@ (80066d0 <xTimerCreateTimerTask+0x90>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006696:	2301      	movs	r3, #1
 8006698:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10b      	bne.n	80066b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	613b      	str	r3, [r7, #16]
}
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
 80066b6:	e7fd      	b.n	80066b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80066b8:	697b      	ldr	r3, [r7, #20]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000ea8 	.word	0x20000ea8
 80066c8:	08008cc4 	.word	0x08008cc4
 80066cc:	0800680d 	.word	0x0800680d
 80066d0:	20000eac 	.word	0x20000eac

080066d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	@ 0x28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10b      	bne.n	8006704 <xTimerGenericCommand+0x30>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	623b      	str	r3, [r7, #32]
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	e7fd      	b.n	8006700 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006704:	4b19      	ldr	r3, [pc, #100]	@ (800676c <xTimerGenericCommand+0x98>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d02a      	beq.n	8006762 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b05      	cmp	r3, #5
 800671c:	dc18      	bgt.n	8006750 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800671e:	f7ff fe95 	bl	800644c <xTaskGetSchedulerState>
 8006722:	4603      	mov	r3, r0
 8006724:	2b02      	cmp	r3, #2
 8006726:	d109      	bne.n	800673c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006728:	4b10      	ldr	r3, [pc, #64]	@ (800676c <xTimerGenericCommand+0x98>)
 800672a:	6818      	ldr	r0, [r3, #0]
 800672c:	f107 0110 	add.w	r1, r7, #16
 8006730:	2300      	movs	r3, #0
 8006732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006734:	f7fe fbce 	bl	8004ed4 <xQueueGenericSend>
 8006738:	6278      	str	r0, [r7, #36]	@ 0x24
 800673a:	e012      	b.n	8006762 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800673c:	4b0b      	ldr	r3, [pc, #44]	@ (800676c <xTimerGenericCommand+0x98>)
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	f107 0110 	add.w	r1, r7, #16
 8006744:	2300      	movs	r3, #0
 8006746:	2200      	movs	r2, #0
 8006748:	f7fe fbc4 	bl	8004ed4 <xQueueGenericSend>
 800674c:	6278      	str	r0, [r7, #36]	@ 0x24
 800674e:	e008      	b.n	8006762 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006750:	4b06      	ldr	r3, [pc, #24]	@ (800676c <xTimerGenericCommand+0x98>)
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	f107 0110 	add.w	r1, r7, #16
 8006758:	2300      	movs	r3, #0
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	f7fe fcbc 	bl	80050d8 <xQueueGenericSendFromISR>
 8006760:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006764:	4618      	mov	r0, r3
 8006766:	3728      	adds	r7, #40	@ 0x28
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	20000ea8 	.word	0x20000ea8

08006770 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af02      	add	r7, sp, #8
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800677a:	4b23      	ldr	r3, [pc, #140]	@ (8006808 <prvProcessExpiredTimer+0x98>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	3304      	adds	r3, #4
 8006788:	4618      	mov	r0, r3
 800678a:	f7fe fa6f 	bl	8004c6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	d023      	beq.n	80067e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	699a      	ldr	r2, [r3, #24]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	18d1      	adds	r1, r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	6978      	ldr	r0, [r7, #20]
 80067aa:	f000 f8d5 	bl	8006958 <prvInsertTimerInActiveList>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d020      	beq.n	80067f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067b4:	2300      	movs	r3, #0
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	2300      	movs	r3, #0
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	2100      	movs	r1, #0
 80067be:	6978      	ldr	r0, [r7, #20]
 80067c0:	f7ff ff88 	bl	80066d4 <xTimerGenericCommand>
 80067c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d114      	bne.n	80067f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	60fb      	str	r3, [r7, #12]
}
 80067de:	bf00      	nop
 80067e0:	bf00      	nop
 80067e2:	e7fd      	b.n	80067e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	6978      	ldr	r0, [r7, #20]
 80067fc:	4798      	blx	r3
}
 80067fe:	bf00      	nop
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000ea0 	.word	0x20000ea0

0800680c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006814:	f107 0308 	add.w	r3, r7, #8
 8006818:	4618      	mov	r0, r3
 800681a:	f000 f859 	bl	80068d0 <prvGetNextExpireTime>
 800681e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4619      	mov	r1, r3
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f805 	bl	8006834 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800682a:	f000 f8d7 	bl	80069dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800682e:	bf00      	nop
 8006830:	e7f0      	b.n	8006814 <prvTimerTask+0x8>
	...

08006834 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800683e:	f7ff f97d 	bl	8005b3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006842:	f107 0308 	add.w	r3, r7, #8
 8006846:	4618      	mov	r0, r3
 8006848:	f000 f866 	bl	8006918 <prvSampleTimeNow>
 800684c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d130      	bne.n	80068b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <prvProcessTimerOrBlockTask+0x3c>
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	429a      	cmp	r2, r3
 8006860:	d806      	bhi.n	8006870 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006862:	f7ff f979 	bl	8005b58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006866:	68f9      	ldr	r1, [r7, #12]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff ff81 	bl	8006770 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800686e:	e024      	b.n	80068ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d008      	beq.n	8006888 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006876:	4b13      	ldr	r3, [pc, #76]	@ (80068c4 <prvProcessTimerOrBlockTask+0x90>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <prvProcessTimerOrBlockTask+0x50>
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <prvProcessTimerOrBlockTask+0x52>
 8006884:	2300      	movs	r3, #0
 8006886:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006888:	4b0f      	ldr	r3, [pc, #60]	@ (80068c8 <prvProcessTimerOrBlockTask+0x94>)
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	4619      	mov	r1, r3
 8006896:	f7fe fed9 	bl	800564c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800689a:	f7ff f95d 	bl	8005b58 <xTaskResumeAll>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10a      	bne.n	80068ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80068a4:	4b09      	ldr	r3, [pc, #36]	@ (80068cc <prvProcessTimerOrBlockTask+0x98>)
 80068a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	f3bf 8f6f 	isb	sy
}
 80068b4:	e001      	b.n	80068ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80068b6:	f7ff f94f 	bl	8005b58 <xTaskResumeAll>
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000ea4 	.word	0x20000ea4
 80068c8:	20000ea8 	.word	0x20000ea8
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006914 <prvGetNextExpireTime+0x44>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <prvGetNextExpireTime+0x16>
 80068e2:	2201      	movs	r2, #1
 80068e4:	e000      	b.n	80068e8 <prvGetNextExpireTime+0x18>
 80068e6:	2200      	movs	r2, #0
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d105      	bne.n	8006900 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068f4:	4b07      	ldr	r3, [pc, #28]	@ (8006914 <prvGetNextExpireTime+0x44>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	e001      	b.n	8006904 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006904:	68fb      	ldr	r3, [r7, #12]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	20000ea0 	.word	0x20000ea0

08006918 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006920:	f7ff f9b8 	bl	8005c94 <xTaskGetTickCount>
 8006924:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006926:	4b0b      	ldr	r3, [pc, #44]	@ (8006954 <prvSampleTimeNow+0x3c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	429a      	cmp	r2, r3
 800692e:	d205      	bcs.n	800693c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006930:	f000 f93a 	bl	8006ba8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	e002      	b.n	8006942 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006942:	4a04      	ldr	r2, [pc, #16]	@ (8006954 <prvSampleTimeNow+0x3c>)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006948:	68fb      	ldr	r3, [r7, #12]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20000eb0 	.word	0x20000eb0

08006958 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	429a      	cmp	r2, r3
 800697c:	d812      	bhi.n	80069a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	1ad2      	subs	r2, r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	429a      	cmp	r2, r3
 800698a:	d302      	bcc.n	8006992 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800698c:	2301      	movs	r3, #1
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	e01b      	b.n	80069ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006992:	4b10      	ldr	r3, [pc, #64]	@ (80069d4 <prvInsertTimerInActiveList+0x7c>)
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3304      	adds	r3, #4
 800699a:	4619      	mov	r1, r3
 800699c:	4610      	mov	r0, r2
 800699e:	f7fe f92c 	bl	8004bfa <vListInsert>
 80069a2:	e012      	b.n	80069ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d206      	bcs.n	80069ba <prvInsertTimerInActiveList+0x62>
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d302      	bcc.n	80069ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80069b4:	2301      	movs	r3, #1
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e007      	b.n	80069ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069ba:	4b07      	ldr	r3, [pc, #28]	@ (80069d8 <prvInsertTimerInActiveList+0x80>)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3304      	adds	r3, #4
 80069c2:	4619      	mov	r1, r3
 80069c4:	4610      	mov	r0, r2
 80069c6:	f7fe f918 	bl	8004bfa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069ca:	697b      	ldr	r3, [r7, #20]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20000ea4 	.word	0x20000ea4
 80069d8:	20000ea0 	.word	0x20000ea0

080069dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08e      	sub	sp, #56	@ 0x38
 80069e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069e2:	e0ce      	b.n	8006b82 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da19      	bge.n	8006a1e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80069ea:	1d3b      	adds	r3, r7, #4
 80069ec:	3304      	adds	r3, #4
 80069ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80069f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	61fb      	str	r3, [r7, #28]
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	e7fd      	b.n	8006a0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a14:	6850      	ldr	r0, [r2, #4]
 8006a16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a18:	6892      	ldr	r2, [r2, #8]
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f2c0 80ae 	blt.w	8006b82 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d004      	beq.n	8006a3c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a34:	3304      	adds	r3, #4
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe f918 	bl	8004c6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a3c:	463b      	mov	r3, r7
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff ff6a 	bl	8006918 <prvSampleTimeNow>
 8006a44:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b09      	cmp	r3, #9
 8006a4a:	f200 8097 	bhi.w	8006b7c <prvProcessReceivedCommands+0x1a0>
 8006a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a54 <prvProcessReceivedCommands+0x78>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a7d 	.word	0x08006a7d
 8006a58:	08006a7d 	.word	0x08006a7d
 8006a5c:	08006a7d 	.word	0x08006a7d
 8006a60:	08006af3 	.word	0x08006af3
 8006a64:	08006b07 	.word	0x08006b07
 8006a68:	08006b53 	.word	0x08006b53
 8006a6c:	08006a7d 	.word	0x08006a7d
 8006a70:	08006a7d 	.word	0x08006a7d
 8006a74:	08006af3 	.word	0x08006af3
 8006a78:	08006b07 	.word	0x08006b07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a82:	f043 0301 	orr.w	r3, r3, #1
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	18d1      	adds	r1, r2, r3
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a9c:	f7ff ff5c 	bl	8006958 <prvInsertTimerInActiveList>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d06c      	beq.n	8006b80 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d061      	beq.n	8006b80 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	441a      	add	r2, r3
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	2100      	movs	r1, #0
 8006acc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ace:	f7ff fe01 	bl	80066d4 <xTimerGenericCommand>
 8006ad2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d152      	bne.n	8006b80 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	61bb      	str	r3, [r7, #24]
}
 8006aec:	bf00      	nop
 8006aee:	bf00      	nop
 8006af0:	e7fd      	b.n	8006aee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006b04:	e03d      	b.n	8006b82 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b0c:	f043 0301 	orr.w	r3, r3, #1
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10b      	bne.n	8006b3e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	617b      	str	r3, [r7, #20]
}
 8006b38:	bf00      	nop
 8006b3a:	bf00      	nop
 8006b3c:	e7fd      	b.n	8006b3a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b44:	18d1      	adds	r1, r2, r3
 8006b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b4c:	f7ff ff04 	bl	8006958 <prvInsertTimerInActiveList>
					break;
 8006b50:	e017      	b.n	8006b82 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d103      	bne.n	8006b68 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006b60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b62:	f000 fc09 	bl	8007378 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b66:	e00c      	b.n	8006b82 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b6e:	f023 0301 	bic.w	r3, r3, #1
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006b7a:	e002      	b.n	8006b82 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006b7c:	bf00      	nop
 8006b7e:	e000      	b.n	8006b82 <prvProcessReceivedCommands+0x1a6>
					break;
 8006b80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b82:	4b08      	ldr	r3, [pc, #32]	@ (8006ba4 <prvProcessReceivedCommands+0x1c8>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	1d39      	adds	r1, r7, #4
 8006b88:	2200      	movs	r2, #0
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fe fb42 	bl	8005214 <xQueueReceive>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f47f af26 	bne.w	80069e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	3730      	adds	r7, #48	@ 0x30
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000ea8 	.word	0x20000ea8

08006ba8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bae:	e049      	b.n	8006c44 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8006c6c <prvSwitchTimerLists+0xc4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bba:	4b2c      	ldr	r3, [pc, #176]	@ (8006c6c <prvSwitchTimerLists+0xc4>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe f84f 	bl	8004c6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d02f      	beq.n	8006c44 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4413      	add	r3, r2
 8006bec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d90e      	bls.n	8006c14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c02:	4b1a      	ldr	r3, [pc, #104]	@ (8006c6c <prvSwitchTimerLists+0xc4>)
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	f7fd fff4 	bl	8004bfa <vListInsert>
 8006c12:	e017      	b.n	8006c44 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c14:	2300      	movs	r3, #0
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7ff fd58 	bl	80066d4 <xTimerGenericCommand>
 8006c24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10b      	bne.n	8006c44 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	603b      	str	r3, [r7, #0]
}
 8006c3e:	bf00      	nop
 8006c40:	bf00      	nop
 8006c42:	e7fd      	b.n	8006c40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c44:	4b09      	ldr	r3, [pc, #36]	@ (8006c6c <prvSwitchTimerLists+0xc4>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1b0      	bne.n	8006bb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c4e:	4b07      	ldr	r3, [pc, #28]	@ (8006c6c <prvSwitchTimerLists+0xc4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c54:	4b06      	ldr	r3, [pc, #24]	@ (8006c70 <prvSwitchTimerLists+0xc8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a04      	ldr	r2, [pc, #16]	@ (8006c6c <prvSwitchTimerLists+0xc4>)
 8006c5a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c5c:	4a04      	ldr	r2, [pc, #16]	@ (8006c70 <prvSwitchTimerLists+0xc8>)
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	6013      	str	r3, [r2, #0]
}
 8006c62:	bf00      	nop
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000ea0 	.word	0x20000ea0
 8006c70:	20000ea4 	.word	0x20000ea4

08006c74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c7a:	f000 f98d 	bl	8006f98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c7e:	4b15      	ldr	r3, [pc, #84]	@ (8006cd4 <prvCheckForValidListAndQueue+0x60>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d120      	bne.n	8006cc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c86:	4814      	ldr	r0, [pc, #80]	@ (8006cd8 <prvCheckForValidListAndQueue+0x64>)
 8006c88:	f7fd ff66 	bl	8004b58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c8c:	4813      	ldr	r0, [pc, #76]	@ (8006cdc <prvCheckForValidListAndQueue+0x68>)
 8006c8e:	f7fd ff63 	bl	8004b58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c92:	4b13      	ldr	r3, [pc, #76]	@ (8006ce0 <prvCheckForValidListAndQueue+0x6c>)
 8006c94:	4a10      	ldr	r2, [pc, #64]	@ (8006cd8 <prvCheckForValidListAndQueue+0x64>)
 8006c96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c98:	4b12      	ldr	r3, [pc, #72]	@ (8006ce4 <prvCheckForValidListAndQueue+0x70>)
 8006c9a:	4a10      	ldr	r2, [pc, #64]	@ (8006cdc <prvCheckForValidListAndQueue+0x68>)
 8006c9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	4b11      	ldr	r3, [pc, #68]	@ (8006ce8 <prvCheckForValidListAndQueue+0x74>)
 8006ca4:	4a11      	ldr	r2, [pc, #68]	@ (8006cec <prvCheckForValidListAndQueue+0x78>)
 8006ca6:	2110      	movs	r1, #16
 8006ca8:	200a      	movs	r0, #10
 8006caa:	f7fe f873 	bl	8004d94 <xQueueGenericCreateStatic>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4a08      	ldr	r2, [pc, #32]	@ (8006cd4 <prvCheckForValidListAndQueue+0x60>)
 8006cb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006cb4:	4b07      	ldr	r3, [pc, #28]	@ (8006cd4 <prvCheckForValidListAndQueue+0x60>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006cbc:	4b05      	ldr	r3, [pc, #20]	@ (8006cd4 <prvCheckForValidListAndQueue+0x60>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	490b      	ldr	r1, [pc, #44]	@ (8006cf0 <prvCheckForValidListAndQueue+0x7c>)
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe fc98 	bl	80055f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cc8:	f000 f998 	bl	8006ffc <vPortExitCritical>
}
 8006ccc:	bf00      	nop
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000ea8 	.word	0x20000ea8
 8006cd8:	20000e78 	.word	0x20000e78
 8006cdc:	20000e8c 	.word	0x20000e8c
 8006ce0:	20000ea0 	.word	0x20000ea0
 8006ce4:	20000ea4 	.word	0x20000ea4
 8006ce8:	20000f54 	.word	0x20000f54
 8006cec:	20000eb4 	.word	0x20000eb4
 8006cf0:	08008ccc 	.word	0x08008ccc

08006cf4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08a      	sub	sp, #40	@ 0x28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006d02:	f06f 0301 	mvn.w	r3, #1
 8006d06:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d14:	4b06      	ldr	r3, [pc, #24]	@ (8006d30 <xTimerPendFunctionCallFromISR+0x3c>)
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	f107 0114 	add.w	r1, r7, #20
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	f7fe f9da 	bl	80050d8 <xQueueGenericSendFromISR>
 8006d24:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3728      	adds	r7, #40	@ 0x28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20000ea8 	.word	0x20000ea8

08006d34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3b04      	subs	r3, #4
 8006d44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3b04      	subs	r3, #4
 8006d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f023 0201 	bic.w	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3b04      	subs	r3, #4
 8006d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d64:	4a0c      	ldr	r2, [pc, #48]	@ (8006d98 <pxPortInitialiseStack+0x64>)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3b14      	subs	r3, #20
 8006d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	3b04      	subs	r3, #4
 8006d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f06f 0202 	mvn.w	r2, #2
 8006d82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3b20      	subs	r3, #32
 8006d88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	08006d9d 	.word	0x08006d9d

08006d9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006da6:	4b13      	ldr	r3, [pc, #76]	@ (8006df4 <prvTaskExitError+0x58>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d00b      	beq.n	8006dc8 <prvTaskExitError+0x2c>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60fb      	str	r3, [r7, #12]
}
 8006dc2:	bf00      	nop
 8006dc4:	bf00      	nop
 8006dc6:	e7fd      	b.n	8006dc4 <prvTaskExitError+0x28>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	60bb      	str	r3, [r7, #8]
}
 8006dda:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ddc:	bf00      	nop
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0fc      	beq.n	8006dde <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	20000034 	.word	0x20000034
	...

08006e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e00:	4b07      	ldr	r3, [pc, #28]	@ (8006e20 <pxCurrentTCBConst2>)
 8006e02:	6819      	ldr	r1, [r3, #0]
 8006e04:	6808      	ldr	r0, [r1, #0]
 8006e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0a:	f380 8809 	msr	PSP, r0
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f04f 0000 	mov.w	r0, #0
 8006e16:	f380 8811 	msr	BASEPRI, r0
 8006e1a:	4770      	bx	lr
 8006e1c:	f3af 8000 	nop.w

08006e20 <pxCurrentTCBConst2>:
 8006e20:	20000978 	.word	0x20000978
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop

08006e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e28:	4808      	ldr	r0, [pc, #32]	@ (8006e4c <prvPortStartFirstTask+0x24>)
 8006e2a:	6800      	ldr	r0, [r0, #0]
 8006e2c:	6800      	ldr	r0, [r0, #0]
 8006e2e:	f380 8808 	msr	MSP, r0
 8006e32:	f04f 0000 	mov.w	r0, #0
 8006e36:	f380 8814 	msr	CONTROL, r0
 8006e3a:	b662      	cpsie	i
 8006e3c:	b661      	cpsie	f
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	df00      	svc	0
 8006e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e4a:	bf00      	nop
 8006e4c:	e000ed08 	.word	0xe000ed08

08006e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e56:	4b47      	ldr	r3, [pc, #284]	@ (8006f74 <xPortStartScheduler+0x124>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a47      	ldr	r2, [pc, #284]	@ (8006f78 <xPortStartScheduler+0x128>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d10b      	bne.n	8006e78 <xPortStartScheduler+0x28>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	60fb      	str	r3, [r7, #12]
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	e7fd      	b.n	8006e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e78:	4b3e      	ldr	r3, [pc, #248]	@ (8006f74 <xPortStartScheduler+0x124>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a3f      	ldr	r2, [pc, #252]	@ (8006f7c <xPortStartScheduler+0x12c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d10b      	bne.n	8006e9a <xPortStartScheduler+0x4a>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	613b      	str	r3, [r7, #16]
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop
 8006e98:	e7fd      	b.n	8006e96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e9a:	4b39      	ldr	r3, [pc, #228]	@ (8006f80 <xPortStartScheduler+0x130>)
 8006e9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	22ff      	movs	r2, #255	@ 0xff
 8006eaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006eb4:	78fb      	ldrb	r3, [r7, #3]
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	4b31      	ldr	r3, [pc, #196]	@ (8006f84 <xPortStartScheduler+0x134>)
 8006ec0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ec2:	4b31      	ldr	r3, [pc, #196]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006ec4:	2207      	movs	r2, #7
 8006ec6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ec8:	e009      	b.n	8006ede <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006eca:	4b2f      	ldr	r3, [pc, #188]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006ed2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ed4:	78fb      	ldrb	r3, [r7, #3]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ee6:	2b80      	cmp	r3, #128	@ 0x80
 8006ee8:	d0ef      	beq.n	8006eca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006eea:	4b27      	ldr	r3, [pc, #156]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f1c3 0307 	rsb	r3, r3, #7
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	d00b      	beq.n	8006f0e <xPortStartScheduler+0xbe>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	60bb      	str	r3, [r7, #8]
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	e7fd      	b.n	8006f0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	021b      	lsls	r3, r3, #8
 8006f14:	4a1c      	ldr	r2, [pc, #112]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006f16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f18:	4b1b      	ldr	r3, [pc, #108]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f20:	4a19      	ldr	r2, [pc, #100]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006f22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f2c:	4b17      	ldr	r3, [pc, #92]	@ (8006f8c <xPortStartScheduler+0x13c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a16      	ldr	r2, [pc, #88]	@ (8006f8c <xPortStartScheduler+0x13c>)
 8006f32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006f36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f38:	4b14      	ldr	r3, [pc, #80]	@ (8006f8c <xPortStartScheduler+0x13c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a13      	ldr	r2, [pc, #76]	@ (8006f8c <xPortStartScheduler+0x13c>)
 8006f3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006f42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f44:	f000 f8da 	bl	80070fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f48:	4b11      	ldr	r3, [pc, #68]	@ (8006f90 <xPortStartScheduler+0x140>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f4e:	f000 f8f9 	bl	8007144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f52:	4b10      	ldr	r3, [pc, #64]	@ (8006f94 <xPortStartScheduler+0x144>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a0f      	ldr	r2, [pc, #60]	@ (8006f94 <xPortStartScheduler+0x144>)
 8006f58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006f5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f5e:	f7ff ff63 	bl	8006e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f62:	f7fe ff61 	bl	8005e28 <vTaskSwitchContext>
	prvTaskExitError();
 8006f66:	f7ff ff19 	bl	8006d9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	e000ed00 	.word	0xe000ed00
 8006f78:	410fc271 	.word	0x410fc271
 8006f7c:	410fc270 	.word	0x410fc270
 8006f80:	e000e400 	.word	0xe000e400
 8006f84:	20000fa4 	.word	0x20000fa4
 8006f88:	20000fa8 	.word	0x20000fa8
 8006f8c:	e000ed20 	.word	0xe000ed20
 8006f90:	20000034 	.word	0x20000034
 8006f94:	e000ef34 	.word	0xe000ef34

08006f98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	607b      	str	r3, [r7, #4]
}
 8006fb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006fb2:	4b10      	ldr	r3, [pc, #64]	@ (8006ff4 <vPortEnterCritical+0x5c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8006ff4 <vPortEnterCritical+0x5c>)
 8006fba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff4 <vPortEnterCritical+0x5c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d110      	bne.n	8006fe6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff8 <vPortEnterCritical+0x60>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00b      	beq.n	8006fe6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	603b      	str	r3, [r7, #0]
}
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	e7fd      	b.n	8006fe2 <vPortEnterCritical+0x4a>
	}
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000034 	.word	0x20000034
 8006ff8:	e000ed04 	.word	0xe000ed04

08006ffc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007002:	4b12      	ldr	r3, [pc, #72]	@ (800704c <vPortExitCritical+0x50>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <vPortExitCritical+0x26>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	607b      	str	r3, [r7, #4]
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	e7fd      	b.n	800701e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007022:	4b0a      	ldr	r3, [pc, #40]	@ (800704c <vPortExitCritical+0x50>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3b01      	subs	r3, #1
 8007028:	4a08      	ldr	r2, [pc, #32]	@ (800704c <vPortExitCritical+0x50>)
 800702a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800702c:	4b07      	ldr	r3, [pc, #28]	@ (800704c <vPortExitCritical+0x50>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d105      	bne.n	8007040 <vPortExitCritical+0x44>
 8007034:	2300      	movs	r3, #0
 8007036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	f383 8811 	msr	BASEPRI, r3
}
 800703e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	20000034 	.word	0x20000034

08007050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007050:	f3ef 8009 	mrs	r0, PSP
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	4b15      	ldr	r3, [pc, #84]	@ (80070b0 <pxCurrentTCBConst>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	f01e 0f10 	tst.w	lr, #16
 8007060:	bf08      	it	eq
 8007062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706a:	6010      	str	r0, [r2, #0]
 800706c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007070:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007074:	f380 8811 	msr	BASEPRI, r0
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f7fe fed2 	bl	8005e28 <vTaskSwitchContext>
 8007084:	f04f 0000 	mov.w	r0, #0
 8007088:	f380 8811 	msr	BASEPRI, r0
 800708c:	bc09      	pop	{r0, r3}
 800708e:	6819      	ldr	r1, [r3, #0]
 8007090:	6808      	ldr	r0, [r1, #0]
 8007092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007096:	f01e 0f10 	tst.w	lr, #16
 800709a:	bf08      	it	eq
 800709c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070a0:	f380 8809 	msr	PSP, r0
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	f3af 8000 	nop.w

080070b0 <pxCurrentTCBConst>:
 80070b0:	20000978 	.word	0x20000978
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop

080070b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	607b      	str	r3, [r7, #4]
}
 80070d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070d2:	f7fe fdef 	bl	8005cb4 <xTaskIncrementTick>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070dc:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <xPortSysTickHandler+0x40>)
 80070de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	2300      	movs	r3, #0
 80070e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	f383 8811 	msr	BASEPRI, r3
}
 80070ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007100:	4b0b      	ldr	r3, [pc, #44]	@ (8007130 <vPortSetupTimerInterrupt+0x34>)
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007106:	4b0b      	ldr	r3, [pc, #44]	@ (8007134 <vPortSetupTimerInterrupt+0x38>)
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800710c:	4b0a      	ldr	r3, [pc, #40]	@ (8007138 <vPortSetupTimerInterrupt+0x3c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a0a      	ldr	r2, [pc, #40]	@ (800713c <vPortSetupTimerInterrupt+0x40>)
 8007112:	fba2 2303 	umull	r2, r3, r2, r3
 8007116:	099b      	lsrs	r3, r3, #6
 8007118:	4a09      	ldr	r2, [pc, #36]	@ (8007140 <vPortSetupTimerInterrupt+0x44>)
 800711a:	3b01      	subs	r3, #1
 800711c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800711e:	4b04      	ldr	r3, [pc, #16]	@ (8007130 <vPortSetupTimerInterrupt+0x34>)
 8007120:	2207      	movs	r2, #7
 8007122:	601a      	str	r2, [r3, #0]
}
 8007124:	bf00      	nop
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	e000e010 	.word	0xe000e010
 8007134:	e000e018 	.word	0xe000e018
 8007138:	20000028 	.word	0x20000028
 800713c:	10624dd3 	.word	0x10624dd3
 8007140:	e000e014 	.word	0xe000e014

08007144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007144:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007154 <vPortEnableVFP+0x10>
 8007148:	6801      	ldr	r1, [r0, #0]
 800714a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800714e:	6001      	str	r1, [r0, #0]
 8007150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007152:	bf00      	nop
 8007154:	e000ed88 	.word	0xe000ed88

08007158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800715e:	f3ef 8305 	mrs	r3, IPSR
 8007162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b0f      	cmp	r3, #15
 8007168:	d915      	bls.n	8007196 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800716a:	4a18      	ldr	r2, [pc, #96]	@ (80071cc <vPortValidateInterruptPriority+0x74>)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007174:	4b16      	ldr	r3, [pc, #88]	@ (80071d0 <vPortValidateInterruptPriority+0x78>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	7afa      	ldrb	r2, [r7, #11]
 800717a:	429a      	cmp	r2, r3
 800717c:	d20b      	bcs.n	8007196 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	607b      	str	r3, [r7, #4]
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	e7fd      	b.n	8007192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007196:	4b0f      	ldr	r3, [pc, #60]	@ (80071d4 <vPortValidateInterruptPriority+0x7c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800719e:	4b0e      	ldr	r3, [pc, #56]	@ (80071d8 <vPortValidateInterruptPriority+0x80>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d90b      	bls.n	80071be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	603b      	str	r3, [r7, #0]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <vPortValidateInterruptPriority+0x62>
	}
 80071be:	bf00      	nop
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	e000e3f0 	.word	0xe000e3f0
 80071d0:	20000fa4 	.word	0x20000fa4
 80071d4:	e000ed0c 	.word	0xe000ed0c
 80071d8:	20000fa8 	.word	0x20000fa8

080071dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08a      	sub	sp, #40	@ 0x28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071e4:	2300      	movs	r3, #0
 80071e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071e8:	f7fe fca8 	bl	8005b3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007360 <pvPortMalloc+0x184>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071f4:	f000 f930 	bl	8007458 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007364 <pvPortMalloc+0x188>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4013      	ands	r3, r2
 8007200:	2b00      	cmp	r3, #0
 8007202:	f040 8095 	bne.w	8007330 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01e      	beq.n	800724a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800720c:	2208      	movs	r2, #8
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4413      	add	r3, r2
 8007212:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	2b00      	cmp	r3, #0
 800721c:	d015      	beq.n	800724a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f023 0307 	bic.w	r3, r3, #7
 8007224:	3308      	adds	r3, #8
 8007226:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f003 0307 	and.w	r3, r3, #7
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00b      	beq.n	800724a <pvPortMalloc+0x6e>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	617b      	str	r3, [r7, #20]
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	e7fd      	b.n	8007246 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d06f      	beq.n	8007330 <pvPortMalloc+0x154>
 8007250:	4b45      	ldr	r3, [pc, #276]	@ (8007368 <pvPortMalloc+0x18c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	429a      	cmp	r2, r3
 8007258:	d86a      	bhi.n	8007330 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800725a:	4b44      	ldr	r3, [pc, #272]	@ (800736c <pvPortMalloc+0x190>)
 800725c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800725e:	4b43      	ldr	r3, [pc, #268]	@ (800736c <pvPortMalloc+0x190>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007264:	e004      	b.n	8007270 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	429a      	cmp	r2, r3
 8007278:	d903      	bls.n	8007282 <pvPortMalloc+0xa6>
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f1      	bne.n	8007266 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007282:	4b37      	ldr	r3, [pc, #220]	@ (8007360 <pvPortMalloc+0x184>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007288:	429a      	cmp	r2, r3
 800728a:	d051      	beq.n	8007330 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2208      	movs	r2, #8
 8007292:	4413      	add	r3, r2
 8007294:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	1ad2      	subs	r2, r2, r3
 80072a6:	2308      	movs	r3, #8
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d920      	bls.n	80072f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4413      	add	r3, r2
 80072b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <pvPortMalloc+0xfc>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	613b      	str	r3, [r7, #16]
}
 80072d2:	bf00      	nop
 80072d4:	bf00      	nop
 80072d6:	e7fd      	b.n	80072d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	1ad2      	subs	r2, r2, r3
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072ea:	69b8      	ldr	r0, [r7, #24]
 80072ec:	f000 f916 	bl	800751c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007368 <pvPortMalloc+0x18c>)
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007368 <pvPortMalloc+0x18c>)
 80072fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007368 <pvPortMalloc+0x18c>)
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	4b1b      	ldr	r3, [pc, #108]	@ (8007370 <pvPortMalloc+0x194>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d203      	bcs.n	8007312 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800730a:	4b17      	ldr	r3, [pc, #92]	@ (8007368 <pvPortMalloc+0x18c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a18      	ldr	r2, [pc, #96]	@ (8007370 <pvPortMalloc+0x194>)
 8007310:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	4b13      	ldr	r3, [pc, #76]	@ (8007364 <pvPortMalloc+0x188>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	431a      	orrs	r2, r3
 800731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007326:	4b13      	ldr	r3, [pc, #76]	@ (8007374 <pvPortMalloc+0x198>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3301      	adds	r3, #1
 800732c:	4a11      	ldr	r2, [pc, #68]	@ (8007374 <pvPortMalloc+0x198>)
 800732e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007330:	f7fe fc12 	bl	8005b58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <pvPortMalloc+0x17a>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	60fb      	str	r3, [r7, #12]
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	e7fd      	b.n	8007352 <pvPortMalloc+0x176>
	return pvReturn;
 8007356:	69fb      	ldr	r3, [r7, #28]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3728      	adds	r7, #40	@ 0x28
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20004bb4 	.word	0x20004bb4
 8007364:	20004bc8 	.word	0x20004bc8
 8007368:	20004bb8 	.word	0x20004bb8
 800736c:	20004bac 	.word	0x20004bac
 8007370:	20004bbc 	.word	0x20004bbc
 8007374:	20004bc0 	.word	0x20004bc0

08007378 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d04f      	beq.n	800742a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800738a:	2308      	movs	r3, #8
 800738c:	425b      	negs	r3, r3
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4413      	add	r3, r2
 8007392:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	4b25      	ldr	r3, [pc, #148]	@ (8007434 <vPortFree+0xbc>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4013      	ands	r3, r2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10b      	bne.n	80073be <vPortFree+0x46>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	60fb      	str	r3, [r7, #12]
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	e7fd      	b.n	80073ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00b      	beq.n	80073de <vPortFree+0x66>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	60bb      	str	r3, [r7, #8]
}
 80073d8:	bf00      	nop
 80073da:	bf00      	nop
 80073dc:	e7fd      	b.n	80073da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	4b14      	ldr	r3, [pc, #80]	@ (8007434 <vPortFree+0xbc>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01e      	beq.n	800742a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d11a      	bne.n	800742a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007434 <vPortFree+0xbc>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	43db      	mvns	r3, r3
 80073fe:	401a      	ands	r2, r3
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007404:	f7fe fb9a 	bl	8005b3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	4b0a      	ldr	r3, [pc, #40]	@ (8007438 <vPortFree+0xc0>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4413      	add	r3, r2
 8007412:	4a09      	ldr	r2, [pc, #36]	@ (8007438 <vPortFree+0xc0>)
 8007414:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007416:	6938      	ldr	r0, [r7, #16]
 8007418:	f000 f880 	bl	800751c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800741c:	4b07      	ldr	r3, [pc, #28]	@ (800743c <vPortFree+0xc4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3301      	adds	r3, #1
 8007422:	4a06      	ldr	r2, [pc, #24]	@ (800743c <vPortFree+0xc4>)
 8007424:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007426:	f7fe fb97 	bl	8005b58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800742a:	bf00      	nop
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20004bc8 	.word	0x20004bc8
 8007438:	20004bb8 	.word	0x20004bb8
 800743c:	20004bc4 	.word	0x20004bc4

08007440 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8007444:	4b03      	ldr	r3, [pc, #12]	@ (8007454 <xPortGetFreeHeapSize+0x14>)
 8007446:	681b      	ldr	r3, [r3, #0]
}
 8007448:	4618      	mov	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20004bb8 	.word	0x20004bb8

08007458 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800745e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007462:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007464:	4b27      	ldr	r3, [pc, #156]	@ (8007504 <prvHeapInit+0xac>)
 8007466:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00c      	beq.n	800748c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3307      	adds	r3, #7
 8007476:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0307 	bic.w	r3, r3, #7
 800747e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	4a1f      	ldr	r2, [pc, #124]	@ (8007504 <prvHeapInit+0xac>)
 8007488:	4413      	add	r3, r2
 800748a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007490:	4a1d      	ldr	r2, [pc, #116]	@ (8007508 <prvHeapInit+0xb0>)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007496:	4b1c      	ldr	r3, [pc, #112]	@ (8007508 <prvHeapInit+0xb0>)
 8007498:	2200      	movs	r2, #0
 800749a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	4413      	add	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074a4:	2208      	movs	r2, #8
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0307 	bic.w	r3, r3, #7
 80074b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4a15      	ldr	r2, [pc, #84]	@ (800750c <prvHeapInit+0xb4>)
 80074b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074ba:	4b14      	ldr	r3, [pc, #80]	@ (800750c <prvHeapInit+0xb4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2200      	movs	r2, #0
 80074c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074c2:	4b12      	ldr	r3, [pc, #72]	@ (800750c <prvHeapInit+0xb4>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	1ad2      	subs	r2, r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074d8:	4b0c      	ldr	r3, [pc, #48]	@ (800750c <prvHeapInit+0xb4>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	4a0a      	ldr	r2, [pc, #40]	@ (8007510 <prvHeapInit+0xb8>)
 80074e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	4a09      	ldr	r2, [pc, #36]	@ (8007514 <prvHeapInit+0xbc>)
 80074ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074f0:	4b09      	ldr	r3, [pc, #36]	@ (8007518 <prvHeapInit+0xc0>)
 80074f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80074f6:	601a      	str	r2, [r3, #0]
}
 80074f8:	bf00      	nop
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	20000fac 	.word	0x20000fac
 8007508:	20004bac 	.word	0x20004bac
 800750c:	20004bb4 	.word	0x20004bb4
 8007510:	20004bbc 	.word	0x20004bbc
 8007514:	20004bb8 	.word	0x20004bb8
 8007518:	20004bc8 	.word	0x20004bc8

0800751c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007524:	4b28      	ldr	r3, [pc, #160]	@ (80075c8 <prvInsertBlockIntoFreeList+0xac>)
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	e002      	b.n	8007530 <prvInsertBlockIntoFreeList+0x14>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	429a      	cmp	r2, r3
 8007538:	d8f7      	bhi.n	800752a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	4413      	add	r3, r2
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	429a      	cmp	r2, r3
 800754a:	d108      	bne.n	800755e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	441a      	add	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	441a      	add	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d118      	bne.n	80075a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	4b15      	ldr	r3, [pc, #84]	@ (80075cc <prvInsertBlockIntoFreeList+0xb0>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d00d      	beq.n	800759a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	441a      	add	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	e008      	b.n	80075ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800759a:	4b0c      	ldr	r3, [pc, #48]	@ (80075cc <prvInsertBlockIntoFreeList+0xb0>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	e003      	b.n	80075ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d002      	beq.n	80075ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ba:	bf00      	nop
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	20004bac 	.word	0x20004bac
 80075cc:	20004bb4 	.word	0x20004bb4

080075d0 <atoi>:
 80075d0:	220a      	movs	r2, #10
 80075d2:	2100      	movs	r1, #0
 80075d4:	f000 b87a 	b.w	80076cc <strtol>

080075d8 <_strtol_l.isra.0>:
 80075d8:	2b24      	cmp	r3, #36	@ 0x24
 80075da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075de:	4686      	mov	lr, r0
 80075e0:	4690      	mov	r8, r2
 80075e2:	d801      	bhi.n	80075e8 <_strtol_l.isra.0+0x10>
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d106      	bne.n	80075f6 <_strtol_l.isra.0+0x1e>
 80075e8:	f000 fa60 	bl	8007aac <__errno>
 80075ec:	2316      	movs	r3, #22
 80075ee:	6003      	str	r3, [r0, #0]
 80075f0:	2000      	movs	r0, #0
 80075f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f6:	4834      	ldr	r0, [pc, #208]	@ (80076c8 <_strtol_l.isra.0+0xf0>)
 80075f8:	460d      	mov	r5, r1
 80075fa:	462a      	mov	r2, r5
 80075fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007600:	5d06      	ldrb	r6, [r0, r4]
 8007602:	f016 0608 	ands.w	r6, r6, #8
 8007606:	d1f8      	bne.n	80075fa <_strtol_l.isra.0+0x22>
 8007608:	2c2d      	cmp	r4, #45	@ 0x2d
 800760a:	d110      	bne.n	800762e <_strtol_l.isra.0+0x56>
 800760c:	782c      	ldrb	r4, [r5, #0]
 800760e:	2601      	movs	r6, #1
 8007610:	1c95      	adds	r5, r2, #2
 8007612:	f033 0210 	bics.w	r2, r3, #16
 8007616:	d115      	bne.n	8007644 <_strtol_l.isra.0+0x6c>
 8007618:	2c30      	cmp	r4, #48	@ 0x30
 800761a:	d10d      	bne.n	8007638 <_strtol_l.isra.0+0x60>
 800761c:	782a      	ldrb	r2, [r5, #0]
 800761e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007622:	2a58      	cmp	r2, #88	@ 0x58
 8007624:	d108      	bne.n	8007638 <_strtol_l.isra.0+0x60>
 8007626:	786c      	ldrb	r4, [r5, #1]
 8007628:	3502      	adds	r5, #2
 800762a:	2310      	movs	r3, #16
 800762c:	e00a      	b.n	8007644 <_strtol_l.isra.0+0x6c>
 800762e:	2c2b      	cmp	r4, #43	@ 0x2b
 8007630:	bf04      	itt	eq
 8007632:	782c      	ldrbeq	r4, [r5, #0]
 8007634:	1c95      	addeq	r5, r2, #2
 8007636:	e7ec      	b.n	8007612 <_strtol_l.isra.0+0x3a>
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1f6      	bne.n	800762a <_strtol_l.isra.0+0x52>
 800763c:	2c30      	cmp	r4, #48	@ 0x30
 800763e:	bf14      	ite	ne
 8007640:	230a      	movne	r3, #10
 8007642:	2308      	moveq	r3, #8
 8007644:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007648:	f10c 3cff 	add.w	ip, ip, #4294967295
 800764c:	2200      	movs	r2, #0
 800764e:	fbbc f9f3 	udiv	r9, ip, r3
 8007652:	4610      	mov	r0, r2
 8007654:	fb03 ca19 	mls	sl, r3, r9, ip
 8007658:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800765c:	2f09      	cmp	r7, #9
 800765e:	d80f      	bhi.n	8007680 <_strtol_l.isra.0+0xa8>
 8007660:	463c      	mov	r4, r7
 8007662:	42a3      	cmp	r3, r4
 8007664:	dd1b      	ble.n	800769e <_strtol_l.isra.0+0xc6>
 8007666:	1c57      	adds	r7, r2, #1
 8007668:	d007      	beq.n	800767a <_strtol_l.isra.0+0xa2>
 800766a:	4581      	cmp	r9, r0
 800766c:	d314      	bcc.n	8007698 <_strtol_l.isra.0+0xc0>
 800766e:	d101      	bne.n	8007674 <_strtol_l.isra.0+0x9c>
 8007670:	45a2      	cmp	sl, r4
 8007672:	db11      	blt.n	8007698 <_strtol_l.isra.0+0xc0>
 8007674:	fb00 4003 	mla	r0, r0, r3, r4
 8007678:	2201      	movs	r2, #1
 800767a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800767e:	e7eb      	b.n	8007658 <_strtol_l.isra.0+0x80>
 8007680:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007684:	2f19      	cmp	r7, #25
 8007686:	d801      	bhi.n	800768c <_strtol_l.isra.0+0xb4>
 8007688:	3c37      	subs	r4, #55	@ 0x37
 800768a:	e7ea      	b.n	8007662 <_strtol_l.isra.0+0x8a>
 800768c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007690:	2f19      	cmp	r7, #25
 8007692:	d804      	bhi.n	800769e <_strtol_l.isra.0+0xc6>
 8007694:	3c57      	subs	r4, #87	@ 0x57
 8007696:	e7e4      	b.n	8007662 <_strtol_l.isra.0+0x8a>
 8007698:	f04f 32ff 	mov.w	r2, #4294967295
 800769c:	e7ed      	b.n	800767a <_strtol_l.isra.0+0xa2>
 800769e:	1c53      	adds	r3, r2, #1
 80076a0:	d108      	bne.n	80076b4 <_strtol_l.isra.0+0xdc>
 80076a2:	2322      	movs	r3, #34	@ 0x22
 80076a4:	f8ce 3000 	str.w	r3, [lr]
 80076a8:	4660      	mov	r0, ip
 80076aa:	f1b8 0f00 	cmp.w	r8, #0
 80076ae:	d0a0      	beq.n	80075f2 <_strtol_l.isra.0+0x1a>
 80076b0:	1e69      	subs	r1, r5, #1
 80076b2:	e006      	b.n	80076c2 <_strtol_l.isra.0+0xea>
 80076b4:	b106      	cbz	r6, 80076b8 <_strtol_l.isra.0+0xe0>
 80076b6:	4240      	negs	r0, r0
 80076b8:	f1b8 0f00 	cmp.w	r8, #0
 80076bc:	d099      	beq.n	80075f2 <_strtol_l.isra.0+0x1a>
 80076be:	2a00      	cmp	r2, #0
 80076c0:	d1f6      	bne.n	80076b0 <_strtol_l.isra.0+0xd8>
 80076c2:	f8c8 1000 	str.w	r1, [r8]
 80076c6:	e794      	b.n	80075f2 <_strtol_l.isra.0+0x1a>
 80076c8:	08008d35 	.word	0x08008d35

080076cc <strtol>:
 80076cc:	4613      	mov	r3, r2
 80076ce:	460a      	mov	r2, r1
 80076d0:	4601      	mov	r1, r0
 80076d2:	4802      	ldr	r0, [pc, #8]	@ (80076dc <strtol+0x10>)
 80076d4:	6800      	ldr	r0, [r0, #0]
 80076d6:	f7ff bf7f 	b.w	80075d8 <_strtol_l.isra.0>
 80076da:	bf00      	nop
 80076dc:	20000044 	.word	0x20000044

080076e0 <std>:
 80076e0:	2300      	movs	r3, #0
 80076e2:	b510      	push	{r4, lr}
 80076e4:	4604      	mov	r4, r0
 80076e6:	e9c0 3300 	strd	r3, r3, [r0]
 80076ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ee:	6083      	str	r3, [r0, #8]
 80076f0:	8181      	strh	r1, [r0, #12]
 80076f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80076f4:	81c2      	strh	r2, [r0, #14]
 80076f6:	6183      	str	r3, [r0, #24]
 80076f8:	4619      	mov	r1, r3
 80076fa:	2208      	movs	r2, #8
 80076fc:	305c      	adds	r0, #92	@ 0x5c
 80076fe:	f000 f92a 	bl	8007956 <memset>
 8007702:	4b0d      	ldr	r3, [pc, #52]	@ (8007738 <std+0x58>)
 8007704:	6263      	str	r3, [r4, #36]	@ 0x24
 8007706:	4b0d      	ldr	r3, [pc, #52]	@ (800773c <std+0x5c>)
 8007708:	62a3      	str	r3, [r4, #40]	@ 0x28
 800770a:	4b0d      	ldr	r3, [pc, #52]	@ (8007740 <std+0x60>)
 800770c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800770e:	4b0d      	ldr	r3, [pc, #52]	@ (8007744 <std+0x64>)
 8007710:	6323      	str	r3, [r4, #48]	@ 0x30
 8007712:	4b0d      	ldr	r3, [pc, #52]	@ (8007748 <std+0x68>)
 8007714:	6224      	str	r4, [r4, #32]
 8007716:	429c      	cmp	r4, r3
 8007718:	d006      	beq.n	8007728 <std+0x48>
 800771a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800771e:	4294      	cmp	r4, r2
 8007720:	d002      	beq.n	8007728 <std+0x48>
 8007722:	33d0      	adds	r3, #208	@ 0xd0
 8007724:	429c      	cmp	r4, r3
 8007726:	d105      	bne.n	8007734 <std+0x54>
 8007728:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800772c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007730:	f000 b9e6 	b.w	8007b00 <__retarget_lock_init_recursive>
 8007734:	bd10      	pop	{r4, pc}
 8007736:	bf00      	nop
 8007738:	080078d1 	.word	0x080078d1
 800773c:	080078f3 	.word	0x080078f3
 8007740:	0800792b 	.word	0x0800792b
 8007744:	0800794f 	.word	0x0800794f
 8007748:	20004bcc 	.word	0x20004bcc

0800774c <stdio_exit_handler>:
 800774c:	4a02      	ldr	r2, [pc, #8]	@ (8007758 <stdio_exit_handler+0xc>)
 800774e:	4903      	ldr	r1, [pc, #12]	@ (800775c <stdio_exit_handler+0x10>)
 8007750:	4803      	ldr	r0, [pc, #12]	@ (8007760 <stdio_exit_handler+0x14>)
 8007752:	f000 b869 	b.w	8007828 <_fwalk_sglue>
 8007756:	bf00      	nop
 8007758:	20000038 	.word	0x20000038
 800775c:	08008431 	.word	0x08008431
 8007760:	20000048 	.word	0x20000048

08007764 <cleanup_stdio>:
 8007764:	6841      	ldr	r1, [r0, #4]
 8007766:	4b0c      	ldr	r3, [pc, #48]	@ (8007798 <cleanup_stdio+0x34>)
 8007768:	4299      	cmp	r1, r3
 800776a:	b510      	push	{r4, lr}
 800776c:	4604      	mov	r4, r0
 800776e:	d001      	beq.n	8007774 <cleanup_stdio+0x10>
 8007770:	f000 fe5e 	bl	8008430 <_fflush_r>
 8007774:	68a1      	ldr	r1, [r4, #8]
 8007776:	4b09      	ldr	r3, [pc, #36]	@ (800779c <cleanup_stdio+0x38>)
 8007778:	4299      	cmp	r1, r3
 800777a:	d002      	beq.n	8007782 <cleanup_stdio+0x1e>
 800777c:	4620      	mov	r0, r4
 800777e:	f000 fe57 	bl	8008430 <_fflush_r>
 8007782:	68e1      	ldr	r1, [r4, #12]
 8007784:	4b06      	ldr	r3, [pc, #24]	@ (80077a0 <cleanup_stdio+0x3c>)
 8007786:	4299      	cmp	r1, r3
 8007788:	d004      	beq.n	8007794 <cleanup_stdio+0x30>
 800778a:	4620      	mov	r0, r4
 800778c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007790:	f000 be4e 	b.w	8008430 <_fflush_r>
 8007794:	bd10      	pop	{r4, pc}
 8007796:	bf00      	nop
 8007798:	20004bcc 	.word	0x20004bcc
 800779c:	20004c34 	.word	0x20004c34
 80077a0:	20004c9c 	.word	0x20004c9c

080077a4 <global_stdio_init.part.0>:
 80077a4:	b510      	push	{r4, lr}
 80077a6:	4b0b      	ldr	r3, [pc, #44]	@ (80077d4 <global_stdio_init.part.0+0x30>)
 80077a8:	4c0b      	ldr	r4, [pc, #44]	@ (80077d8 <global_stdio_init.part.0+0x34>)
 80077aa:	4a0c      	ldr	r2, [pc, #48]	@ (80077dc <global_stdio_init.part.0+0x38>)
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	4620      	mov	r0, r4
 80077b0:	2200      	movs	r2, #0
 80077b2:	2104      	movs	r1, #4
 80077b4:	f7ff ff94 	bl	80076e0 <std>
 80077b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077bc:	2201      	movs	r2, #1
 80077be:	2109      	movs	r1, #9
 80077c0:	f7ff ff8e 	bl	80076e0 <std>
 80077c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077c8:	2202      	movs	r2, #2
 80077ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ce:	2112      	movs	r1, #18
 80077d0:	f7ff bf86 	b.w	80076e0 <std>
 80077d4:	20004d04 	.word	0x20004d04
 80077d8:	20004bcc 	.word	0x20004bcc
 80077dc:	0800774d 	.word	0x0800774d

080077e0 <__sfp_lock_acquire>:
 80077e0:	4801      	ldr	r0, [pc, #4]	@ (80077e8 <__sfp_lock_acquire+0x8>)
 80077e2:	f000 b98e 	b.w	8007b02 <__retarget_lock_acquire_recursive>
 80077e6:	bf00      	nop
 80077e8:	20004d0d 	.word	0x20004d0d

080077ec <__sfp_lock_release>:
 80077ec:	4801      	ldr	r0, [pc, #4]	@ (80077f4 <__sfp_lock_release+0x8>)
 80077ee:	f000 b989 	b.w	8007b04 <__retarget_lock_release_recursive>
 80077f2:	bf00      	nop
 80077f4:	20004d0d 	.word	0x20004d0d

080077f8 <__sinit>:
 80077f8:	b510      	push	{r4, lr}
 80077fa:	4604      	mov	r4, r0
 80077fc:	f7ff fff0 	bl	80077e0 <__sfp_lock_acquire>
 8007800:	6a23      	ldr	r3, [r4, #32]
 8007802:	b11b      	cbz	r3, 800780c <__sinit+0x14>
 8007804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007808:	f7ff bff0 	b.w	80077ec <__sfp_lock_release>
 800780c:	4b04      	ldr	r3, [pc, #16]	@ (8007820 <__sinit+0x28>)
 800780e:	6223      	str	r3, [r4, #32]
 8007810:	4b04      	ldr	r3, [pc, #16]	@ (8007824 <__sinit+0x2c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1f5      	bne.n	8007804 <__sinit+0xc>
 8007818:	f7ff ffc4 	bl	80077a4 <global_stdio_init.part.0>
 800781c:	e7f2      	b.n	8007804 <__sinit+0xc>
 800781e:	bf00      	nop
 8007820:	08007765 	.word	0x08007765
 8007824:	20004d04 	.word	0x20004d04

08007828 <_fwalk_sglue>:
 8007828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800782c:	4607      	mov	r7, r0
 800782e:	4688      	mov	r8, r1
 8007830:	4614      	mov	r4, r2
 8007832:	2600      	movs	r6, #0
 8007834:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007838:	f1b9 0901 	subs.w	r9, r9, #1
 800783c:	d505      	bpl.n	800784a <_fwalk_sglue+0x22>
 800783e:	6824      	ldr	r4, [r4, #0]
 8007840:	2c00      	cmp	r4, #0
 8007842:	d1f7      	bne.n	8007834 <_fwalk_sglue+0xc>
 8007844:	4630      	mov	r0, r6
 8007846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800784a:	89ab      	ldrh	r3, [r5, #12]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d907      	bls.n	8007860 <_fwalk_sglue+0x38>
 8007850:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007854:	3301      	adds	r3, #1
 8007856:	d003      	beq.n	8007860 <_fwalk_sglue+0x38>
 8007858:	4629      	mov	r1, r5
 800785a:	4638      	mov	r0, r7
 800785c:	47c0      	blx	r8
 800785e:	4306      	orrs	r6, r0
 8007860:	3568      	adds	r5, #104	@ 0x68
 8007862:	e7e9      	b.n	8007838 <_fwalk_sglue+0x10>

08007864 <sniprintf>:
 8007864:	b40c      	push	{r2, r3}
 8007866:	b530      	push	{r4, r5, lr}
 8007868:	4b18      	ldr	r3, [pc, #96]	@ (80078cc <sniprintf+0x68>)
 800786a:	1e0c      	subs	r4, r1, #0
 800786c:	681d      	ldr	r5, [r3, #0]
 800786e:	b09d      	sub	sp, #116	@ 0x74
 8007870:	da08      	bge.n	8007884 <sniprintf+0x20>
 8007872:	238b      	movs	r3, #139	@ 0x8b
 8007874:	602b      	str	r3, [r5, #0]
 8007876:	f04f 30ff 	mov.w	r0, #4294967295
 800787a:	b01d      	add	sp, #116	@ 0x74
 800787c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007880:	b002      	add	sp, #8
 8007882:	4770      	bx	lr
 8007884:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007888:	f8ad 3014 	strh.w	r3, [sp, #20]
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007892:	bf14      	ite	ne
 8007894:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007898:	4623      	moveq	r3, r4
 800789a:	9304      	str	r3, [sp, #16]
 800789c:	9307      	str	r3, [sp, #28]
 800789e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80078a2:	9002      	str	r0, [sp, #8]
 80078a4:	9006      	str	r0, [sp, #24]
 80078a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80078ac:	ab21      	add	r3, sp, #132	@ 0x84
 80078ae:	a902      	add	r1, sp, #8
 80078b0:	4628      	mov	r0, r5
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	f000 fab0 	bl	8007e18 <_svfiprintf_r>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	bfbc      	itt	lt
 80078bc:	238b      	movlt	r3, #139	@ 0x8b
 80078be:	602b      	strlt	r3, [r5, #0]
 80078c0:	2c00      	cmp	r4, #0
 80078c2:	d0da      	beq.n	800787a <sniprintf+0x16>
 80078c4:	9b02      	ldr	r3, [sp, #8]
 80078c6:	2200      	movs	r2, #0
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	e7d6      	b.n	800787a <sniprintf+0x16>
 80078cc:	20000044 	.word	0x20000044

080078d0 <__sread>:
 80078d0:	b510      	push	{r4, lr}
 80078d2:	460c      	mov	r4, r1
 80078d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d8:	f000 f8c4 	bl	8007a64 <_read_r>
 80078dc:	2800      	cmp	r0, #0
 80078de:	bfab      	itete	ge
 80078e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078e2:	89a3      	ldrhlt	r3, [r4, #12]
 80078e4:	181b      	addge	r3, r3, r0
 80078e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078ea:	bfac      	ite	ge
 80078ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078ee:	81a3      	strhlt	r3, [r4, #12]
 80078f0:	bd10      	pop	{r4, pc}

080078f2 <__swrite>:
 80078f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f6:	461f      	mov	r7, r3
 80078f8:	898b      	ldrh	r3, [r1, #12]
 80078fa:	05db      	lsls	r3, r3, #23
 80078fc:	4605      	mov	r5, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	4616      	mov	r6, r2
 8007902:	d505      	bpl.n	8007910 <__swrite+0x1e>
 8007904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007908:	2302      	movs	r3, #2
 800790a:	2200      	movs	r2, #0
 800790c:	f000 f898 	bl	8007a40 <_lseek_r>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007916:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800791a:	81a3      	strh	r3, [r4, #12]
 800791c:	4632      	mov	r2, r6
 800791e:	463b      	mov	r3, r7
 8007920:	4628      	mov	r0, r5
 8007922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007926:	f000 b8af 	b.w	8007a88 <_write_r>

0800792a <__sseek>:
 800792a:	b510      	push	{r4, lr}
 800792c:	460c      	mov	r4, r1
 800792e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007932:	f000 f885 	bl	8007a40 <_lseek_r>
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	bf15      	itete	ne
 800793c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800793e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007942:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007946:	81a3      	strheq	r3, [r4, #12]
 8007948:	bf18      	it	ne
 800794a:	81a3      	strhne	r3, [r4, #12]
 800794c:	bd10      	pop	{r4, pc}

0800794e <__sclose>:
 800794e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007952:	f000 b865 	b.w	8007a20 <_close_r>

08007956 <memset>:
 8007956:	4402      	add	r2, r0
 8007958:	4603      	mov	r3, r0
 800795a:	4293      	cmp	r3, r2
 800795c:	d100      	bne.n	8007960 <memset+0xa>
 800795e:	4770      	bx	lr
 8007960:	f803 1b01 	strb.w	r1, [r3], #1
 8007964:	e7f9      	b.n	800795a <memset+0x4>
	...

08007968 <strtok>:
 8007968:	4b16      	ldr	r3, [pc, #88]	@ (80079c4 <strtok+0x5c>)
 800796a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800796e:	681f      	ldr	r7, [r3, #0]
 8007970:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007972:	4605      	mov	r5, r0
 8007974:	460e      	mov	r6, r1
 8007976:	b9ec      	cbnz	r4, 80079b4 <strtok+0x4c>
 8007978:	2050      	movs	r0, #80	@ 0x50
 800797a:	f000 f93b 	bl	8007bf4 <malloc>
 800797e:	4602      	mov	r2, r0
 8007980:	6478      	str	r0, [r7, #68]	@ 0x44
 8007982:	b920      	cbnz	r0, 800798e <strtok+0x26>
 8007984:	4b10      	ldr	r3, [pc, #64]	@ (80079c8 <strtok+0x60>)
 8007986:	4811      	ldr	r0, [pc, #68]	@ (80079cc <strtok+0x64>)
 8007988:	215b      	movs	r1, #91	@ 0x5b
 800798a:	f000 f8cb 	bl	8007b24 <__assert_func>
 800798e:	e9c0 4400 	strd	r4, r4, [r0]
 8007992:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007996:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800799a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800799e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80079a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80079a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80079aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80079ae:	6184      	str	r4, [r0, #24]
 80079b0:	7704      	strb	r4, [r0, #28]
 80079b2:	6244      	str	r4, [r0, #36]	@ 0x24
 80079b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	2301      	movs	r3, #1
 80079bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079c0:	f000 b806 	b.w	80079d0 <__strtok_r>
 80079c4:	20000044 	.word	0x20000044
 80079c8:	08008e35 	.word	0x08008e35
 80079cc:	08008e4c 	.word	0x08008e4c

080079d0 <__strtok_r>:
 80079d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079d2:	4604      	mov	r4, r0
 80079d4:	b908      	cbnz	r0, 80079da <__strtok_r+0xa>
 80079d6:	6814      	ldr	r4, [r2, #0]
 80079d8:	b144      	cbz	r4, 80079ec <__strtok_r+0x1c>
 80079da:	4620      	mov	r0, r4
 80079dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80079e0:	460f      	mov	r7, r1
 80079e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80079e6:	b91e      	cbnz	r6, 80079f0 <__strtok_r+0x20>
 80079e8:	b965      	cbnz	r5, 8007a04 <__strtok_r+0x34>
 80079ea:	6015      	str	r5, [r2, #0]
 80079ec:	2000      	movs	r0, #0
 80079ee:	e005      	b.n	80079fc <__strtok_r+0x2c>
 80079f0:	42b5      	cmp	r5, r6
 80079f2:	d1f6      	bne.n	80079e2 <__strtok_r+0x12>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1f0      	bne.n	80079da <__strtok_r+0xa>
 80079f8:	6014      	str	r4, [r2, #0]
 80079fa:	7003      	strb	r3, [r0, #0]
 80079fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079fe:	461c      	mov	r4, r3
 8007a00:	e00c      	b.n	8007a1c <__strtok_r+0x4c>
 8007a02:	b91d      	cbnz	r5, 8007a0c <__strtok_r+0x3c>
 8007a04:	4627      	mov	r7, r4
 8007a06:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a0a:	460e      	mov	r6, r1
 8007a0c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007a10:	42ab      	cmp	r3, r5
 8007a12:	d1f6      	bne.n	8007a02 <__strtok_r+0x32>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0f2      	beq.n	80079fe <__strtok_r+0x2e>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	703b      	strb	r3, [r7, #0]
 8007a1c:	6014      	str	r4, [r2, #0]
 8007a1e:	e7ed      	b.n	80079fc <__strtok_r+0x2c>

08007a20 <_close_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4d06      	ldr	r5, [pc, #24]	@ (8007a3c <_close_r+0x1c>)
 8007a24:	2300      	movs	r3, #0
 8007a26:	4604      	mov	r4, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	602b      	str	r3, [r5, #0]
 8007a2c:	f7f9 fb98 	bl	8001160 <_close>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_close_r+0x1a>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_close_r+0x1a>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	20004d08 	.word	0x20004d08

08007a40 <_lseek_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4d07      	ldr	r5, [pc, #28]	@ (8007a60 <_lseek_r+0x20>)
 8007a44:	4604      	mov	r4, r0
 8007a46:	4608      	mov	r0, r1
 8007a48:	4611      	mov	r1, r2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	602a      	str	r2, [r5, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f7f9 fbad 	bl	80011ae <_lseek>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	d102      	bne.n	8007a5e <_lseek_r+0x1e>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	b103      	cbz	r3, 8007a5e <_lseek_r+0x1e>
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	20004d08 	.word	0x20004d08

08007a64 <_read_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	4d07      	ldr	r5, [pc, #28]	@ (8007a84 <_read_r+0x20>)
 8007a68:	4604      	mov	r4, r0
 8007a6a:	4608      	mov	r0, r1
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	2200      	movs	r2, #0
 8007a70:	602a      	str	r2, [r5, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	f7f9 fb3b 	bl	80010ee <_read>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d102      	bne.n	8007a82 <_read_r+0x1e>
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	b103      	cbz	r3, 8007a82 <_read_r+0x1e>
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	20004d08 	.word	0x20004d08

08007a88 <_write_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4d07      	ldr	r5, [pc, #28]	@ (8007aa8 <_write_r+0x20>)
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	4608      	mov	r0, r1
 8007a90:	4611      	mov	r1, r2
 8007a92:	2200      	movs	r2, #0
 8007a94:	602a      	str	r2, [r5, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	f7f9 fb46 	bl	8001128 <_write>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_write_r+0x1e>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_write_r+0x1e>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	20004d08 	.word	0x20004d08

08007aac <__errno>:
 8007aac:	4b01      	ldr	r3, [pc, #4]	@ (8007ab4 <__errno+0x8>)
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	20000044 	.word	0x20000044

08007ab8 <__libc_init_array>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	4d0d      	ldr	r5, [pc, #52]	@ (8007af0 <__libc_init_array+0x38>)
 8007abc:	4c0d      	ldr	r4, [pc, #52]	@ (8007af4 <__libc_init_array+0x3c>)
 8007abe:	1b64      	subs	r4, r4, r5
 8007ac0:	10a4      	asrs	r4, r4, #2
 8007ac2:	2600      	movs	r6, #0
 8007ac4:	42a6      	cmp	r6, r4
 8007ac6:	d109      	bne.n	8007adc <__libc_init_array+0x24>
 8007ac8:	4d0b      	ldr	r5, [pc, #44]	@ (8007af8 <__libc_init_array+0x40>)
 8007aca:	4c0c      	ldr	r4, [pc, #48]	@ (8007afc <__libc_init_array+0x44>)
 8007acc:	f000 ffee 	bl	8008aac <_init>
 8007ad0:	1b64      	subs	r4, r4, r5
 8007ad2:	10a4      	asrs	r4, r4, #2
 8007ad4:	2600      	movs	r6, #0
 8007ad6:	42a6      	cmp	r6, r4
 8007ad8:	d105      	bne.n	8007ae6 <__libc_init_array+0x2e>
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae0:	4798      	blx	r3
 8007ae2:	3601      	adds	r6, #1
 8007ae4:	e7ee      	b.n	8007ac4 <__libc_init_array+0xc>
 8007ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aea:	4798      	blx	r3
 8007aec:	3601      	adds	r6, #1
 8007aee:	e7f2      	b.n	8007ad6 <__libc_init_array+0x1e>
 8007af0:	08008f20 	.word	0x08008f20
 8007af4:	08008f20 	.word	0x08008f20
 8007af8:	08008f20 	.word	0x08008f20
 8007afc:	08008f24 	.word	0x08008f24

08007b00 <__retarget_lock_init_recursive>:
 8007b00:	4770      	bx	lr

08007b02 <__retarget_lock_acquire_recursive>:
 8007b02:	4770      	bx	lr

08007b04 <__retarget_lock_release_recursive>:
 8007b04:	4770      	bx	lr

08007b06 <memcpy>:
 8007b06:	440a      	add	r2, r1
 8007b08:	4291      	cmp	r1, r2
 8007b0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b0e:	d100      	bne.n	8007b12 <memcpy+0xc>
 8007b10:	4770      	bx	lr
 8007b12:	b510      	push	{r4, lr}
 8007b14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b1c:	4291      	cmp	r1, r2
 8007b1e:	d1f9      	bne.n	8007b14 <memcpy+0xe>
 8007b20:	bd10      	pop	{r4, pc}
	...

08007b24 <__assert_func>:
 8007b24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b26:	4614      	mov	r4, r2
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4b09      	ldr	r3, [pc, #36]	@ (8007b50 <__assert_func+0x2c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4605      	mov	r5, r0
 8007b30:	68d8      	ldr	r0, [r3, #12]
 8007b32:	b14c      	cbz	r4, 8007b48 <__assert_func+0x24>
 8007b34:	4b07      	ldr	r3, [pc, #28]	@ (8007b54 <__assert_func+0x30>)
 8007b36:	9100      	str	r1, [sp, #0]
 8007b38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b3c:	4906      	ldr	r1, [pc, #24]	@ (8007b58 <__assert_func+0x34>)
 8007b3e:	462b      	mov	r3, r5
 8007b40:	f000 fc9e 	bl	8008480 <fiprintf>
 8007b44:	f000 fcd8 	bl	80084f8 <abort>
 8007b48:	4b04      	ldr	r3, [pc, #16]	@ (8007b5c <__assert_func+0x38>)
 8007b4a:	461c      	mov	r4, r3
 8007b4c:	e7f3      	b.n	8007b36 <__assert_func+0x12>
 8007b4e:	bf00      	nop
 8007b50:	20000044 	.word	0x20000044
 8007b54:	08008ea6 	.word	0x08008ea6
 8007b58:	08008eb3 	.word	0x08008eb3
 8007b5c:	08008ee1 	.word	0x08008ee1

08007b60 <_free_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4605      	mov	r5, r0
 8007b64:	2900      	cmp	r1, #0
 8007b66:	d041      	beq.n	8007bec <_free_r+0x8c>
 8007b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b6c:	1f0c      	subs	r4, r1, #4
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	bfb8      	it	lt
 8007b72:	18e4      	addlt	r4, r4, r3
 8007b74:	f000 f8e8 	bl	8007d48 <__malloc_lock>
 8007b78:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf0 <_free_r+0x90>)
 8007b7a:	6813      	ldr	r3, [r2, #0]
 8007b7c:	b933      	cbnz	r3, 8007b8c <_free_r+0x2c>
 8007b7e:	6063      	str	r3, [r4, #4]
 8007b80:	6014      	str	r4, [r2, #0]
 8007b82:	4628      	mov	r0, r5
 8007b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b88:	f000 b8e4 	b.w	8007d54 <__malloc_unlock>
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	d908      	bls.n	8007ba2 <_free_r+0x42>
 8007b90:	6820      	ldr	r0, [r4, #0]
 8007b92:	1821      	adds	r1, r4, r0
 8007b94:	428b      	cmp	r3, r1
 8007b96:	bf01      	itttt	eq
 8007b98:	6819      	ldreq	r1, [r3, #0]
 8007b9a:	685b      	ldreq	r3, [r3, #4]
 8007b9c:	1809      	addeq	r1, r1, r0
 8007b9e:	6021      	streq	r1, [r4, #0]
 8007ba0:	e7ed      	b.n	8007b7e <_free_r+0x1e>
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	b10b      	cbz	r3, 8007bac <_free_r+0x4c>
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	d9fa      	bls.n	8007ba2 <_free_r+0x42>
 8007bac:	6811      	ldr	r1, [r2, #0]
 8007bae:	1850      	adds	r0, r2, r1
 8007bb0:	42a0      	cmp	r0, r4
 8007bb2:	d10b      	bne.n	8007bcc <_free_r+0x6c>
 8007bb4:	6820      	ldr	r0, [r4, #0]
 8007bb6:	4401      	add	r1, r0
 8007bb8:	1850      	adds	r0, r2, r1
 8007bba:	4283      	cmp	r3, r0
 8007bbc:	6011      	str	r1, [r2, #0]
 8007bbe:	d1e0      	bne.n	8007b82 <_free_r+0x22>
 8007bc0:	6818      	ldr	r0, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	6053      	str	r3, [r2, #4]
 8007bc6:	4408      	add	r0, r1
 8007bc8:	6010      	str	r0, [r2, #0]
 8007bca:	e7da      	b.n	8007b82 <_free_r+0x22>
 8007bcc:	d902      	bls.n	8007bd4 <_free_r+0x74>
 8007bce:	230c      	movs	r3, #12
 8007bd0:	602b      	str	r3, [r5, #0]
 8007bd2:	e7d6      	b.n	8007b82 <_free_r+0x22>
 8007bd4:	6820      	ldr	r0, [r4, #0]
 8007bd6:	1821      	adds	r1, r4, r0
 8007bd8:	428b      	cmp	r3, r1
 8007bda:	bf04      	itt	eq
 8007bdc:	6819      	ldreq	r1, [r3, #0]
 8007bde:	685b      	ldreq	r3, [r3, #4]
 8007be0:	6063      	str	r3, [r4, #4]
 8007be2:	bf04      	itt	eq
 8007be4:	1809      	addeq	r1, r1, r0
 8007be6:	6021      	streq	r1, [r4, #0]
 8007be8:	6054      	str	r4, [r2, #4]
 8007bea:	e7ca      	b.n	8007b82 <_free_r+0x22>
 8007bec:	bd38      	pop	{r3, r4, r5, pc}
 8007bee:	bf00      	nop
 8007bf0:	20004d14 	.word	0x20004d14

08007bf4 <malloc>:
 8007bf4:	4b02      	ldr	r3, [pc, #8]	@ (8007c00 <malloc+0xc>)
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	f000 b825 	b.w	8007c48 <_malloc_r>
 8007bfe:	bf00      	nop
 8007c00:	20000044 	.word	0x20000044

08007c04 <sbrk_aligned>:
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	4e0f      	ldr	r6, [pc, #60]	@ (8007c44 <sbrk_aligned+0x40>)
 8007c08:	460c      	mov	r4, r1
 8007c0a:	6831      	ldr	r1, [r6, #0]
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	b911      	cbnz	r1, 8007c16 <sbrk_aligned+0x12>
 8007c10:	f000 fc62 	bl	80084d8 <_sbrk_r>
 8007c14:	6030      	str	r0, [r6, #0]
 8007c16:	4621      	mov	r1, r4
 8007c18:	4628      	mov	r0, r5
 8007c1a:	f000 fc5d 	bl	80084d8 <_sbrk_r>
 8007c1e:	1c43      	adds	r3, r0, #1
 8007c20:	d103      	bne.n	8007c2a <sbrk_aligned+0x26>
 8007c22:	f04f 34ff 	mov.w	r4, #4294967295
 8007c26:	4620      	mov	r0, r4
 8007c28:	bd70      	pop	{r4, r5, r6, pc}
 8007c2a:	1cc4      	adds	r4, r0, #3
 8007c2c:	f024 0403 	bic.w	r4, r4, #3
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	d0f8      	beq.n	8007c26 <sbrk_aligned+0x22>
 8007c34:	1a21      	subs	r1, r4, r0
 8007c36:	4628      	mov	r0, r5
 8007c38:	f000 fc4e 	bl	80084d8 <_sbrk_r>
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d1f2      	bne.n	8007c26 <sbrk_aligned+0x22>
 8007c40:	e7ef      	b.n	8007c22 <sbrk_aligned+0x1e>
 8007c42:	bf00      	nop
 8007c44:	20004d10 	.word	0x20004d10

08007c48 <_malloc_r>:
 8007c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c4c:	1ccd      	adds	r5, r1, #3
 8007c4e:	f025 0503 	bic.w	r5, r5, #3
 8007c52:	3508      	adds	r5, #8
 8007c54:	2d0c      	cmp	r5, #12
 8007c56:	bf38      	it	cc
 8007c58:	250c      	movcc	r5, #12
 8007c5a:	2d00      	cmp	r5, #0
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	db01      	blt.n	8007c64 <_malloc_r+0x1c>
 8007c60:	42a9      	cmp	r1, r5
 8007c62:	d904      	bls.n	8007c6e <_malloc_r+0x26>
 8007c64:	230c      	movs	r3, #12
 8007c66:	6033      	str	r3, [r6, #0]
 8007c68:	2000      	movs	r0, #0
 8007c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d44 <_malloc_r+0xfc>
 8007c72:	f000 f869 	bl	8007d48 <__malloc_lock>
 8007c76:	f8d8 3000 	ldr.w	r3, [r8]
 8007c7a:	461c      	mov	r4, r3
 8007c7c:	bb44      	cbnz	r4, 8007cd0 <_malloc_r+0x88>
 8007c7e:	4629      	mov	r1, r5
 8007c80:	4630      	mov	r0, r6
 8007c82:	f7ff ffbf 	bl	8007c04 <sbrk_aligned>
 8007c86:	1c43      	adds	r3, r0, #1
 8007c88:	4604      	mov	r4, r0
 8007c8a:	d158      	bne.n	8007d3e <_malloc_r+0xf6>
 8007c8c:	f8d8 4000 	ldr.w	r4, [r8]
 8007c90:	4627      	mov	r7, r4
 8007c92:	2f00      	cmp	r7, #0
 8007c94:	d143      	bne.n	8007d1e <_malloc_r+0xd6>
 8007c96:	2c00      	cmp	r4, #0
 8007c98:	d04b      	beq.n	8007d32 <_malloc_r+0xea>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	eb04 0903 	add.w	r9, r4, r3
 8007ca4:	f000 fc18 	bl	80084d8 <_sbrk_r>
 8007ca8:	4581      	cmp	r9, r0
 8007caa:	d142      	bne.n	8007d32 <_malloc_r+0xea>
 8007cac:	6821      	ldr	r1, [r4, #0]
 8007cae:	1a6d      	subs	r5, r5, r1
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7ff ffa6 	bl	8007c04 <sbrk_aligned>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d03a      	beq.n	8007d32 <_malloc_r+0xea>
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	442b      	add	r3, r5
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	bb62      	cbnz	r2, 8007d24 <_malloc_r+0xdc>
 8007cca:	f8c8 7000 	str.w	r7, [r8]
 8007cce:	e00f      	b.n	8007cf0 <_malloc_r+0xa8>
 8007cd0:	6822      	ldr	r2, [r4, #0]
 8007cd2:	1b52      	subs	r2, r2, r5
 8007cd4:	d420      	bmi.n	8007d18 <_malloc_r+0xd0>
 8007cd6:	2a0b      	cmp	r2, #11
 8007cd8:	d917      	bls.n	8007d0a <_malloc_r+0xc2>
 8007cda:	1961      	adds	r1, r4, r5
 8007cdc:	42a3      	cmp	r3, r4
 8007cde:	6025      	str	r5, [r4, #0]
 8007ce0:	bf18      	it	ne
 8007ce2:	6059      	strne	r1, [r3, #4]
 8007ce4:	6863      	ldr	r3, [r4, #4]
 8007ce6:	bf08      	it	eq
 8007ce8:	f8c8 1000 	streq.w	r1, [r8]
 8007cec:	5162      	str	r2, [r4, r5]
 8007cee:	604b      	str	r3, [r1, #4]
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f000 f82f 	bl	8007d54 <__malloc_unlock>
 8007cf6:	f104 000b 	add.w	r0, r4, #11
 8007cfa:	1d23      	adds	r3, r4, #4
 8007cfc:	f020 0007 	bic.w	r0, r0, #7
 8007d00:	1ac2      	subs	r2, r0, r3
 8007d02:	bf1c      	itt	ne
 8007d04:	1a1b      	subne	r3, r3, r0
 8007d06:	50a3      	strne	r3, [r4, r2]
 8007d08:	e7af      	b.n	8007c6a <_malloc_r+0x22>
 8007d0a:	6862      	ldr	r2, [r4, #4]
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	bf0c      	ite	eq
 8007d10:	f8c8 2000 	streq.w	r2, [r8]
 8007d14:	605a      	strne	r2, [r3, #4]
 8007d16:	e7eb      	b.n	8007cf0 <_malloc_r+0xa8>
 8007d18:	4623      	mov	r3, r4
 8007d1a:	6864      	ldr	r4, [r4, #4]
 8007d1c:	e7ae      	b.n	8007c7c <_malloc_r+0x34>
 8007d1e:	463c      	mov	r4, r7
 8007d20:	687f      	ldr	r7, [r7, #4]
 8007d22:	e7b6      	b.n	8007c92 <_malloc_r+0x4a>
 8007d24:	461a      	mov	r2, r3
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d1fb      	bne.n	8007d24 <_malloc_r+0xdc>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	6053      	str	r3, [r2, #4]
 8007d30:	e7de      	b.n	8007cf0 <_malloc_r+0xa8>
 8007d32:	230c      	movs	r3, #12
 8007d34:	6033      	str	r3, [r6, #0]
 8007d36:	4630      	mov	r0, r6
 8007d38:	f000 f80c 	bl	8007d54 <__malloc_unlock>
 8007d3c:	e794      	b.n	8007c68 <_malloc_r+0x20>
 8007d3e:	6005      	str	r5, [r0, #0]
 8007d40:	e7d6      	b.n	8007cf0 <_malloc_r+0xa8>
 8007d42:	bf00      	nop
 8007d44:	20004d14 	.word	0x20004d14

08007d48 <__malloc_lock>:
 8007d48:	4801      	ldr	r0, [pc, #4]	@ (8007d50 <__malloc_lock+0x8>)
 8007d4a:	f7ff beda 	b.w	8007b02 <__retarget_lock_acquire_recursive>
 8007d4e:	bf00      	nop
 8007d50:	20004d0c 	.word	0x20004d0c

08007d54 <__malloc_unlock>:
 8007d54:	4801      	ldr	r0, [pc, #4]	@ (8007d5c <__malloc_unlock+0x8>)
 8007d56:	f7ff bed5 	b.w	8007b04 <__retarget_lock_release_recursive>
 8007d5a:	bf00      	nop
 8007d5c:	20004d0c 	.word	0x20004d0c

08007d60 <__ssputs_r>:
 8007d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d64:	688e      	ldr	r6, [r1, #8]
 8007d66:	461f      	mov	r7, r3
 8007d68:	42be      	cmp	r6, r7
 8007d6a:	680b      	ldr	r3, [r1, #0]
 8007d6c:	4682      	mov	sl, r0
 8007d6e:	460c      	mov	r4, r1
 8007d70:	4690      	mov	r8, r2
 8007d72:	d82d      	bhi.n	8007dd0 <__ssputs_r+0x70>
 8007d74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d7c:	d026      	beq.n	8007dcc <__ssputs_r+0x6c>
 8007d7e:	6965      	ldr	r5, [r4, #20]
 8007d80:	6909      	ldr	r1, [r1, #16]
 8007d82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d86:	eba3 0901 	sub.w	r9, r3, r1
 8007d8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d8e:	1c7b      	adds	r3, r7, #1
 8007d90:	444b      	add	r3, r9
 8007d92:	106d      	asrs	r5, r5, #1
 8007d94:	429d      	cmp	r5, r3
 8007d96:	bf38      	it	cc
 8007d98:	461d      	movcc	r5, r3
 8007d9a:	0553      	lsls	r3, r2, #21
 8007d9c:	d527      	bpl.n	8007dee <__ssputs_r+0x8e>
 8007d9e:	4629      	mov	r1, r5
 8007da0:	f7ff ff52 	bl	8007c48 <_malloc_r>
 8007da4:	4606      	mov	r6, r0
 8007da6:	b360      	cbz	r0, 8007e02 <__ssputs_r+0xa2>
 8007da8:	6921      	ldr	r1, [r4, #16]
 8007daa:	464a      	mov	r2, r9
 8007dac:	f7ff feab 	bl	8007b06 <memcpy>
 8007db0:	89a3      	ldrh	r3, [r4, #12]
 8007db2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dba:	81a3      	strh	r3, [r4, #12]
 8007dbc:	6126      	str	r6, [r4, #16]
 8007dbe:	6165      	str	r5, [r4, #20]
 8007dc0:	444e      	add	r6, r9
 8007dc2:	eba5 0509 	sub.w	r5, r5, r9
 8007dc6:	6026      	str	r6, [r4, #0]
 8007dc8:	60a5      	str	r5, [r4, #8]
 8007dca:	463e      	mov	r6, r7
 8007dcc:	42be      	cmp	r6, r7
 8007dce:	d900      	bls.n	8007dd2 <__ssputs_r+0x72>
 8007dd0:	463e      	mov	r6, r7
 8007dd2:	6820      	ldr	r0, [r4, #0]
 8007dd4:	4632      	mov	r2, r6
 8007dd6:	4641      	mov	r1, r8
 8007dd8:	f000 fb64 	bl	80084a4 <memmove>
 8007ddc:	68a3      	ldr	r3, [r4, #8]
 8007dde:	1b9b      	subs	r3, r3, r6
 8007de0:	60a3      	str	r3, [r4, #8]
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	4433      	add	r3, r6
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	2000      	movs	r0, #0
 8007dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dee:	462a      	mov	r2, r5
 8007df0:	f000 fb89 	bl	8008506 <_realloc_r>
 8007df4:	4606      	mov	r6, r0
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d1e0      	bne.n	8007dbc <__ssputs_r+0x5c>
 8007dfa:	6921      	ldr	r1, [r4, #16]
 8007dfc:	4650      	mov	r0, sl
 8007dfe:	f7ff feaf 	bl	8007b60 <_free_r>
 8007e02:	230c      	movs	r3, #12
 8007e04:	f8ca 3000 	str.w	r3, [sl]
 8007e08:	89a3      	ldrh	r3, [r4, #12]
 8007e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e0e:	81a3      	strh	r3, [r4, #12]
 8007e10:	f04f 30ff 	mov.w	r0, #4294967295
 8007e14:	e7e9      	b.n	8007dea <__ssputs_r+0x8a>
	...

08007e18 <_svfiprintf_r>:
 8007e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1c:	4698      	mov	r8, r3
 8007e1e:	898b      	ldrh	r3, [r1, #12]
 8007e20:	061b      	lsls	r3, r3, #24
 8007e22:	b09d      	sub	sp, #116	@ 0x74
 8007e24:	4607      	mov	r7, r0
 8007e26:	460d      	mov	r5, r1
 8007e28:	4614      	mov	r4, r2
 8007e2a:	d510      	bpl.n	8007e4e <_svfiprintf_r+0x36>
 8007e2c:	690b      	ldr	r3, [r1, #16]
 8007e2e:	b973      	cbnz	r3, 8007e4e <_svfiprintf_r+0x36>
 8007e30:	2140      	movs	r1, #64	@ 0x40
 8007e32:	f7ff ff09 	bl	8007c48 <_malloc_r>
 8007e36:	6028      	str	r0, [r5, #0]
 8007e38:	6128      	str	r0, [r5, #16]
 8007e3a:	b930      	cbnz	r0, 8007e4a <_svfiprintf_r+0x32>
 8007e3c:	230c      	movs	r3, #12
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	f04f 30ff 	mov.w	r0, #4294967295
 8007e44:	b01d      	add	sp, #116	@ 0x74
 8007e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4a:	2340      	movs	r3, #64	@ 0x40
 8007e4c:	616b      	str	r3, [r5, #20]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e52:	2320      	movs	r3, #32
 8007e54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e58:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e5c:	2330      	movs	r3, #48	@ 0x30
 8007e5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ffc <_svfiprintf_r+0x1e4>
 8007e62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e66:	f04f 0901 	mov.w	r9, #1
 8007e6a:	4623      	mov	r3, r4
 8007e6c:	469a      	mov	sl, r3
 8007e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e72:	b10a      	cbz	r2, 8007e78 <_svfiprintf_r+0x60>
 8007e74:	2a25      	cmp	r2, #37	@ 0x25
 8007e76:	d1f9      	bne.n	8007e6c <_svfiprintf_r+0x54>
 8007e78:	ebba 0b04 	subs.w	fp, sl, r4
 8007e7c:	d00b      	beq.n	8007e96 <_svfiprintf_r+0x7e>
 8007e7e:	465b      	mov	r3, fp
 8007e80:	4622      	mov	r2, r4
 8007e82:	4629      	mov	r1, r5
 8007e84:	4638      	mov	r0, r7
 8007e86:	f7ff ff6b 	bl	8007d60 <__ssputs_r>
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	f000 80a7 	beq.w	8007fde <_svfiprintf_r+0x1c6>
 8007e90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e92:	445a      	add	r2, fp
 8007e94:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e96:	f89a 3000 	ldrb.w	r3, [sl]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 809f 	beq.w	8007fde <_svfiprintf_r+0x1c6>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eaa:	f10a 0a01 	add.w	sl, sl, #1
 8007eae:	9304      	str	r3, [sp, #16]
 8007eb0:	9307      	str	r3, [sp, #28]
 8007eb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007eb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007eb8:	4654      	mov	r4, sl
 8007eba:	2205      	movs	r2, #5
 8007ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec0:	484e      	ldr	r0, [pc, #312]	@ (8007ffc <_svfiprintf_r+0x1e4>)
 8007ec2:	f7f8 f9a5 	bl	8000210 <memchr>
 8007ec6:	9a04      	ldr	r2, [sp, #16]
 8007ec8:	b9d8      	cbnz	r0, 8007f02 <_svfiprintf_r+0xea>
 8007eca:	06d0      	lsls	r0, r2, #27
 8007ecc:	bf44      	itt	mi
 8007ece:	2320      	movmi	r3, #32
 8007ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ed4:	0711      	lsls	r1, r2, #28
 8007ed6:	bf44      	itt	mi
 8007ed8:	232b      	movmi	r3, #43	@ 0x2b
 8007eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ede:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ee4:	d015      	beq.n	8007f12 <_svfiprintf_r+0xfa>
 8007ee6:	9a07      	ldr	r2, [sp, #28]
 8007ee8:	4654      	mov	r4, sl
 8007eea:	2000      	movs	r0, #0
 8007eec:	f04f 0c0a 	mov.w	ip, #10
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ef6:	3b30      	subs	r3, #48	@ 0x30
 8007ef8:	2b09      	cmp	r3, #9
 8007efa:	d94b      	bls.n	8007f94 <_svfiprintf_r+0x17c>
 8007efc:	b1b0      	cbz	r0, 8007f2c <_svfiprintf_r+0x114>
 8007efe:	9207      	str	r2, [sp, #28]
 8007f00:	e014      	b.n	8007f2c <_svfiprintf_r+0x114>
 8007f02:	eba0 0308 	sub.w	r3, r0, r8
 8007f06:	fa09 f303 	lsl.w	r3, r9, r3
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	9304      	str	r3, [sp, #16]
 8007f0e:	46a2      	mov	sl, r4
 8007f10:	e7d2      	b.n	8007eb8 <_svfiprintf_r+0xa0>
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	1d19      	adds	r1, r3, #4
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	9103      	str	r1, [sp, #12]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	bfbb      	ittet	lt
 8007f1e:	425b      	neglt	r3, r3
 8007f20:	f042 0202 	orrlt.w	r2, r2, #2
 8007f24:	9307      	strge	r3, [sp, #28]
 8007f26:	9307      	strlt	r3, [sp, #28]
 8007f28:	bfb8      	it	lt
 8007f2a:	9204      	strlt	r2, [sp, #16]
 8007f2c:	7823      	ldrb	r3, [r4, #0]
 8007f2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f30:	d10a      	bne.n	8007f48 <_svfiprintf_r+0x130>
 8007f32:	7863      	ldrb	r3, [r4, #1]
 8007f34:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f36:	d132      	bne.n	8007f9e <_svfiprintf_r+0x186>
 8007f38:	9b03      	ldr	r3, [sp, #12]
 8007f3a:	1d1a      	adds	r2, r3, #4
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	9203      	str	r2, [sp, #12]
 8007f40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f44:	3402      	adds	r4, #2
 8007f46:	9305      	str	r3, [sp, #20]
 8007f48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800800c <_svfiprintf_r+0x1f4>
 8007f4c:	7821      	ldrb	r1, [r4, #0]
 8007f4e:	2203      	movs	r2, #3
 8007f50:	4650      	mov	r0, sl
 8007f52:	f7f8 f95d 	bl	8000210 <memchr>
 8007f56:	b138      	cbz	r0, 8007f68 <_svfiprintf_r+0x150>
 8007f58:	9b04      	ldr	r3, [sp, #16]
 8007f5a:	eba0 000a 	sub.w	r0, r0, sl
 8007f5e:	2240      	movs	r2, #64	@ 0x40
 8007f60:	4082      	lsls	r2, r0
 8007f62:	4313      	orrs	r3, r2
 8007f64:	3401      	adds	r4, #1
 8007f66:	9304      	str	r3, [sp, #16]
 8007f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f6c:	4824      	ldr	r0, [pc, #144]	@ (8008000 <_svfiprintf_r+0x1e8>)
 8007f6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f72:	2206      	movs	r2, #6
 8007f74:	f7f8 f94c 	bl	8000210 <memchr>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d036      	beq.n	8007fea <_svfiprintf_r+0x1d2>
 8007f7c:	4b21      	ldr	r3, [pc, #132]	@ (8008004 <_svfiprintf_r+0x1ec>)
 8007f7e:	bb1b      	cbnz	r3, 8007fc8 <_svfiprintf_r+0x1b0>
 8007f80:	9b03      	ldr	r3, [sp, #12]
 8007f82:	3307      	adds	r3, #7
 8007f84:	f023 0307 	bic.w	r3, r3, #7
 8007f88:	3308      	adds	r3, #8
 8007f8a:	9303      	str	r3, [sp, #12]
 8007f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8e:	4433      	add	r3, r6
 8007f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f92:	e76a      	b.n	8007e6a <_svfiprintf_r+0x52>
 8007f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f98:	460c      	mov	r4, r1
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	e7a8      	b.n	8007ef0 <_svfiprintf_r+0xd8>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	3401      	adds	r4, #1
 8007fa2:	9305      	str	r3, [sp, #20]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	f04f 0c0a 	mov.w	ip, #10
 8007faa:	4620      	mov	r0, r4
 8007fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fb0:	3a30      	subs	r2, #48	@ 0x30
 8007fb2:	2a09      	cmp	r2, #9
 8007fb4:	d903      	bls.n	8007fbe <_svfiprintf_r+0x1a6>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0c6      	beq.n	8007f48 <_svfiprintf_r+0x130>
 8007fba:	9105      	str	r1, [sp, #20]
 8007fbc:	e7c4      	b.n	8007f48 <_svfiprintf_r+0x130>
 8007fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e7f0      	b.n	8007faa <_svfiprintf_r+0x192>
 8007fc8:	ab03      	add	r3, sp, #12
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	462a      	mov	r2, r5
 8007fce:	4b0e      	ldr	r3, [pc, #56]	@ (8008008 <_svfiprintf_r+0x1f0>)
 8007fd0:	a904      	add	r1, sp, #16
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	f3af 8000 	nop.w
 8007fd8:	1c42      	adds	r2, r0, #1
 8007fda:	4606      	mov	r6, r0
 8007fdc:	d1d6      	bne.n	8007f8c <_svfiprintf_r+0x174>
 8007fde:	89ab      	ldrh	r3, [r5, #12]
 8007fe0:	065b      	lsls	r3, r3, #25
 8007fe2:	f53f af2d 	bmi.w	8007e40 <_svfiprintf_r+0x28>
 8007fe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fe8:	e72c      	b.n	8007e44 <_svfiprintf_r+0x2c>
 8007fea:	ab03      	add	r3, sp, #12
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	462a      	mov	r2, r5
 8007ff0:	4b05      	ldr	r3, [pc, #20]	@ (8008008 <_svfiprintf_r+0x1f0>)
 8007ff2:	a904      	add	r1, sp, #16
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f000 f879 	bl	80080ec <_printf_i>
 8007ffa:	e7ed      	b.n	8007fd8 <_svfiprintf_r+0x1c0>
 8007ffc:	08008ee2 	.word	0x08008ee2
 8008000:	08008eec 	.word	0x08008eec
 8008004:	00000000 	.word	0x00000000
 8008008:	08007d61 	.word	0x08007d61
 800800c:	08008ee8 	.word	0x08008ee8

08008010 <_printf_common>:
 8008010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008014:	4616      	mov	r6, r2
 8008016:	4698      	mov	r8, r3
 8008018:	688a      	ldr	r2, [r1, #8]
 800801a:	690b      	ldr	r3, [r1, #16]
 800801c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008020:	4293      	cmp	r3, r2
 8008022:	bfb8      	it	lt
 8008024:	4613      	movlt	r3, r2
 8008026:	6033      	str	r3, [r6, #0]
 8008028:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800802c:	4607      	mov	r7, r0
 800802e:	460c      	mov	r4, r1
 8008030:	b10a      	cbz	r2, 8008036 <_printf_common+0x26>
 8008032:	3301      	adds	r3, #1
 8008034:	6033      	str	r3, [r6, #0]
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	0699      	lsls	r1, r3, #26
 800803a:	bf42      	ittt	mi
 800803c:	6833      	ldrmi	r3, [r6, #0]
 800803e:	3302      	addmi	r3, #2
 8008040:	6033      	strmi	r3, [r6, #0]
 8008042:	6825      	ldr	r5, [r4, #0]
 8008044:	f015 0506 	ands.w	r5, r5, #6
 8008048:	d106      	bne.n	8008058 <_printf_common+0x48>
 800804a:	f104 0a19 	add.w	sl, r4, #25
 800804e:	68e3      	ldr	r3, [r4, #12]
 8008050:	6832      	ldr	r2, [r6, #0]
 8008052:	1a9b      	subs	r3, r3, r2
 8008054:	42ab      	cmp	r3, r5
 8008056:	dc26      	bgt.n	80080a6 <_printf_common+0x96>
 8008058:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800805c:	6822      	ldr	r2, [r4, #0]
 800805e:	3b00      	subs	r3, #0
 8008060:	bf18      	it	ne
 8008062:	2301      	movne	r3, #1
 8008064:	0692      	lsls	r2, r2, #26
 8008066:	d42b      	bmi.n	80080c0 <_printf_common+0xb0>
 8008068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800806c:	4641      	mov	r1, r8
 800806e:	4638      	mov	r0, r7
 8008070:	47c8      	blx	r9
 8008072:	3001      	adds	r0, #1
 8008074:	d01e      	beq.n	80080b4 <_printf_common+0xa4>
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	6922      	ldr	r2, [r4, #16]
 800807a:	f003 0306 	and.w	r3, r3, #6
 800807e:	2b04      	cmp	r3, #4
 8008080:	bf02      	ittt	eq
 8008082:	68e5      	ldreq	r5, [r4, #12]
 8008084:	6833      	ldreq	r3, [r6, #0]
 8008086:	1aed      	subeq	r5, r5, r3
 8008088:	68a3      	ldr	r3, [r4, #8]
 800808a:	bf0c      	ite	eq
 800808c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008090:	2500      	movne	r5, #0
 8008092:	4293      	cmp	r3, r2
 8008094:	bfc4      	itt	gt
 8008096:	1a9b      	subgt	r3, r3, r2
 8008098:	18ed      	addgt	r5, r5, r3
 800809a:	2600      	movs	r6, #0
 800809c:	341a      	adds	r4, #26
 800809e:	42b5      	cmp	r5, r6
 80080a0:	d11a      	bne.n	80080d8 <_printf_common+0xc8>
 80080a2:	2000      	movs	r0, #0
 80080a4:	e008      	b.n	80080b8 <_printf_common+0xa8>
 80080a6:	2301      	movs	r3, #1
 80080a8:	4652      	mov	r2, sl
 80080aa:	4641      	mov	r1, r8
 80080ac:	4638      	mov	r0, r7
 80080ae:	47c8      	blx	r9
 80080b0:	3001      	adds	r0, #1
 80080b2:	d103      	bne.n	80080bc <_printf_common+0xac>
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295
 80080b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080bc:	3501      	adds	r5, #1
 80080be:	e7c6      	b.n	800804e <_printf_common+0x3e>
 80080c0:	18e1      	adds	r1, r4, r3
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	2030      	movs	r0, #48	@ 0x30
 80080c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80080ca:	4422      	add	r2, r4
 80080cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080d4:	3302      	adds	r3, #2
 80080d6:	e7c7      	b.n	8008068 <_printf_common+0x58>
 80080d8:	2301      	movs	r3, #1
 80080da:	4622      	mov	r2, r4
 80080dc:	4641      	mov	r1, r8
 80080de:	4638      	mov	r0, r7
 80080e0:	47c8      	blx	r9
 80080e2:	3001      	adds	r0, #1
 80080e4:	d0e6      	beq.n	80080b4 <_printf_common+0xa4>
 80080e6:	3601      	adds	r6, #1
 80080e8:	e7d9      	b.n	800809e <_printf_common+0x8e>
	...

080080ec <_printf_i>:
 80080ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080f0:	7e0f      	ldrb	r7, [r1, #24]
 80080f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080f4:	2f78      	cmp	r7, #120	@ 0x78
 80080f6:	4691      	mov	r9, r2
 80080f8:	4680      	mov	r8, r0
 80080fa:	460c      	mov	r4, r1
 80080fc:	469a      	mov	sl, r3
 80080fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008102:	d807      	bhi.n	8008114 <_printf_i+0x28>
 8008104:	2f62      	cmp	r7, #98	@ 0x62
 8008106:	d80a      	bhi.n	800811e <_printf_i+0x32>
 8008108:	2f00      	cmp	r7, #0
 800810a:	f000 80d1 	beq.w	80082b0 <_printf_i+0x1c4>
 800810e:	2f58      	cmp	r7, #88	@ 0x58
 8008110:	f000 80b8 	beq.w	8008284 <_printf_i+0x198>
 8008114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008118:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800811c:	e03a      	b.n	8008194 <_printf_i+0xa8>
 800811e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008122:	2b15      	cmp	r3, #21
 8008124:	d8f6      	bhi.n	8008114 <_printf_i+0x28>
 8008126:	a101      	add	r1, pc, #4	@ (adr r1, 800812c <_printf_i+0x40>)
 8008128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800812c:	08008185 	.word	0x08008185
 8008130:	08008199 	.word	0x08008199
 8008134:	08008115 	.word	0x08008115
 8008138:	08008115 	.word	0x08008115
 800813c:	08008115 	.word	0x08008115
 8008140:	08008115 	.word	0x08008115
 8008144:	08008199 	.word	0x08008199
 8008148:	08008115 	.word	0x08008115
 800814c:	08008115 	.word	0x08008115
 8008150:	08008115 	.word	0x08008115
 8008154:	08008115 	.word	0x08008115
 8008158:	08008297 	.word	0x08008297
 800815c:	080081c3 	.word	0x080081c3
 8008160:	08008251 	.word	0x08008251
 8008164:	08008115 	.word	0x08008115
 8008168:	08008115 	.word	0x08008115
 800816c:	080082b9 	.word	0x080082b9
 8008170:	08008115 	.word	0x08008115
 8008174:	080081c3 	.word	0x080081c3
 8008178:	08008115 	.word	0x08008115
 800817c:	08008115 	.word	0x08008115
 8008180:	08008259 	.word	0x08008259
 8008184:	6833      	ldr	r3, [r6, #0]
 8008186:	1d1a      	adds	r2, r3, #4
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6032      	str	r2, [r6, #0]
 800818c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008190:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008194:	2301      	movs	r3, #1
 8008196:	e09c      	b.n	80082d2 <_printf_i+0x1e6>
 8008198:	6833      	ldr	r3, [r6, #0]
 800819a:	6820      	ldr	r0, [r4, #0]
 800819c:	1d19      	adds	r1, r3, #4
 800819e:	6031      	str	r1, [r6, #0]
 80081a0:	0606      	lsls	r6, r0, #24
 80081a2:	d501      	bpl.n	80081a8 <_printf_i+0xbc>
 80081a4:	681d      	ldr	r5, [r3, #0]
 80081a6:	e003      	b.n	80081b0 <_printf_i+0xc4>
 80081a8:	0645      	lsls	r5, r0, #25
 80081aa:	d5fb      	bpl.n	80081a4 <_printf_i+0xb8>
 80081ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081b0:	2d00      	cmp	r5, #0
 80081b2:	da03      	bge.n	80081bc <_printf_i+0xd0>
 80081b4:	232d      	movs	r3, #45	@ 0x2d
 80081b6:	426d      	negs	r5, r5
 80081b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081bc:	4858      	ldr	r0, [pc, #352]	@ (8008320 <_printf_i+0x234>)
 80081be:	230a      	movs	r3, #10
 80081c0:	e011      	b.n	80081e6 <_printf_i+0xfa>
 80081c2:	6821      	ldr	r1, [r4, #0]
 80081c4:	6833      	ldr	r3, [r6, #0]
 80081c6:	0608      	lsls	r0, r1, #24
 80081c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80081cc:	d402      	bmi.n	80081d4 <_printf_i+0xe8>
 80081ce:	0649      	lsls	r1, r1, #25
 80081d0:	bf48      	it	mi
 80081d2:	b2ad      	uxthmi	r5, r5
 80081d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80081d6:	4852      	ldr	r0, [pc, #328]	@ (8008320 <_printf_i+0x234>)
 80081d8:	6033      	str	r3, [r6, #0]
 80081da:	bf14      	ite	ne
 80081dc:	230a      	movne	r3, #10
 80081de:	2308      	moveq	r3, #8
 80081e0:	2100      	movs	r1, #0
 80081e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081e6:	6866      	ldr	r6, [r4, #4]
 80081e8:	60a6      	str	r6, [r4, #8]
 80081ea:	2e00      	cmp	r6, #0
 80081ec:	db05      	blt.n	80081fa <_printf_i+0x10e>
 80081ee:	6821      	ldr	r1, [r4, #0]
 80081f0:	432e      	orrs	r6, r5
 80081f2:	f021 0104 	bic.w	r1, r1, #4
 80081f6:	6021      	str	r1, [r4, #0]
 80081f8:	d04b      	beq.n	8008292 <_printf_i+0x1a6>
 80081fa:	4616      	mov	r6, r2
 80081fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008200:	fb03 5711 	mls	r7, r3, r1, r5
 8008204:	5dc7      	ldrb	r7, [r0, r7]
 8008206:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800820a:	462f      	mov	r7, r5
 800820c:	42bb      	cmp	r3, r7
 800820e:	460d      	mov	r5, r1
 8008210:	d9f4      	bls.n	80081fc <_printf_i+0x110>
 8008212:	2b08      	cmp	r3, #8
 8008214:	d10b      	bne.n	800822e <_printf_i+0x142>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	07df      	lsls	r7, r3, #31
 800821a:	d508      	bpl.n	800822e <_printf_i+0x142>
 800821c:	6923      	ldr	r3, [r4, #16]
 800821e:	6861      	ldr	r1, [r4, #4]
 8008220:	4299      	cmp	r1, r3
 8008222:	bfde      	ittt	le
 8008224:	2330      	movle	r3, #48	@ 0x30
 8008226:	f806 3c01 	strble.w	r3, [r6, #-1]
 800822a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800822e:	1b92      	subs	r2, r2, r6
 8008230:	6122      	str	r2, [r4, #16]
 8008232:	f8cd a000 	str.w	sl, [sp]
 8008236:	464b      	mov	r3, r9
 8008238:	aa03      	add	r2, sp, #12
 800823a:	4621      	mov	r1, r4
 800823c:	4640      	mov	r0, r8
 800823e:	f7ff fee7 	bl	8008010 <_printf_common>
 8008242:	3001      	adds	r0, #1
 8008244:	d14a      	bne.n	80082dc <_printf_i+0x1f0>
 8008246:	f04f 30ff 	mov.w	r0, #4294967295
 800824a:	b004      	add	sp, #16
 800824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	f043 0320 	orr.w	r3, r3, #32
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	4832      	ldr	r0, [pc, #200]	@ (8008324 <_printf_i+0x238>)
 800825a:	2778      	movs	r7, #120	@ 0x78
 800825c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	6831      	ldr	r1, [r6, #0]
 8008264:	061f      	lsls	r7, r3, #24
 8008266:	f851 5b04 	ldr.w	r5, [r1], #4
 800826a:	d402      	bmi.n	8008272 <_printf_i+0x186>
 800826c:	065f      	lsls	r7, r3, #25
 800826e:	bf48      	it	mi
 8008270:	b2ad      	uxthmi	r5, r5
 8008272:	6031      	str	r1, [r6, #0]
 8008274:	07d9      	lsls	r1, r3, #31
 8008276:	bf44      	itt	mi
 8008278:	f043 0320 	orrmi.w	r3, r3, #32
 800827c:	6023      	strmi	r3, [r4, #0]
 800827e:	b11d      	cbz	r5, 8008288 <_printf_i+0x19c>
 8008280:	2310      	movs	r3, #16
 8008282:	e7ad      	b.n	80081e0 <_printf_i+0xf4>
 8008284:	4826      	ldr	r0, [pc, #152]	@ (8008320 <_printf_i+0x234>)
 8008286:	e7e9      	b.n	800825c <_printf_i+0x170>
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	f023 0320 	bic.w	r3, r3, #32
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	e7f6      	b.n	8008280 <_printf_i+0x194>
 8008292:	4616      	mov	r6, r2
 8008294:	e7bd      	b.n	8008212 <_printf_i+0x126>
 8008296:	6833      	ldr	r3, [r6, #0]
 8008298:	6825      	ldr	r5, [r4, #0]
 800829a:	6961      	ldr	r1, [r4, #20]
 800829c:	1d18      	adds	r0, r3, #4
 800829e:	6030      	str	r0, [r6, #0]
 80082a0:	062e      	lsls	r6, r5, #24
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	d501      	bpl.n	80082aa <_printf_i+0x1be>
 80082a6:	6019      	str	r1, [r3, #0]
 80082a8:	e002      	b.n	80082b0 <_printf_i+0x1c4>
 80082aa:	0668      	lsls	r0, r5, #25
 80082ac:	d5fb      	bpl.n	80082a6 <_printf_i+0x1ba>
 80082ae:	8019      	strh	r1, [r3, #0]
 80082b0:	2300      	movs	r3, #0
 80082b2:	6123      	str	r3, [r4, #16]
 80082b4:	4616      	mov	r6, r2
 80082b6:	e7bc      	b.n	8008232 <_printf_i+0x146>
 80082b8:	6833      	ldr	r3, [r6, #0]
 80082ba:	1d1a      	adds	r2, r3, #4
 80082bc:	6032      	str	r2, [r6, #0]
 80082be:	681e      	ldr	r6, [r3, #0]
 80082c0:	6862      	ldr	r2, [r4, #4]
 80082c2:	2100      	movs	r1, #0
 80082c4:	4630      	mov	r0, r6
 80082c6:	f7f7 ffa3 	bl	8000210 <memchr>
 80082ca:	b108      	cbz	r0, 80082d0 <_printf_i+0x1e4>
 80082cc:	1b80      	subs	r0, r0, r6
 80082ce:	6060      	str	r0, [r4, #4]
 80082d0:	6863      	ldr	r3, [r4, #4]
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	2300      	movs	r3, #0
 80082d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082da:	e7aa      	b.n	8008232 <_printf_i+0x146>
 80082dc:	6923      	ldr	r3, [r4, #16]
 80082de:	4632      	mov	r2, r6
 80082e0:	4649      	mov	r1, r9
 80082e2:	4640      	mov	r0, r8
 80082e4:	47d0      	blx	sl
 80082e6:	3001      	adds	r0, #1
 80082e8:	d0ad      	beq.n	8008246 <_printf_i+0x15a>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	079b      	lsls	r3, r3, #30
 80082ee:	d413      	bmi.n	8008318 <_printf_i+0x22c>
 80082f0:	68e0      	ldr	r0, [r4, #12]
 80082f2:	9b03      	ldr	r3, [sp, #12]
 80082f4:	4298      	cmp	r0, r3
 80082f6:	bfb8      	it	lt
 80082f8:	4618      	movlt	r0, r3
 80082fa:	e7a6      	b.n	800824a <_printf_i+0x15e>
 80082fc:	2301      	movs	r3, #1
 80082fe:	4632      	mov	r2, r6
 8008300:	4649      	mov	r1, r9
 8008302:	4640      	mov	r0, r8
 8008304:	47d0      	blx	sl
 8008306:	3001      	adds	r0, #1
 8008308:	d09d      	beq.n	8008246 <_printf_i+0x15a>
 800830a:	3501      	adds	r5, #1
 800830c:	68e3      	ldr	r3, [r4, #12]
 800830e:	9903      	ldr	r1, [sp, #12]
 8008310:	1a5b      	subs	r3, r3, r1
 8008312:	42ab      	cmp	r3, r5
 8008314:	dcf2      	bgt.n	80082fc <_printf_i+0x210>
 8008316:	e7eb      	b.n	80082f0 <_printf_i+0x204>
 8008318:	2500      	movs	r5, #0
 800831a:	f104 0619 	add.w	r6, r4, #25
 800831e:	e7f5      	b.n	800830c <_printf_i+0x220>
 8008320:	08008ef3 	.word	0x08008ef3
 8008324:	08008f04 	.word	0x08008f04

08008328 <__sflush_r>:
 8008328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008330:	0716      	lsls	r6, r2, #28
 8008332:	4605      	mov	r5, r0
 8008334:	460c      	mov	r4, r1
 8008336:	d454      	bmi.n	80083e2 <__sflush_r+0xba>
 8008338:	684b      	ldr	r3, [r1, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	dc02      	bgt.n	8008344 <__sflush_r+0x1c>
 800833e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	dd48      	ble.n	80083d6 <__sflush_r+0xae>
 8008344:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008346:	2e00      	cmp	r6, #0
 8008348:	d045      	beq.n	80083d6 <__sflush_r+0xae>
 800834a:	2300      	movs	r3, #0
 800834c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008350:	682f      	ldr	r7, [r5, #0]
 8008352:	6a21      	ldr	r1, [r4, #32]
 8008354:	602b      	str	r3, [r5, #0]
 8008356:	d030      	beq.n	80083ba <__sflush_r+0x92>
 8008358:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	0759      	lsls	r1, r3, #29
 800835e:	d505      	bpl.n	800836c <__sflush_r+0x44>
 8008360:	6863      	ldr	r3, [r4, #4]
 8008362:	1ad2      	subs	r2, r2, r3
 8008364:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008366:	b10b      	cbz	r3, 800836c <__sflush_r+0x44>
 8008368:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800836a:	1ad2      	subs	r2, r2, r3
 800836c:	2300      	movs	r3, #0
 800836e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008370:	6a21      	ldr	r1, [r4, #32]
 8008372:	4628      	mov	r0, r5
 8008374:	47b0      	blx	r6
 8008376:	1c43      	adds	r3, r0, #1
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	d106      	bne.n	800838a <__sflush_r+0x62>
 800837c:	6829      	ldr	r1, [r5, #0]
 800837e:	291d      	cmp	r1, #29
 8008380:	d82b      	bhi.n	80083da <__sflush_r+0xb2>
 8008382:	4a2a      	ldr	r2, [pc, #168]	@ (800842c <__sflush_r+0x104>)
 8008384:	40ca      	lsrs	r2, r1
 8008386:	07d6      	lsls	r6, r2, #31
 8008388:	d527      	bpl.n	80083da <__sflush_r+0xb2>
 800838a:	2200      	movs	r2, #0
 800838c:	6062      	str	r2, [r4, #4]
 800838e:	04d9      	lsls	r1, r3, #19
 8008390:	6922      	ldr	r2, [r4, #16]
 8008392:	6022      	str	r2, [r4, #0]
 8008394:	d504      	bpl.n	80083a0 <__sflush_r+0x78>
 8008396:	1c42      	adds	r2, r0, #1
 8008398:	d101      	bne.n	800839e <__sflush_r+0x76>
 800839a:	682b      	ldr	r3, [r5, #0]
 800839c:	b903      	cbnz	r3, 80083a0 <__sflush_r+0x78>
 800839e:	6560      	str	r0, [r4, #84]	@ 0x54
 80083a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083a2:	602f      	str	r7, [r5, #0]
 80083a4:	b1b9      	cbz	r1, 80083d6 <__sflush_r+0xae>
 80083a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083aa:	4299      	cmp	r1, r3
 80083ac:	d002      	beq.n	80083b4 <__sflush_r+0x8c>
 80083ae:	4628      	mov	r0, r5
 80083b0:	f7ff fbd6 	bl	8007b60 <_free_r>
 80083b4:	2300      	movs	r3, #0
 80083b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80083b8:	e00d      	b.n	80083d6 <__sflush_r+0xae>
 80083ba:	2301      	movs	r3, #1
 80083bc:	4628      	mov	r0, r5
 80083be:	47b0      	blx	r6
 80083c0:	4602      	mov	r2, r0
 80083c2:	1c50      	adds	r0, r2, #1
 80083c4:	d1c9      	bne.n	800835a <__sflush_r+0x32>
 80083c6:	682b      	ldr	r3, [r5, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0c6      	beq.n	800835a <__sflush_r+0x32>
 80083cc:	2b1d      	cmp	r3, #29
 80083ce:	d001      	beq.n	80083d4 <__sflush_r+0xac>
 80083d0:	2b16      	cmp	r3, #22
 80083d2:	d11e      	bne.n	8008412 <__sflush_r+0xea>
 80083d4:	602f      	str	r7, [r5, #0]
 80083d6:	2000      	movs	r0, #0
 80083d8:	e022      	b.n	8008420 <__sflush_r+0xf8>
 80083da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083de:	b21b      	sxth	r3, r3
 80083e0:	e01b      	b.n	800841a <__sflush_r+0xf2>
 80083e2:	690f      	ldr	r7, [r1, #16]
 80083e4:	2f00      	cmp	r7, #0
 80083e6:	d0f6      	beq.n	80083d6 <__sflush_r+0xae>
 80083e8:	0793      	lsls	r3, r2, #30
 80083ea:	680e      	ldr	r6, [r1, #0]
 80083ec:	bf08      	it	eq
 80083ee:	694b      	ldreq	r3, [r1, #20]
 80083f0:	600f      	str	r7, [r1, #0]
 80083f2:	bf18      	it	ne
 80083f4:	2300      	movne	r3, #0
 80083f6:	eba6 0807 	sub.w	r8, r6, r7
 80083fa:	608b      	str	r3, [r1, #8]
 80083fc:	f1b8 0f00 	cmp.w	r8, #0
 8008400:	dde9      	ble.n	80083d6 <__sflush_r+0xae>
 8008402:	6a21      	ldr	r1, [r4, #32]
 8008404:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008406:	4643      	mov	r3, r8
 8008408:	463a      	mov	r2, r7
 800840a:	4628      	mov	r0, r5
 800840c:	47b0      	blx	r6
 800840e:	2800      	cmp	r0, #0
 8008410:	dc08      	bgt.n	8008424 <__sflush_r+0xfc>
 8008412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800841a:	81a3      	strh	r3, [r4, #12]
 800841c:	f04f 30ff 	mov.w	r0, #4294967295
 8008420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008424:	4407      	add	r7, r0
 8008426:	eba8 0800 	sub.w	r8, r8, r0
 800842a:	e7e7      	b.n	80083fc <__sflush_r+0xd4>
 800842c:	20400001 	.word	0x20400001

08008430 <_fflush_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	690b      	ldr	r3, [r1, #16]
 8008434:	4605      	mov	r5, r0
 8008436:	460c      	mov	r4, r1
 8008438:	b913      	cbnz	r3, 8008440 <_fflush_r+0x10>
 800843a:	2500      	movs	r5, #0
 800843c:	4628      	mov	r0, r5
 800843e:	bd38      	pop	{r3, r4, r5, pc}
 8008440:	b118      	cbz	r0, 800844a <_fflush_r+0x1a>
 8008442:	6a03      	ldr	r3, [r0, #32]
 8008444:	b90b      	cbnz	r3, 800844a <_fflush_r+0x1a>
 8008446:	f7ff f9d7 	bl	80077f8 <__sinit>
 800844a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0f3      	beq.n	800843a <_fflush_r+0xa>
 8008452:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008454:	07d0      	lsls	r0, r2, #31
 8008456:	d404      	bmi.n	8008462 <_fflush_r+0x32>
 8008458:	0599      	lsls	r1, r3, #22
 800845a:	d402      	bmi.n	8008462 <_fflush_r+0x32>
 800845c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800845e:	f7ff fb50 	bl	8007b02 <__retarget_lock_acquire_recursive>
 8008462:	4628      	mov	r0, r5
 8008464:	4621      	mov	r1, r4
 8008466:	f7ff ff5f 	bl	8008328 <__sflush_r>
 800846a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800846c:	07da      	lsls	r2, r3, #31
 800846e:	4605      	mov	r5, r0
 8008470:	d4e4      	bmi.n	800843c <_fflush_r+0xc>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	059b      	lsls	r3, r3, #22
 8008476:	d4e1      	bmi.n	800843c <_fflush_r+0xc>
 8008478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800847a:	f7ff fb43 	bl	8007b04 <__retarget_lock_release_recursive>
 800847e:	e7dd      	b.n	800843c <_fflush_r+0xc>

08008480 <fiprintf>:
 8008480:	b40e      	push	{r1, r2, r3}
 8008482:	b503      	push	{r0, r1, lr}
 8008484:	4601      	mov	r1, r0
 8008486:	ab03      	add	r3, sp, #12
 8008488:	4805      	ldr	r0, [pc, #20]	@ (80084a0 <fiprintf+0x20>)
 800848a:	f853 2b04 	ldr.w	r2, [r3], #4
 800848e:	6800      	ldr	r0, [r0, #0]
 8008490:	9301      	str	r3, [sp, #4]
 8008492:	f000 f88f 	bl	80085b4 <_vfiprintf_r>
 8008496:	b002      	add	sp, #8
 8008498:	f85d eb04 	ldr.w	lr, [sp], #4
 800849c:	b003      	add	sp, #12
 800849e:	4770      	bx	lr
 80084a0:	20000044 	.word	0x20000044

080084a4 <memmove>:
 80084a4:	4288      	cmp	r0, r1
 80084a6:	b510      	push	{r4, lr}
 80084a8:	eb01 0402 	add.w	r4, r1, r2
 80084ac:	d902      	bls.n	80084b4 <memmove+0x10>
 80084ae:	4284      	cmp	r4, r0
 80084b0:	4623      	mov	r3, r4
 80084b2:	d807      	bhi.n	80084c4 <memmove+0x20>
 80084b4:	1e43      	subs	r3, r0, #1
 80084b6:	42a1      	cmp	r1, r4
 80084b8:	d008      	beq.n	80084cc <memmove+0x28>
 80084ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084c2:	e7f8      	b.n	80084b6 <memmove+0x12>
 80084c4:	4402      	add	r2, r0
 80084c6:	4601      	mov	r1, r0
 80084c8:	428a      	cmp	r2, r1
 80084ca:	d100      	bne.n	80084ce <memmove+0x2a>
 80084cc:	bd10      	pop	{r4, pc}
 80084ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084d6:	e7f7      	b.n	80084c8 <memmove+0x24>

080084d8 <_sbrk_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	4d06      	ldr	r5, [pc, #24]	@ (80084f4 <_sbrk_r+0x1c>)
 80084dc:	2300      	movs	r3, #0
 80084de:	4604      	mov	r4, r0
 80084e0:	4608      	mov	r0, r1
 80084e2:	602b      	str	r3, [r5, #0]
 80084e4:	f7f8 fe70 	bl	80011c8 <_sbrk>
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d102      	bne.n	80084f2 <_sbrk_r+0x1a>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	b103      	cbz	r3, 80084f2 <_sbrk_r+0x1a>
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	20004d08 	.word	0x20004d08

080084f8 <abort>:
 80084f8:	b508      	push	{r3, lr}
 80084fa:	2006      	movs	r0, #6
 80084fc:	f000 fa2e 	bl	800895c <raise>
 8008500:	2001      	movs	r0, #1
 8008502:	f7f8 fde9 	bl	80010d8 <_exit>

08008506 <_realloc_r>:
 8008506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800850a:	4607      	mov	r7, r0
 800850c:	4614      	mov	r4, r2
 800850e:	460d      	mov	r5, r1
 8008510:	b921      	cbnz	r1, 800851c <_realloc_r+0x16>
 8008512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008516:	4611      	mov	r1, r2
 8008518:	f7ff bb96 	b.w	8007c48 <_malloc_r>
 800851c:	b92a      	cbnz	r2, 800852a <_realloc_r+0x24>
 800851e:	f7ff fb1f 	bl	8007b60 <_free_r>
 8008522:	4625      	mov	r5, r4
 8008524:	4628      	mov	r0, r5
 8008526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800852a:	f000 fa33 	bl	8008994 <_malloc_usable_size_r>
 800852e:	4284      	cmp	r4, r0
 8008530:	4606      	mov	r6, r0
 8008532:	d802      	bhi.n	800853a <_realloc_r+0x34>
 8008534:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008538:	d8f4      	bhi.n	8008524 <_realloc_r+0x1e>
 800853a:	4621      	mov	r1, r4
 800853c:	4638      	mov	r0, r7
 800853e:	f7ff fb83 	bl	8007c48 <_malloc_r>
 8008542:	4680      	mov	r8, r0
 8008544:	b908      	cbnz	r0, 800854a <_realloc_r+0x44>
 8008546:	4645      	mov	r5, r8
 8008548:	e7ec      	b.n	8008524 <_realloc_r+0x1e>
 800854a:	42b4      	cmp	r4, r6
 800854c:	4622      	mov	r2, r4
 800854e:	4629      	mov	r1, r5
 8008550:	bf28      	it	cs
 8008552:	4632      	movcs	r2, r6
 8008554:	f7ff fad7 	bl	8007b06 <memcpy>
 8008558:	4629      	mov	r1, r5
 800855a:	4638      	mov	r0, r7
 800855c:	f7ff fb00 	bl	8007b60 <_free_r>
 8008560:	e7f1      	b.n	8008546 <_realloc_r+0x40>

08008562 <__sfputc_r>:
 8008562:	6893      	ldr	r3, [r2, #8]
 8008564:	3b01      	subs	r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	b410      	push	{r4}
 800856a:	6093      	str	r3, [r2, #8]
 800856c:	da08      	bge.n	8008580 <__sfputc_r+0x1e>
 800856e:	6994      	ldr	r4, [r2, #24]
 8008570:	42a3      	cmp	r3, r4
 8008572:	db01      	blt.n	8008578 <__sfputc_r+0x16>
 8008574:	290a      	cmp	r1, #10
 8008576:	d103      	bne.n	8008580 <__sfputc_r+0x1e>
 8008578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800857c:	f000 b932 	b.w	80087e4 <__swbuf_r>
 8008580:	6813      	ldr	r3, [r2, #0]
 8008582:	1c58      	adds	r0, r3, #1
 8008584:	6010      	str	r0, [r2, #0]
 8008586:	7019      	strb	r1, [r3, #0]
 8008588:	4608      	mov	r0, r1
 800858a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800858e:	4770      	bx	lr

08008590 <__sfputs_r>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	4606      	mov	r6, r0
 8008594:	460f      	mov	r7, r1
 8008596:	4614      	mov	r4, r2
 8008598:	18d5      	adds	r5, r2, r3
 800859a:	42ac      	cmp	r4, r5
 800859c:	d101      	bne.n	80085a2 <__sfputs_r+0x12>
 800859e:	2000      	movs	r0, #0
 80085a0:	e007      	b.n	80085b2 <__sfputs_r+0x22>
 80085a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a6:	463a      	mov	r2, r7
 80085a8:	4630      	mov	r0, r6
 80085aa:	f7ff ffda 	bl	8008562 <__sfputc_r>
 80085ae:	1c43      	adds	r3, r0, #1
 80085b0:	d1f3      	bne.n	800859a <__sfputs_r+0xa>
 80085b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085b4 <_vfiprintf_r>:
 80085b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	460d      	mov	r5, r1
 80085ba:	b09d      	sub	sp, #116	@ 0x74
 80085bc:	4614      	mov	r4, r2
 80085be:	4698      	mov	r8, r3
 80085c0:	4606      	mov	r6, r0
 80085c2:	b118      	cbz	r0, 80085cc <_vfiprintf_r+0x18>
 80085c4:	6a03      	ldr	r3, [r0, #32]
 80085c6:	b90b      	cbnz	r3, 80085cc <_vfiprintf_r+0x18>
 80085c8:	f7ff f916 	bl	80077f8 <__sinit>
 80085cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085ce:	07d9      	lsls	r1, r3, #31
 80085d0:	d405      	bmi.n	80085de <_vfiprintf_r+0x2a>
 80085d2:	89ab      	ldrh	r3, [r5, #12]
 80085d4:	059a      	lsls	r2, r3, #22
 80085d6:	d402      	bmi.n	80085de <_vfiprintf_r+0x2a>
 80085d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085da:	f7ff fa92 	bl	8007b02 <__retarget_lock_acquire_recursive>
 80085de:	89ab      	ldrh	r3, [r5, #12]
 80085e0:	071b      	lsls	r3, r3, #28
 80085e2:	d501      	bpl.n	80085e8 <_vfiprintf_r+0x34>
 80085e4:	692b      	ldr	r3, [r5, #16]
 80085e6:	b99b      	cbnz	r3, 8008610 <_vfiprintf_r+0x5c>
 80085e8:	4629      	mov	r1, r5
 80085ea:	4630      	mov	r0, r6
 80085ec:	f000 f938 	bl	8008860 <__swsetup_r>
 80085f0:	b170      	cbz	r0, 8008610 <_vfiprintf_r+0x5c>
 80085f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085f4:	07dc      	lsls	r4, r3, #31
 80085f6:	d504      	bpl.n	8008602 <_vfiprintf_r+0x4e>
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295
 80085fc:	b01d      	add	sp, #116	@ 0x74
 80085fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	0598      	lsls	r0, r3, #22
 8008606:	d4f7      	bmi.n	80085f8 <_vfiprintf_r+0x44>
 8008608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800860a:	f7ff fa7b 	bl	8007b04 <__retarget_lock_release_recursive>
 800860e:	e7f3      	b.n	80085f8 <_vfiprintf_r+0x44>
 8008610:	2300      	movs	r3, #0
 8008612:	9309      	str	r3, [sp, #36]	@ 0x24
 8008614:	2320      	movs	r3, #32
 8008616:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800861a:	f8cd 800c 	str.w	r8, [sp, #12]
 800861e:	2330      	movs	r3, #48	@ 0x30
 8008620:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087d0 <_vfiprintf_r+0x21c>
 8008624:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008628:	f04f 0901 	mov.w	r9, #1
 800862c:	4623      	mov	r3, r4
 800862e:	469a      	mov	sl, r3
 8008630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008634:	b10a      	cbz	r2, 800863a <_vfiprintf_r+0x86>
 8008636:	2a25      	cmp	r2, #37	@ 0x25
 8008638:	d1f9      	bne.n	800862e <_vfiprintf_r+0x7a>
 800863a:	ebba 0b04 	subs.w	fp, sl, r4
 800863e:	d00b      	beq.n	8008658 <_vfiprintf_r+0xa4>
 8008640:	465b      	mov	r3, fp
 8008642:	4622      	mov	r2, r4
 8008644:	4629      	mov	r1, r5
 8008646:	4630      	mov	r0, r6
 8008648:	f7ff ffa2 	bl	8008590 <__sfputs_r>
 800864c:	3001      	adds	r0, #1
 800864e:	f000 80a7 	beq.w	80087a0 <_vfiprintf_r+0x1ec>
 8008652:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008654:	445a      	add	r2, fp
 8008656:	9209      	str	r2, [sp, #36]	@ 0x24
 8008658:	f89a 3000 	ldrb.w	r3, [sl]
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 809f 	beq.w	80087a0 <_vfiprintf_r+0x1ec>
 8008662:	2300      	movs	r3, #0
 8008664:	f04f 32ff 	mov.w	r2, #4294967295
 8008668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800866c:	f10a 0a01 	add.w	sl, sl, #1
 8008670:	9304      	str	r3, [sp, #16]
 8008672:	9307      	str	r3, [sp, #28]
 8008674:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008678:	931a      	str	r3, [sp, #104]	@ 0x68
 800867a:	4654      	mov	r4, sl
 800867c:	2205      	movs	r2, #5
 800867e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008682:	4853      	ldr	r0, [pc, #332]	@ (80087d0 <_vfiprintf_r+0x21c>)
 8008684:	f7f7 fdc4 	bl	8000210 <memchr>
 8008688:	9a04      	ldr	r2, [sp, #16]
 800868a:	b9d8      	cbnz	r0, 80086c4 <_vfiprintf_r+0x110>
 800868c:	06d1      	lsls	r1, r2, #27
 800868e:	bf44      	itt	mi
 8008690:	2320      	movmi	r3, #32
 8008692:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008696:	0713      	lsls	r3, r2, #28
 8008698:	bf44      	itt	mi
 800869a:	232b      	movmi	r3, #43	@ 0x2b
 800869c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086a0:	f89a 3000 	ldrb.w	r3, [sl]
 80086a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80086a6:	d015      	beq.n	80086d4 <_vfiprintf_r+0x120>
 80086a8:	9a07      	ldr	r2, [sp, #28]
 80086aa:	4654      	mov	r4, sl
 80086ac:	2000      	movs	r0, #0
 80086ae:	f04f 0c0a 	mov.w	ip, #10
 80086b2:	4621      	mov	r1, r4
 80086b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086b8:	3b30      	subs	r3, #48	@ 0x30
 80086ba:	2b09      	cmp	r3, #9
 80086bc:	d94b      	bls.n	8008756 <_vfiprintf_r+0x1a2>
 80086be:	b1b0      	cbz	r0, 80086ee <_vfiprintf_r+0x13a>
 80086c0:	9207      	str	r2, [sp, #28]
 80086c2:	e014      	b.n	80086ee <_vfiprintf_r+0x13a>
 80086c4:	eba0 0308 	sub.w	r3, r0, r8
 80086c8:	fa09 f303 	lsl.w	r3, r9, r3
 80086cc:	4313      	orrs	r3, r2
 80086ce:	9304      	str	r3, [sp, #16]
 80086d0:	46a2      	mov	sl, r4
 80086d2:	e7d2      	b.n	800867a <_vfiprintf_r+0xc6>
 80086d4:	9b03      	ldr	r3, [sp, #12]
 80086d6:	1d19      	adds	r1, r3, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	9103      	str	r1, [sp, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bfbb      	ittet	lt
 80086e0:	425b      	neglt	r3, r3
 80086e2:	f042 0202 	orrlt.w	r2, r2, #2
 80086e6:	9307      	strge	r3, [sp, #28]
 80086e8:	9307      	strlt	r3, [sp, #28]
 80086ea:	bfb8      	it	lt
 80086ec:	9204      	strlt	r2, [sp, #16]
 80086ee:	7823      	ldrb	r3, [r4, #0]
 80086f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80086f2:	d10a      	bne.n	800870a <_vfiprintf_r+0x156>
 80086f4:	7863      	ldrb	r3, [r4, #1]
 80086f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80086f8:	d132      	bne.n	8008760 <_vfiprintf_r+0x1ac>
 80086fa:	9b03      	ldr	r3, [sp, #12]
 80086fc:	1d1a      	adds	r2, r3, #4
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	9203      	str	r2, [sp, #12]
 8008702:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008706:	3402      	adds	r4, #2
 8008708:	9305      	str	r3, [sp, #20]
 800870a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087e0 <_vfiprintf_r+0x22c>
 800870e:	7821      	ldrb	r1, [r4, #0]
 8008710:	2203      	movs	r2, #3
 8008712:	4650      	mov	r0, sl
 8008714:	f7f7 fd7c 	bl	8000210 <memchr>
 8008718:	b138      	cbz	r0, 800872a <_vfiprintf_r+0x176>
 800871a:	9b04      	ldr	r3, [sp, #16]
 800871c:	eba0 000a 	sub.w	r0, r0, sl
 8008720:	2240      	movs	r2, #64	@ 0x40
 8008722:	4082      	lsls	r2, r0
 8008724:	4313      	orrs	r3, r2
 8008726:	3401      	adds	r4, #1
 8008728:	9304      	str	r3, [sp, #16]
 800872a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800872e:	4829      	ldr	r0, [pc, #164]	@ (80087d4 <_vfiprintf_r+0x220>)
 8008730:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008734:	2206      	movs	r2, #6
 8008736:	f7f7 fd6b 	bl	8000210 <memchr>
 800873a:	2800      	cmp	r0, #0
 800873c:	d03f      	beq.n	80087be <_vfiprintf_r+0x20a>
 800873e:	4b26      	ldr	r3, [pc, #152]	@ (80087d8 <_vfiprintf_r+0x224>)
 8008740:	bb1b      	cbnz	r3, 800878a <_vfiprintf_r+0x1d6>
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	3307      	adds	r3, #7
 8008746:	f023 0307 	bic.w	r3, r3, #7
 800874a:	3308      	adds	r3, #8
 800874c:	9303      	str	r3, [sp, #12]
 800874e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008750:	443b      	add	r3, r7
 8008752:	9309      	str	r3, [sp, #36]	@ 0x24
 8008754:	e76a      	b.n	800862c <_vfiprintf_r+0x78>
 8008756:	fb0c 3202 	mla	r2, ip, r2, r3
 800875a:	460c      	mov	r4, r1
 800875c:	2001      	movs	r0, #1
 800875e:	e7a8      	b.n	80086b2 <_vfiprintf_r+0xfe>
 8008760:	2300      	movs	r3, #0
 8008762:	3401      	adds	r4, #1
 8008764:	9305      	str	r3, [sp, #20]
 8008766:	4619      	mov	r1, r3
 8008768:	f04f 0c0a 	mov.w	ip, #10
 800876c:	4620      	mov	r0, r4
 800876e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008772:	3a30      	subs	r2, #48	@ 0x30
 8008774:	2a09      	cmp	r2, #9
 8008776:	d903      	bls.n	8008780 <_vfiprintf_r+0x1cc>
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0c6      	beq.n	800870a <_vfiprintf_r+0x156>
 800877c:	9105      	str	r1, [sp, #20]
 800877e:	e7c4      	b.n	800870a <_vfiprintf_r+0x156>
 8008780:	fb0c 2101 	mla	r1, ip, r1, r2
 8008784:	4604      	mov	r4, r0
 8008786:	2301      	movs	r3, #1
 8008788:	e7f0      	b.n	800876c <_vfiprintf_r+0x1b8>
 800878a:	ab03      	add	r3, sp, #12
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	462a      	mov	r2, r5
 8008790:	4b12      	ldr	r3, [pc, #72]	@ (80087dc <_vfiprintf_r+0x228>)
 8008792:	a904      	add	r1, sp, #16
 8008794:	4630      	mov	r0, r6
 8008796:	f3af 8000 	nop.w
 800879a:	4607      	mov	r7, r0
 800879c:	1c78      	adds	r0, r7, #1
 800879e:	d1d6      	bne.n	800874e <_vfiprintf_r+0x19a>
 80087a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087a2:	07d9      	lsls	r1, r3, #31
 80087a4:	d405      	bmi.n	80087b2 <_vfiprintf_r+0x1fe>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	059a      	lsls	r2, r3, #22
 80087aa:	d402      	bmi.n	80087b2 <_vfiprintf_r+0x1fe>
 80087ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ae:	f7ff f9a9 	bl	8007b04 <__retarget_lock_release_recursive>
 80087b2:	89ab      	ldrh	r3, [r5, #12]
 80087b4:	065b      	lsls	r3, r3, #25
 80087b6:	f53f af1f 	bmi.w	80085f8 <_vfiprintf_r+0x44>
 80087ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087bc:	e71e      	b.n	80085fc <_vfiprintf_r+0x48>
 80087be:	ab03      	add	r3, sp, #12
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	462a      	mov	r2, r5
 80087c4:	4b05      	ldr	r3, [pc, #20]	@ (80087dc <_vfiprintf_r+0x228>)
 80087c6:	a904      	add	r1, sp, #16
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7ff fc8f 	bl	80080ec <_printf_i>
 80087ce:	e7e4      	b.n	800879a <_vfiprintf_r+0x1e6>
 80087d0:	08008ee2 	.word	0x08008ee2
 80087d4:	08008eec 	.word	0x08008eec
 80087d8:	00000000 	.word	0x00000000
 80087dc:	08008591 	.word	0x08008591
 80087e0:	08008ee8 	.word	0x08008ee8

080087e4 <__swbuf_r>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	460e      	mov	r6, r1
 80087e8:	4614      	mov	r4, r2
 80087ea:	4605      	mov	r5, r0
 80087ec:	b118      	cbz	r0, 80087f6 <__swbuf_r+0x12>
 80087ee:	6a03      	ldr	r3, [r0, #32]
 80087f0:	b90b      	cbnz	r3, 80087f6 <__swbuf_r+0x12>
 80087f2:	f7ff f801 	bl	80077f8 <__sinit>
 80087f6:	69a3      	ldr	r3, [r4, #24]
 80087f8:	60a3      	str	r3, [r4, #8]
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	071a      	lsls	r2, r3, #28
 80087fe:	d501      	bpl.n	8008804 <__swbuf_r+0x20>
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	b943      	cbnz	r3, 8008816 <__swbuf_r+0x32>
 8008804:	4621      	mov	r1, r4
 8008806:	4628      	mov	r0, r5
 8008808:	f000 f82a 	bl	8008860 <__swsetup_r>
 800880c:	b118      	cbz	r0, 8008816 <__swbuf_r+0x32>
 800880e:	f04f 37ff 	mov.w	r7, #4294967295
 8008812:	4638      	mov	r0, r7
 8008814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	6922      	ldr	r2, [r4, #16]
 800881a:	1a98      	subs	r0, r3, r2
 800881c:	6963      	ldr	r3, [r4, #20]
 800881e:	b2f6      	uxtb	r6, r6
 8008820:	4283      	cmp	r3, r0
 8008822:	4637      	mov	r7, r6
 8008824:	dc05      	bgt.n	8008832 <__swbuf_r+0x4e>
 8008826:	4621      	mov	r1, r4
 8008828:	4628      	mov	r0, r5
 800882a:	f7ff fe01 	bl	8008430 <_fflush_r>
 800882e:	2800      	cmp	r0, #0
 8008830:	d1ed      	bne.n	800880e <__swbuf_r+0x2a>
 8008832:	68a3      	ldr	r3, [r4, #8]
 8008834:	3b01      	subs	r3, #1
 8008836:	60a3      	str	r3, [r4, #8]
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	6022      	str	r2, [r4, #0]
 800883e:	701e      	strb	r6, [r3, #0]
 8008840:	6962      	ldr	r2, [r4, #20]
 8008842:	1c43      	adds	r3, r0, #1
 8008844:	429a      	cmp	r2, r3
 8008846:	d004      	beq.n	8008852 <__swbuf_r+0x6e>
 8008848:	89a3      	ldrh	r3, [r4, #12]
 800884a:	07db      	lsls	r3, r3, #31
 800884c:	d5e1      	bpl.n	8008812 <__swbuf_r+0x2e>
 800884e:	2e0a      	cmp	r6, #10
 8008850:	d1df      	bne.n	8008812 <__swbuf_r+0x2e>
 8008852:	4621      	mov	r1, r4
 8008854:	4628      	mov	r0, r5
 8008856:	f7ff fdeb 	bl	8008430 <_fflush_r>
 800885a:	2800      	cmp	r0, #0
 800885c:	d0d9      	beq.n	8008812 <__swbuf_r+0x2e>
 800885e:	e7d6      	b.n	800880e <__swbuf_r+0x2a>

08008860 <__swsetup_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4b29      	ldr	r3, [pc, #164]	@ (8008908 <__swsetup_r+0xa8>)
 8008864:	4605      	mov	r5, r0
 8008866:	6818      	ldr	r0, [r3, #0]
 8008868:	460c      	mov	r4, r1
 800886a:	b118      	cbz	r0, 8008874 <__swsetup_r+0x14>
 800886c:	6a03      	ldr	r3, [r0, #32]
 800886e:	b90b      	cbnz	r3, 8008874 <__swsetup_r+0x14>
 8008870:	f7fe ffc2 	bl	80077f8 <__sinit>
 8008874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008878:	0719      	lsls	r1, r3, #28
 800887a:	d422      	bmi.n	80088c2 <__swsetup_r+0x62>
 800887c:	06da      	lsls	r2, r3, #27
 800887e:	d407      	bmi.n	8008890 <__swsetup_r+0x30>
 8008880:	2209      	movs	r2, #9
 8008882:	602a      	str	r2, [r5, #0]
 8008884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008888:	81a3      	strh	r3, [r4, #12]
 800888a:	f04f 30ff 	mov.w	r0, #4294967295
 800888e:	e033      	b.n	80088f8 <__swsetup_r+0x98>
 8008890:	0758      	lsls	r0, r3, #29
 8008892:	d512      	bpl.n	80088ba <__swsetup_r+0x5a>
 8008894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008896:	b141      	cbz	r1, 80088aa <__swsetup_r+0x4a>
 8008898:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800889c:	4299      	cmp	r1, r3
 800889e:	d002      	beq.n	80088a6 <__swsetup_r+0x46>
 80088a0:	4628      	mov	r0, r5
 80088a2:	f7ff f95d 	bl	8007b60 <_free_r>
 80088a6:	2300      	movs	r3, #0
 80088a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088b0:	81a3      	strh	r3, [r4, #12]
 80088b2:	2300      	movs	r3, #0
 80088b4:	6063      	str	r3, [r4, #4]
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	f043 0308 	orr.w	r3, r3, #8
 80088c0:	81a3      	strh	r3, [r4, #12]
 80088c2:	6923      	ldr	r3, [r4, #16]
 80088c4:	b94b      	cbnz	r3, 80088da <__swsetup_r+0x7a>
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088d0:	d003      	beq.n	80088da <__swsetup_r+0x7a>
 80088d2:	4621      	mov	r1, r4
 80088d4:	4628      	mov	r0, r5
 80088d6:	f000 f88b 	bl	80089f0 <__smakebuf_r>
 80088da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088de:	f013 0201 	ands.w	r2, r3, #1
 80088e2:	d00a      	beq.n	80088fa <__swsetup_r+0x9a>
 80088e4:	2200      	movs	r2, #0
 80088e6:	60a2      	str	r2, [r4, #8]
 80088e8:	6962      	ldr	r2, [r4, #20]
 80088ea:	4252      	negs	r2, r2
 80088ec:	61a2      	str	r2, [r4, #24]
 80088ee:	6922      	ldr	r2, [r4, #16]
 80088f0:	b942      	cbnz	r2, 8008904 <__swsetup_r+0xa4>
 80088f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088f6:	d1c5      	bne.n	8008884 <__swsetup_r+0x24>
 80088f8:	bd38      	pop	{r3, r4, r5, pc}
 80088fa:	0799      	lsls	r1, r3, #30
 80088fc:	bf58      	it	pl
 80088fe:	6962      	ldrpl	r2, [r4, #20]
 8008900:	60a2      	str	r2, [r4, #8]
 8008902:	e7f4      	b.n	80088ee <__swsetup_r+0x8e>
 8008904:	2000      	movs	r0, #0
 8008906:	e7f7      	b.n	80088f8 <__swsetup_r+0x98>
 8008908:	20000044 	.word	0x20000044

0800890c <_raise_r>:
 800890c:	291f      	cmp	r1, #31
 800890e:	b538      	push	{r3, r4, r5, lr}
 8008910:	4605      	mov	r5, r0
 8008912:	460c      	mov	r4, r1
 8008914:	d904      	bls.n	8008920 <_raise_r+0x14>
 8008916:	2316      	movs	r3, #22
 8008918:	6003      	str	r3, [r0, #0]
 800891a:	f04f 30ff 	mov.w	r0, #4294967295
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008922:	b112      	cbz	r2, 800892a <_raise_r+0x1e>
 8008924:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008928:	b94b      	cbnz	r3, 800893e <_raise_r+0x32>
 800892a:	4628      	mov	r0, r5
 800892c:	f000 f830 	bl	8008990 <_getpid_r>
 8008930:	4622      	mov	r2, r4
 8008932:	4601      	mov	r1, r0
 8008934:	4628      	mov	r0, r5
 8008936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800893a:	f000 b817 	b.w	800896c <_kill_r>
 800893e:	2b01      	cmp	r3, #1
 8008940:	d00a      	beq.n	8008958 <_raise_r+0x4c>
 8008942:	1c59      	adds	r1, r3, #1
 8008944:	d103      	bne.n	800894e <_raise_r+0x42>
 8008946:	2316      	movs	r3, #22
 8008948:	6003      	str	r3, [r0, #0]
 800894a:	2001      	movs	r0, #1
 800894c:	e7e7      	b.n	800891e <_raise_r+0x12>
 800894e:	2100      	movs	r1, #0
 8008950:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008954:	4620      	mov	r0, r4
 8008956:	4798      	blx	r3
 8008958:	2000      	movs	r0, #0
 800895a:	e7e0      	b.n	800891e <_raise_r+0x12>

0800895c <raise>:
 800895c:	4b02      	ldr	r3, [pc, #8]	@ (8008968 <raise+0xc>)
 800895e:	4601      	mov	r1, r0
 8008960:	6818      	ldr	r0, [r3, #0]
 8008962:	f7ff bfd3 	b.w	800890c <_raise_r>
 8008966:	bf00      	nop
 8008968:	20000044 	.word	0x20000044

0800896c <_kill_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4d07      	ldr	r5, [pc, #28]	@ (800898c <_kill_r+0x20>)
 8008970:	2300      	movs	r3, #0
 8008972:	4604      	mov	r4, r0
 8008974:	4608      	mov	r0, r1
 8008976:	4611      	mov	r1, r2
 8008978:	602b      	str	r3, [r5, #0]
 800897a:	f7f8 fb9d 	bl	80010b8 <_kill>
 800897e:	1c43      	adds	r3, r0, #1
 8008980:	d102      	bne.n	8008988 <_kill_r+0x1c>
 8008982:	682b      	ldr	r3, [r5, #0]
 8008984:	b103      	cbz	r3, 8008988 <_kill_r+0x1c>
 8008986:	6023      	str	r3, [r4, #0]
 8008988:	bd38      	pop	{r3, r4, r5, pc}
 800898a:	bf00      	nop
 800898c:	20004d08 	.word	0x20004d08

08008990 <_getpid_r>:
 8008990:	f7f8 bb8a 	b.w	80010a8 <_getpid>

08008994 <_malloc_usable_size_r>:
 8008994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008998:	1f18      	subs	r0, r3, #4
 800899a:	2b00      	cmp	r3, #0
 800899c:	bfbc      	itt	lt
 800899e:	580b      	ldrlt	r3, [r1, r0]
 80089a0:	18c0      	addlt	r0, r0, r3
 80089a2:	4770      	bx	lr

080089a4 <__swhatbuf_r>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	460c      	mov	r4, r1
 80089a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ac:	2900      	cmp	r1, #0
 80089ae:	b096      	sub	sp, #88	@ 0x58
 80089b0:	4615      	mov	r5, r2
 80089b2:	461e      	mov	r6, r3
 80089b4:	da0d      	bge.n	80089d2 <__swhatbuf_r+0x2e>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089bc:	f04f 0100 	mov.w	r1, #0
 80089c0:	bf14      	ite	ne
 80089c2:	2340      	movne	r3, #64	@ 0x40
 80089c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089c8:	2000      	movs	r0, #0
 80089ca:	6031      	str	r1, [r6, #0]
 80089cc:	602b      	str	r3, [r5, #0]
 80089ce:	b016      	add	sp, #88	@ 0x58
 80089d0:	bd70      	pop	{r4, r5, r6, pc}
 80089d2:	466a      	mov	r2, sp
 80089d4:	f000 f848 	bl	8008a68 <_fstat_r>
 80089d8:	2800      	cmp	r0, #0
 80089da:	dbec      	blt.n	80089b6 <__swhatbuf_r+0x12>
 80089dc:	9901      	ldr	r1, [sp, #4]
 80089de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089e6:	4259      	negs	r1, r3
 80089e8:	4159      	adcs	r1, r3
 80089ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ee:	e7eb      	b.n	80089c8 <__swhatbuf_r+0x24>

080089f0 <__smakebuf_r>:
 80089f0:	898b      	ldrh	r3, [r1, #12]
 80089f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f4:	079d      	lsls	r5, r3, #30
 80089f6:	4606      	mov	r6, r0
 80089f8:	460c      	mov	r4, r1
 80089fa:	d507      	bpl.n	8008a0c <__smakebuf_r+0x1c>
 80089fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	6123      	str	r3, [r4, #16]
 8008a04:	2301      	movs	r3, #1
 8008a06:	6163      	str	r3, [r4, #20]
 8008a08:	b003      	add	sp, #12
 8008a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a0c:	ab01      	add	r3, sp, #4
 8008a0e:	466a      	mov	r2, sp
 8008a10:	f7ff ffc8 	bl	80089a4 <__swhatbuf_r>
 8008a14:	9f00      	ldr	r7, [sp, #0]
 8008a16:	4605      	mov	r5, r0
 8008a18:	4639      	mov	r1, r7
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7ff f914 	bl	8007c48 <_malloc_r>
 8008a20:	b948      	cbnz	r0, 8008a36 <__smakebuf_r+0x46>
 8008a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a26:	059a      	lsls	r2, r3, #22
 8008a28:	d4ee      	bmi.n	8008a08 <__smakebuf_r+0x18>
 8008a2a:	f023 0303 	bic.w	r3, r3, #3
 8008a2e:	f043 0302 	orr.w	r3, r3, #2
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	e7e2      	b.n	80089fc <__smakebuf_r+0xc>
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	6020      	str	r0, [r4, #0]
 8008a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a3e:	81a3      	strh	r3, [r4, #12]
 8008a40:	9b01      	ldr	r3, [sp, #4]
 8008a42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a46:	b15b      	cbz	r3, 8008a60 <__smakebuf_r+0x70>
 8008a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f000 f81d 	bl	8008a8c <_isatty_r>
 8008a52:	b128      	cbz	r0, 8008a60 <__smakebuf_r+0x70>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	f023 0303 	bic.w	r3, r3, #3
 8008a5a:	f043 0301 	orr.w	r3, r3, #1
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	431d      	orrs	r5, r3
 8008a64:	81a5      	strh	r5, [r4, #12]
 8008a66:	e7cf      	b.n	8008a08 <__smakebuf_r+0x18>

08008a68 <_fstat_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	4d07      	ldr	r5, [pc, #28]	@ (8008a88 <_fstat_r+0x20>)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	4611      	mov	r1, r2
 8008a74:	602b      	str	r3, [r5, #0]
 8008a76:	f7f8 fb7f 	bl	8001178 <_fstat>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	d102      	bne.n	8008a84 <_fstat_r+0x1c>
 8008a7e:	682b      	ldr	r3, [r5, #0]
 8008a80:	b103      	cbz	r3, 8008a84 <_fstat_r+0x1c>
 8008a82:	6023      	str	r3, [r4, #0]
 8008a84:	bd38      	pop	{r3, r4, r5, pc}
 8008a86:	bf00      	nop
 8008a88:	20004d08 	.word	0x20004d08

08008a8c <_isatty_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4d06      	ldr	r5, [pc, #24]	@ (8008aa8 <_isatty_r+0x1c>)
 8008a90:	2300      	movs	r3, #0
 8008a92:	4604      	mov	r4, r0
 8008a94:	4608      	mov	r0, r1
 8008a96:	602b      	str	r3, [r5, #0]
 8008a98:	f7f8 fb7e 	bl	8001198 <_isatty>
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	d102      	bne.n	8008aa6 <_isatty_r+0x1a>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	b103      	cbz	r3, 8008aa6 <_isatty_r+0x1a>
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	20004d08 	.word	0x20004d08

08008aac <_init>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	bf00      	nop
 8008ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab2:	bc08      	pop	{r3}
 8008ab4:	469e      	mov	lr, r3
 8008ab6:	4770      	bx	lr

08008ab8 <_fini>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	bf00      	nop
 8008abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008abe:	bc08      	pop	{r3}
 8008ac0:	469e      	mov	lr, r3
 8008ac2:	4770      	bx	lr
